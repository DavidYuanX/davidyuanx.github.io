<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Base64 格式的数据是如何实现的</title>
      <link href="/2021/03/05/Base64%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/2021/03/05/Base64%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64哥可打印字符来表示二进制数据的方法。</p><p>对于前端来说，一切可以放路径的地方，都可以使用Base64来替代。</p><p>node中的buffer对象可以通过toString(‘base64’)将buffer对象输出为base64.我们这里来简述一下汉字转换成Base64的实现原理。</p><p>比如我们来探索一下汉字“哈”通过Base64的转换结果为“5ZOI”是如何实现的。</p><h3 id="1、将字符串通过Buffer-from获取buffer，并将buffer中的每个16的buffer字节转为2进制"><a href="#1、将字符串通过Buffer-from获取buffer，并将buffer中的每个16的buffer字节转为2进制" class="headerlink" title="1、将字符串通过Buffer.from获取buffer，并将buffer中的每个16的buffer字节转为2进制"></a>1、将字符串通过Buffer.from获取buffer，并将buffer中的每个16的buffer字节转为2进制</h3><p>首先可以利用nodejs 中Buffer对象的from 方法，将汉字转换为buffer对象。 可以得到e5 93 88三个16进制的字节。可以看到这个函子由3个字节组成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">"哈"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf); <span class="comment">// // e5 93 88</span></span><br></pre></td></tr></table></figure><p>然后再将每个字节转换为二进制，0x代表16进制，我们需要再e5 93 88前面分别拼上0x，toString方法中可以传入要转换的字进制，这里写2.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将每个字节转为二进制</span></span><br><span class="line">（<span class="number">0xe5</span>).toString(<span class="number">2</span>); <span class="comment">// 11100101</span></span><br><span class="line"> (<span class="number">0x93</span>).toString(<span class="number">2</span>); <span class="comment">// 10010011</span></span><br><span class="line"> (<span class="number">0x88</span>).toString(<span class="number">2</span>); <span class="comment">// 10001000</span></span><br></pre></td></tr></table></figure></p><h3 id="2、将所有二进制拼接在一起，6个一组进行划分，在前面补00，凑成8位二进制"><a href="#2、将所有二进制拼接在一起，6个一组进行划分，在前面补00，凑成8位二进制" class="headerlink" title="2、将所有二进制拼接在一起，6个一组进行划分，在前面补00，凑成8位二进制"></a>2、将所有二进制拼接在一起，6个一组进行划分，在前面补00，凑成8位二进制</h3><p>将得到的三个2进制的数据连接在一起，得到 111001011001001110001000 。然后每六个一组进行切割为4部分。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111001</span> <span class="number">011001</span> <span class="number">001110</span> <span class="number">001000</span></span><br></pre></td></tr></table></figure></p><p>接着 再每一组的前面用0补位，凑成8位<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00111001</span> </span><br><span class="line"><span class="number">00011001</span> </span><br><span class="line"><span class="number">00001110</span> </span><br><span class="line"><span class="number">00001000</span></span><br></pre></td></tr></table></figure></p><h3 id="3、将新的二进制转换成10进制"><a href="#3、将新的二进制转换成10进制" class="headerlink" title="3、将新的二进制转换成10进制"></a>3、将新的二进制转换成10进制</h3><p>得到的四组数据分别再转换为10进制数据。这里一共可以获得4个数字。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">paresInt(<span class="string">'00111001'</span>, <span class="number">2</span>) <span class="comment">// 二进制变为10进制 57</span></span><br><span class="line">paresInt(<span class="string">'00011001'</span>, <span class="number">2</span>) <span class="comment">// 二进制变为10进制 25</span></span><br><span class="line">paresInt(<span class="string">'00001110'</span>, <span class="number">2</span>) <span class="comment">// 二进制变为10进制 14</span></span><br><span class="line">paresInt(<span class="string">'00001000'</span>, <span class="number">2</span>) <span class="comment">// 二进制变为10进制 8</span></span><br></pre></td></tr></table></figure></p><h3 id="4、在Base64集合中分别通过10进制下标取出，并链接"><a href="#4、在Base64集合中分别通过10进制下标取出，并链接" class="headerlink" title="4、在Base64集合中分别通过10进制下标取出，并链接"></a>4、在Base64集合中分别通过10进制下标取出，并链接</h3><p>base64的编码数据基本是从A-Z加上a-z再加上0123456789+/ 中获取的。我们拼接出这个字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base64编码</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'ABCDEFGHIGKLMNOPQRSTUVWSYZ'</span>;</span><br><span class="line">str += str.toLowerCase(); <span class="comment">// 小写字符拼接一次</span></span><br><span class="line">str += <span class="string">'0123456789+/'</span>; <span class="comment">// 数字拼接一次</span></span><br></pre></td></tr></table></figure></p><p>字符串可以类似数组一样通过下标来获取指定位置的字符，这里通过上面10进制转换之后的值分别获取对应位置的字符，57获取的就是5，<br>25获取的就是Z，14获取的就是O,8获取的就是I。<br>将这四个字符拼接在一起就是5ZOI。就是之前转换后的Base64。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base64 = str[<span class="number">57</span>] + str[<span class="number">25</span>] + str[<span class="number">14</span>] + str[<span class="number">8</span>]; <span class="comment">// 5ZOI</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之常见手写功能</title>
      <link href="/2020/06/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/06/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E5%B8%B8%E8%A7%81%E6%89%8B%E5%86%99%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">Func, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (Func.prototype) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(instance, Func.prototype)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = Func.apply(instance, args)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">"function"</span> || (<span class="keyword">typeof</span> res === <span class="string">"object"</span> &amp;&amp; res !== <span class="literal">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = myNew(Person, <span class="string">'Jack'</span>)</span><br><span class="line">me.sayName()</span><br><span class="line"><span class="built_in">console</span>.log(me)</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context = globalThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> newFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> newArgs = args.concat(...arguments)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> newFunc) &#123;</span><br><span class="line">      <span class="comment">// 通过 new 调用，绑定 this 为实例对象</span></span><br><span class="line">      fn.apply(<span class="keyword">this</span>, newArgs)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通过普通函数形式调用，绑定 context</span></span><br><span class="line">      fn.apply(context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 支持 new 调用方式</span></span><br><span class="line">  newFunc.prototype = <span class="built_in">Object</span>.create(fn.prototype)</span><br><span class="line">  <span class="keyword">return</span> newFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> other = &#123; <span class="attr">name</span>: <span class="string">'Jackson'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name || <span class="string">'default'</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> meSay = say.myBind(me)</span><br><span class="line">meSay()</span><br><span class="line"><span class="keyword">const</span> otherSay = say.myBind(other)</span><br><span class="line">otherSay()</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context = globalThis</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 关键步骤，在 context 上调用方法，触发 this 绑定为 context，使用 Symbol 防止原有属性的覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>(<span class="string">'key'</span>)</span><br><span class="line">  context[key] = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// es5 可通过 for 遍历 arguments 得到参数数组</span></span><br><span class="line">  <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> res = context[key](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name || <span class="string">'default'</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">say.myCall(me)</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context = globalThis</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 关键步骤，在 context 上调用方法，触发 this 绑定为 context，使用 Symbol 防止原有属性的覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>(<span class="string">'key'</span>)</span><br><span class="line">  context[key] = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> res</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    res = context[key](...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = context[key]()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name || <span class="string">'default'</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">say.myApply(me)</span><br></pre></td></tr></table></figure><h3 id="deepCopy"><a href="#deepCopy" class="headerlink" title="deepCopy"></a>deepCopy</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj, cache = new WeakMap(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="comment">// 防止循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (cache.get(obj)) <span class="keyword">return</span> cache.get(obj)</span><br><span class="line">  <span class="comment">// 支持函数</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      obj.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 支持日期</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj)</span><br><span class="line">  <span class="comment">// 支持正则对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj.source, obj.flags)</span><br><span class="line">  <span class="comment">// 还可以增加其他对象，比如：Map, Set等，根据情况判断增加即可，面试点到为止就可以了</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组是 key 为数字素银的特殊对象</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line">  <span class="comment">// 缓存 copy 的对象，用于处理循环引用的情况</span></span><br><span class="line">  cache.set(obj, res)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      res[key] = deepCopy(obj[key], cache)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    birth: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'1997-10-10'</span>),</span><br><span class="line">    ary: [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;],</span><br><span class="line">    say() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">source.source = source</span><br><span class="line"><span class="keyword">const</span> newObj = deepCopy(source)</span><br><span class="line"><span class="built_in">console</span>.log(newObj.meta.ary[<span class="number">2</span>] === source.meta.ary[<span class="number">2</span>]); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.meta.birth === source.meta.birth); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="事件总线-发布订阅模式"><a href="#事件总线-发布订阅模式" class="headerlink" title="事件总线 | 发布订阅模式"></a>事件总线 | 发布订阅模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(name, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache[name]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.cache[name].push(fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.cache[name] = [fn]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off(name, fn) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="keyword">this</span>.cache[name]</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = tasks.findIndex(<span class="function">(<span class="params">f</span>) =&gt;</span> f === fn || f.callback === fn)</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        tasks.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache[name]) &#123;</span><br><span class="line">      <span class="comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="keyword">this</span>.cache[name].slice()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(name, once = <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache[name]) &#123;</span><br><span class="line">      <span class="comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="keyword">this</span>.cache[name].slice()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (once) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.cache[name]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="keyword">const</span> task1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'task1'</span>); &#125;</span><br><span class="line"><span class="keyword">const</span> task2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'task2'</span>); &#125;</span><br><span class="line">eventBus.on(<span class="string">'task'</span>, task1)</span><br><span class="line">eventBus.on(<span class="string">'task'</span>, task2)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  eventBus.emit(<span class="string">'task'</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"><a href="#柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数" class="headerlink" title="柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"></a>柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 关键知识点：function.length 用来获取函数的形参个数</span></span><br><span class="line">    <span class="comment">// 补充：arguments.length 获取的是实参个数</span></span><br><span class="line">    <span class="keyword">if</span> (args.length &gt;= func.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> curried.apply(<span class="keyword">this</span>, args.concat(args2))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> curriedSum = curry(sum)</span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="es5-实现继承"><a href="#es5-实现继承" class="headerlink" title="es5 实现继承"></a>es5 实现继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">age, name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = create(Parent.prototype)</span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line"></span><br><span class="line">Child.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="number">18</span>, <span class="string">'Jack'</span>)</span><br><span class="line">child.sayName()</span><br><span class="line">child.sayAge()</span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInstanceOf</span>(<span class="params">instance, klass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> proto = instance.__proto__</span><br><span class="line">  <span class="keyword">let</span> prototype = klass.prototype</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    proto = proto.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child()</span><br><span class="line"><span class="built_in">console</span>.log(isInstanceOf(child, Parent), isInstanceOf(child, Child), isInstanceOf(child, <span class="built_in">Array</span>));</span><br></pre></td></tr></table></figure><h3 id="异步并发数限制"><a href="#异步并发数限制" class="headerlink" title="异步并发数限制"></a>异步并发数限制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键点</span></span><br><span class="line"><span class="comment"> * 1. new promise 一经创建，立即执行</span></span><br><span class="line"><span class="comment"> * 2. 使用 Promise.resolve().then 可以把任务加到微任务队列，防止立即执行迭代方法</span></span><br><span class="line"><span class="comment"> * 3. 微任务处理过程中，产生的新的微任务，会在同一事件循环内，追加到微任务队列里</span></span><br><span class="line"><span class="comment"> * 4. 使用 race 在某个任务完成时，继续添加任务，保持任务按照最大并发数进行执行</span></span><br><span class="line"><span class="comment"> * 5. 任务完成后，需要从 doingTasks 中移出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limit</span>(<span class="params">count, array, iterateFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = []</span><br><span class="line">  <span class="keyword">const</span> doingTasks = []</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> enqueue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === array.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> task = <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> iterateFunc(array[i++]))</span><br><span class="line">    tasks.push(task)</span><br><span class="line">    <span class="keyword">const</span> doing = task.then(<span class="function"><span class="params">()</span> =&gt;</span> doingTasks.splice(doingTasks.indexOf(doing), <span class="number">1</span>))</span><br><span class="line">    doingTasks.push(doing)</span><br><span class="line">    <span class="keyword">const</span> res = doingTasks.length &gt;= count ? <span class="built_in">Promise</span>.race(doingTasks) : <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    <span class="keyword">return</span> res.then(enqueue)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> enqueue().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.all(tasks))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="function"><span class="params">i</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(i), i))</span><br><span class="line">limit(<span class="number">2</span>, [<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>], timeout).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="异步串行-异步并行"><a href="#异步串行-异步并行" class="headerlink" title="异步串行 | 异步并行"></a>异步串行 | 异步并行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节面试题，实现一个异步加法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncAdd</span>(<span class="params">a, b, callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, a + b);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案</span></span><br><span class="line"><span class="comment">// 1. promisify</span></span><br><span class="line"><span class="keyword">const</span> promiseAdd = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  asyncAdd(a, b, (err, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 串行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">serialSum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">task, now</span>) =&gt;</span> task.then(<span class="function"><span class="params">res</span> =&gt;</span> promiseAdd(res, now)), <span class="built_in">Promise</span>.resolve(<span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 并行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">parallelSum</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (args.length === <span class="number">1</span>) <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> tasks = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">    tasks.push(promiseAdd(args[i], args[i + <span class="number">1</span>] || <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">  <span class="keyword">return</span> parallelSum(...results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Running...'</span>);</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> serialSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res1)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> parallelSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res2)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Done'</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="vue-reactive"><a href="#vue-reactive" class="headerlink" title="vue reactive"></a>vue reactive</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dep module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> stack = []</span><br><span class="line">  <span class="keyword">static</span> target = <span class="literal">null</span></span><br><span class="line">  deps = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.deps = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  depend() &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deps.add(Dep.target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">this</span>.deps.forEach(<span class="function"><span class="params">w</span> =&gt;</span> w.update())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> pushTarget(t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.target) &#123;</span><br><span class="line">      <span class="keyword">this</span>.stack.push(<span class="keyword">this</span>.target)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.target = t</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> popTarget() &#123;</span><br><span class="line">    <span class="keyword">this</span>.target = <span class="keyword">this</span>.stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(o).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">      defineReactive(o, k, o[k])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, k, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, k, &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      dep.depend()</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">      val = newVal</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">    reactive(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watcher</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(effect) &#123;</span><br><span class="line">    <span class="keyword">this</span>.effect = effect</span><br><span class="line">    <span class="keyword">this</span>.update()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update() &#123;</span><br><span class="line">    Dep.pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.effect()</span><br><span class="line">    Dep.popTarget()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">  msg: <span class="string">'aaa'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'===&gt; effect'</span>, data.msg);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  data.msg = <span class="string">'hello'</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建议阅读 [Promises/A+ 标准](https://promisesaplus.com/)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(func) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="string">'pending'</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.resolvedTasks = []</span><br><span class="line">    <span class="keyword">this</span>.rejectedTasks = []</span><br><span class="line">    <span class="keyword">this</span>._resolve = <span class="keyword">this</span>._resolve.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>._reject = <span class="keyword">this</span>._reject.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      func(<span class="keyword">this</span>._resolve, <span class="keyword">this</span>._reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">this</span>._reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _resolve(value) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.status = <span class="string">'fulfilled'</span></span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.resolvedTasks.forEach(<span class="function"><span class="params">t</span> =&gt;</span> t(value))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _reject(reason) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.status = <span class="string">'reject'</span></span><br><span class="line">      <span class="keyword">this</span>.value = reason</span><br><span class="line">      <span class="keyword">this</span>.rejectedTasks.forEach(<span class="function"><span class="params">t</span> =&gt;</span> t(reason))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.resolvedTasks.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = onFulfilled(value)</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            res.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.rejectedTasks.push(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = onRejected(value)</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            res.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'a error'</span>)</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'==&gt;'</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursionFlat</span>(<span class="params">ary = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  ary.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">      res.push(...recursionFlat(item))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方案 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceFlat</span>(<span class="params">ary = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ary.reduce(<span class="function">(<span class="params">res, item</span>) =&gt;</span> res.concat(<span class="built_in">Array</span>.isArray(item) ? reduceFlat(item) : item), [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]], <span class="string">'7'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(recursionFlat(source))</span><br><span class="line"><span class="built_in">console</span>.log(reduceFlat(source))</span><br></pre></td></tr></table></figure><h3 id="对象扁平化"><a href="#对象扁平化" class="headerlink" title="对象扁平化"></a>对象扁平化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFlat</span>(<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">item, preKey = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.entries(item).forEach(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = preKey ? <span class="string">`<span class="subst">$&#123;preKey&#125;</span>.<span class="subst">$&#123;key&#125;</span>`</span> : key</span><br><span class="line">      <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">        flat(val, newKey)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res[newKey] = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  flat(obj)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span> &#125;, <span class="attr">e</span>: <span class="number">3</span> &#125;, <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(objectFlat(source));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之性能优化</title>
      <link href="/2020/06/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/06/10/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="前端缓存"><a href="#前端缓存" class="headerlink" title="前端缓存"></a>前端缓存</h3><p>缓存是性能优化中非常重要的一环，浏览器的缓存机制对开发也是非常重要的知识点。接下来以三个部分来把浏览器的缓存机制说清楚：</p><ul><li>强缓存</li><li>协商缓存</li><li>缓存位置</li></ul><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>浏览器中的缓存作用分为两种情况，一种是需要发送HTTP请求，一种是不需要发送。</p><p>首先是检查强缓存，这个阶段不需要发送HTTP请求。</p><p>如何来检查呢？通过相应的字段来进行，但是说起这个字段就有点门道了。</p><p>在HTTP/1.0和HTTP/1.1当中，这个字段是不一样的。在早期，也就是HTTP/1.0时期，使用的是Expires，而HTTP/1.1使用的是Cache-Control。让我们首先来看看Expires。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>Expires即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。比如下面这样:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, <span class="number">22</span> Nov <span class="number">2019</span> <span class="number">08</span>:<span class="number">41</span>:<span class="number">00</span> GMT</span><br></pre></td></tr></table></figure></p><p>表示资源在2019年11月22号8点41分过期，过期了就得向服务端发请求。</p><p>这个方式看上去没什么问题，合情合理，但其实潜藏了一个坑，那就是服务器的时间和浏览器的时间可能并不一致，那服务器返回的这个过期时间可能就是不准确的。因此这种方式很快在后来的HTTP1.1版本中被抛弃了。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>在HTTP1.1中，采用了一个非常关键的字段：Cache-Control。这个字段也是存在于</p><p>它和Expires本质的不同在于它并没有采用具体的过期时间点这个方式，而是采用过期时长来控制缓存，对应的字段是max-age。比如这个例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:max-age=<span class="number">3600</span></span><br></pre></td></tr></table></figure></p><p>代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。</p><p>如果你觉得它只有max-age一个属性的话，那就大错特错了。</p><p>它其实可以组合非常多的指令，完成更多场景的缓存判断, 将一些关键的属性列举如下: public: 客户端和代理服务器都可以缓存。因为一个请求可能要经过不同的代理服务器最后才到达目标服务器，那么结果就是不仅仅浏览器可以缓存数据，中间的任何代理节点都可以进行缓存。</p><p><b>private：</b> 这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。</p><p><b>no-cache: </b>跳过当前的强缓存，发送HTTP请求，即直接进入协商缓存阶段。</p><p><b>no-store：</b>非常粗暴，不进行任何形式的缓存。</p><p><b>s-maxage：</b>这和max-age长得比较像，但是区别在于s-maxage是针对代理服务器的缓存时间。</p><p><b>must-revalidate:</b> 是缓存就会有过期的时候，加上这个字段一旦缓存过期，就必须回到源服务器验证。</p><p>值得注意的是，当Expires和Cache-Control同时存在的时候，Cache-Control会优先考虑。</p><p>当然，还存在一种情况，当资源缓存时间超时了，也就是强缓存失效了，接下来怎么办？没错，这样就进入到第二级屏障——协商缓存了。</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>强缓存失效之后，浏览器在请求头中携带相应的缓存tag来向服务器发请求，由服务器根据这个tag，来决定是否使用缓存，这就是协商缓存。</p><p>具体来说，这样的缓存tag分为两种: Last-Modified 和 ETag。这两者各有优劣，并不存在谁对谁有绝对的优势，跟上面强缓存的两个 tag 不一样。</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p>即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。</p><p>浏览器接收到后，如果再次请求，会在请求头中携带If-Modified-Since字段，这个字段的值也就是服务器传来的最后修改时间。</p><p>服务器拿到请求头中的If-Modified-Since的字段后，其实会和这个服务器中该资源的最后修改时间对比:</p><ul><li>如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。</li><li>否则返回304，告诉浏览器直接用缓存。</li></ul><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>ETag 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。</p><p>浏览器接收到ETag的值，会在下次请求时，将这个值作为If-None-Match这个字段的内容，并放到请求头中，然后发给服务器。</p><p>服务器接收到If-None-Match后，会跟服务器上该资源的ETag进行比对:</p><p>如果两者不一样，说明要更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。<br>否则返回304，告诉浏览器直接用缓存。</p><h4 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h4><p> 在精准度上，ETag优于Last-Modified。优于 ETag 是按照内容给资源上标识，因此能准确感知资源的变化。而 Last-Modified 就不一样了，它在一些特殊的情况并不能准确感知资源变化，主要有两种情况:</p><ul><li>编辑了资源文件，但是文件内容并没有更改，这样也会造成缓存失效。</li><li>Last-Modified 能够感知的单位时间是秒，如果文件在 1 秒内改变了多次，那么这时候的 Last-Modified 并没有体现出修改了。</li></ul><p>在性能上，Last-Modified优于ETag，也很简单理解，Last-Modified仅仅只是记录一个时间点，而 Etag需要根据文件的具体内容生成哈希值。<br>另外，如果两种方式都支持的话，服务器会优先考虑ETag</p><h4 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h4><p>前面我们已经提到，当强缓存命中或者协商缓存中服务器返回304的时候，我们直接从缓存中获取资源。那这些资源究竟缓存在什么位置呢？</p><p>浏览器中的缓存位置一共有四种，按优先级从高到低排列分别是：</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><p>Service Worker 借鉴了 Web Worker的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如离线缓存、消息推送和网络代理等功能。其中的离线缓存就是 Service Worker Cache。</p><p>Service Worker 同时也是 PWA 的重要实现机制，关于它的细节和特性，我们将会在后面的 PWA 的分享中详细介绍。</p><h4 id="Memory-Cache-和-Disk-Cache"><a href="#Memory-Cache-和-Disk-Cache" class="headerlink" title="Memory Cache 和 Disk Cache"></a>Memory Cache 和 Disk Cache</h4><p>Memory Cache指的是内存缓存，从效率上讲它是最快的。但是从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。</p><p>Disk Cache就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。稍微有些计算机基础的应该很好理解，就不展开了。</p><p>好，现在问题来了，既然两者各有优劣，那浏览器如何决定将资源放进内存还是硬盘呢？主要策略如下：</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><p>这里就不一一展开了, 可以多多回顾, 温故知新. </p><h3 id="浏览器的本地存储"><a href="#浏览器的本地存储" class="headerlink" title="浏览器的本地存储?"></a>浏览器的本地存储?</h3><blockquote><p>浏览器的本地存储主要分为Cookie、WebStorage和IndexDB, 其中WebStorage又可以分为localStorage和sessionStorage。接下来我们就来一一分析这些本地存储方案。</p></blockquote><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>Cookie 最开始被设计出来其实并不是来做本地存储的，而是为了弥补HTTP在状态管理上的不足。</p><p>HTTP 协议是一个无状态协议，客户端向服务器发请求，服务器返回响应，故事就这样结束了，但是下次发请求如何让服务端知道客户端是谁呢？</p><p>这种背景下，就产生了 Cookie.</p><p>Cookie 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在chrome开发者面板的Application这一栏可以看到)。向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。</p><p>Cookie 的作用很好理解，就是用来做状态存储的，但它也是有诸多致命的缺陷的：</p><ul><li><p>容量缺陷。Cookie 的体积上限只有4KB，只能用来存储少量的信息。</p></li><li><p>性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。</p></li><li><p>安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在HttpOnly为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。</p></li></ul><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><p>localStorage有一点跟Cookie一样，就是针对一个域名，即在同一个域名下，会存储相同的一段localStorage。</p><p>不过它相对Cookie还是有相当多的区别的:</p><ul><li><p>容量。localStorage 的容量上限为5M，相比于Cookie的 4K 大大增加。当然这个 5M 是针对一个域名的，因此对于一个域名是持久存储的。</p></li><li><p>只存在客户端，默认不参与与服务端的通信。这样就很好地避免了 Cookie 带来的性能问题和安全问题。</p></li><li><p>接口封装。通过localStorage暴露在全局，并通过它的 setItem 和 getItem等方法进行操作，非常方便。</p></li></ul><h5 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h5><p>接下来我们来具体看看如何来操作localStorage。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">"sanyuan"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line">localStorage.setItem(<span class="string">"name"</span>, <span class="string">"sanyuan"</span>); </span><br><span class="line">localStorage.setItem(<span class="string">"info"</span>, <span class="built_in">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure><p>接着进入相同的域名时就能拿到相应的值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = localStorage.getItem(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">let</span> info = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"info"</span>));</span><br></pre></td></tr></table></figure><p>从这里可以看出，localStorage其实存储的都是字符串，如果是存储对象需要调用JSON的stringify方法，并且用JSON.parse来解析成对象。</p><h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><p>利用localStorage的较大容量和持久特性，可以利用localStorage存储一些内容稳定的资源，比如官网的logo，存储Base64格式的图片资源，因此利用localStorage .</p><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>sessionStorage以下方面和localStorage一致:</p><ul><li>容量。容量上限也为 5M。</li><li>只存在客户端，默认不参与与服务端的通信。</li><li>接口封装。除了sessionStorage名字有所变化，存储方式、操作方式均和localStorage一样。<br>但sessionStorage和localStorage有一个本质的区别，那就是前者只是会话级别的存储，并不是持久化存储。会话结束，也就是页面关闭，这部分sessionStorage就不复存在了。</li></ul><h5 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h5><ul><li>可以用它对表单信息进行维护，将表单信息存储在里面，可以保证页面即使刷新也不会让之前的表单信息丢失。</li><li>可以用它存储本次浏览记录。如果关闭页面后不需要这些记录，用sessionStorage就再合适不过了。事实上微博就采取了这样的存储方式。</li></ul><h4 id="IndexDB"><a href="#IndexDB" class="headerlink" title="IndexDB"></a>IndexDB</h4><p>IndexDB是运行在浏览器中的非关系型数据库, 本质上是数据库，绝不是和刚才WebStorage的 5M 一个量级，理论上这个容量是没有上限的。</p><p>关于它的使用，本文侧重原理，而且 MDN 上的教程文档已经非常详尽，这里就不做赘述了，感兴趣可以看一下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB" title="[external] [title]" target="_blank" rel="noopener">使用文档</a>。</p><p>接着我们来分析一下IndexDB的一些重要特性，除了拥有数据库本身的特性，比如支持事务，存储二进制数据，还有这样一些特性需要格外注意：</p><ul><li>键值对存储。内部采用对象仓库存放数据，在这个对象仓库中数据采用键值对的方式来存储。</li><li>异步操作。数据库的读写属于 I/O 操作, 浏览器中对异步 I/O 提供了支持。</li><li>受同源策略限制，即无法访问跨域的数据库。</li></ul><h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>节流的核心思想: 如果在定时器的时间范围内再次触发，则不予理睬，等当前定时器完成，才能启动下一个定时器任务。这就好比公交车，10 分钟一趟，10 分钟内有多少人在公交站等我不管，10 分钟一到我就要发车走人</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> funtion(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="comment">// 还没到时间</span></span><br><span class="line">    <span class="keyword">if</span>(now - last &lt; interval) <span class="keyword">return</span>;</span><br><span class="line">    last = now;</span><br><span class="line">    fn.apply(<span class="keyword">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>核心思想: 每次事件触发则删除原来的定时器，建立新的定时器。跟王者荣耀的回城功能类似，你反复触发回城功能，那么只认最后一次，从最后一次触发开始计时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(timer) clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双剑合璧——加强版节流"><a href="#双剑合璧——加强版节流" class="headerlink" title="双剑合璧——加强版节流"></a>双剑合璧——加强版节流</h4><p>现在我们可以把防抖和节流放到一起，为什么呢？因为防抖有时候触发的太频繁会导致一次响应都没有，我们希望到了固定的时间必须给用户一个响应，事实上很多前端库就是采取了这样的思路。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span>, timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span>(now - last &gt; delay)&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        last = now;</span><br><span class="line">        fn.apply(context, args);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 这个时候表示时间到了，必须给响应</span></span><br><span class="line">      last = now;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><h4 id="方案一-clientHeight、scrollTop-和-offsetTop"><a href="#方案一-clientHeight、scrollTop-和-offsetTop" class="headerlink" title="方案一:clientHeight、scrollTop 和 offsetTop"></a>方案一:clientHeight、scrollTop 和 offsetTop</h4><p>首先给图片一个占位资源:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"default.jpg"</span> data-src=<span class="string">"http://www.xxx.com/target.jpg"</span> /&gt;&lt;<span class="regexp">/img&gt;</span></span><br></pre></td></tr></table></figure></p><p>接着，通过监听 scroll 事件来判断图片是否到达视口:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.document.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;<span class="comment">//计数器，从第一张图片开始计</span></span><br><span class="line"></span><br><span class="line">lazyload();<span class="comment">//首次加载别忘了显示图片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, lazyload);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> viewHeight = <span class="built_in">document</span>.documentElement.clientHeight;<span class="comment">//视口高度</span></span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;<span class="comment">//滚动条卷去的高度</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = count; i &lt;num; i++) &#123;</span><br><span class="line">    <span class="comment">// 元素现在已经出现在视口中</span></span><br><span class="line">    <span class="keyword">if</span>(img[i].offsetTop &lt; scrollHeight + viewHeight) &#123;</span><br><span class="line">      <span class="keyword">if</span>(img[i].getAttribute(<span class="string">"src"</span>) !== <span class="string">"default.jpg"</span>) <span class="keyword">continue</span>;</span><br><span class="line">      img[i].src = img[i].getAttribute(<span class="string">"data-src"</span>);</span><br><span class="line">      count ++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，最好对 scroll 事件做节流处理，以免频繁触发:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// throttle函数我们上节已经实现</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(lazyload, <span class="number">200</span>));</span><br></pre></td></tr></table></figure><h4 id="方案二：getBoundingClientRect"><a href="#方案二：getBoundingClientRect" class="headerlink" title="方案二：getBoundingClientRect"></a>方案二：getBoundingClientRect</h4><p>现在我们用另外一种方式来判断图片是否出现在了当前视口, 即 DOM 元素的 getBoundingClientRect API。</p><p>上述的 lazyload 函数改成下面这样:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = count; i &lt;num; i++) &#123;</span><br><span class="line">    <span class="comment">// 元素现在已经出现在视口中</span></span><br><span class="line">    <span class="keyword">if</span>(img[i].getBoundingClientRect().top &lt; <span class="built_in">document</span>.documentElement.clientHeight) &#123;</span><br><span class="line">      <span class="keyword">if</span>(img[i].getAttribute(<span class="string">"src"</span>) !== <span class="string">"default.jpg"</span>) <span class="keyword">continue</span>;</span><br><span class="line">      img[i].src = img[i].getAttribute(<span class="string">"data-src"</span>);</span><br><span class="line">      count ++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="方案三-IntersectionObserver"><a href="#方案三-IntersectionObserver" class="headerlink" title="方案三: IntersectionObserver"></a>方案三: IntersectionObserver</h4><p>这是浏览器内置的一个API，实现了监听window的scroll事件、判断是否在视口中以及节流三大功能。</p><p>我们来具体试一把：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">changes</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//changes 是被观察的元素集合</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = changes.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> change = changes[i];</span><br><span class="line">    <span class="comment">// 通过这个属性判断是否在视口中</span></span><br><span class="line">    <span class="keyword">if</span>(change.isIntersecting) &#123;</span><br><span class="line">      <span class="keyword">const</span> imgElement = change.target;</span><br><span class="line">      imgElement.src = imgElement.getAttribute(<span class="string">"data-src"</span>);</span><br><span class="line">      observer.unobserve(imgElement);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">observer.observe(img);</span><br></pre></td></tr></table></figure></p><p>这样就很方便地实现了图片懒加载，当然这个IntersectionObserver也可以用作其他资源的预加载，功能非常强大。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之HTTP协议</title>
      <link href="/2020/05/25/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BHTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/05/25/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BHTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP-的请求方法"><a href="#HTTP-的请求方法" class="headerlink" title="HTTP 的请求方法"></a>HTTP 的请求方法</h3><h4 id="具体有哪些请求方法？"><a href="#具体有哪些请求方法？" class="headerlink" title="具体有哪些请求方法？"></a>具体有哪些请求方法？</h4><p>http/1.1规定了以下请求方法(注意，都是大写):</p><ul><li>GET: 通常用来获取资源</li><li>HEAD: 获取资源的元信息</li><li>POST: 提交数据，即上传数据</li><li>PUT: 修改数据</li><li>DELETE: 删除资源(几乎用不到)</li><li>CONNECT: 建立连接隧道，用于代理服务器</li><li>OPTIONS: 列出可对资源实行的请求方法，用来跨域请求</li><li>TRACE: 追踪请求-响应的传输路径</li></ul><h4 id="GET-和-POST-有什么区别？"><a href="#GET-和-POST-有什么区别？" class="headerlink" title="GET 和 POST 有什么区别？"></a>GET 和 POST 有什么区别？</h4><p>首先最直观的是语义上的区别。</p><p>而后又有这样一些具体的差别:</p><ul><li>从缓存的角度，GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。</li><li>从编码的角度，GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。</li><li>从参数的角度，GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。</li><li>从幂等性的角度，GET是幂等的，而POST不是。(幂等表示执行相同的操作，结果也是相同的)</li><li>从TCP的角度，GET 请求会把请求报文一次性发出去，而 POST 会分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。(火狐浏览器除外，它的 POST 请求只发一个 TCP 包)</li></ul><h3 id="如何理解-URI？"><a href="#如何理解-URI？" class="headerlink" title="如何理解 URI？"></a>如何理解 URI？</h3><p>URI, 全称为(Uniform Resource Identifier), 也就是统一资源标识符，它的作用很简单，就是区分互联网上不同的资源。</p><p>但是，它并不是我们常说的网址, 网址指的是URL, 实际上URI包含了URN和URL两个部分，由于 URL 过于普及，就默认将 URI 视为 URL 了。</p><h4 id="URI-的结构"><a href="#URI-的结构" class="headerlink" title="URI 的结构"></a>URI 的结构</h4><p>URI 真正最完整的结构是这样的。<br><img src="/img/uri.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><p>可能你会有疑问，好像跟平时见到的不太一样啊！先别急，我们来一一拆解。</p><p>scheme 表示协议名，比如http, https, file等等。后面必须和://连在一起。</p><p>user:passwd@ 表示登录主机时的用户信息，不过很不安全，不推荐使用，也不常用。</p><p>host:port表示主机名和端口。</p><p>path表示请求路径，标记资源所在位置。</p><p>query表示查询参数，为key=val这种形式，多个键值对之间用&amp;隔开。</p><p>fragment表示 URI 所定位的资源内的一个锚点，浏览器可以根据这个锚点跳转到对应的位置。</p><p>举个例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.baidu.com/s?wd=HTTP&amp;rsv_spt=1</span></span><br></pre></td></tr></table></figure></p><p>这个 URI 中，https即scheme部分，<a href="http://www.baidu.com为host:port部分（注意，http" target="_blank" rel="noopener">www.baidu.com为host:port部分（注意，http</a> 和 https 的默认端口分别为80、443），/s为path部分，而wd=HTTP&amp;rsv_spt=1就是query部分。</p><h4 id="URI-编码"><a href="#URI-编码" class="headerlink" title="URI 编码"></a>URI 编码</h4><p>URI 只能使用ASCII, ASCII 之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不加以处理就会导致解析出错。</p><p>因此，URI 引入了编码机制，将所有非 ASCII 码字符和界定符转为十六进制字节值，然后在前面加个%。</p><p>如，空格被转义成了%20，三元被转义成了%E4%B8%89%E5%85%83。</p><h3 id="如何理解-HTTP-状态码？"><a href="#如何理解-HTTP-状态码？" class="headerlink" title="如何理解 HTTP 状态码？"></a>如何理解 HTTP 状态码？</h3><p>RFC 规定 HTTP 的状态码为三位数，被分为五类:</p><ul><li>1xx: 表示目前是协议处理的中间状态，还需要后续操作。</li><li>2xx: 表示成功状态。</li><li>3xx: 重定向状态，资源位置发生变动，需要重新请求。</li><li>4xx: 请求报文有误。</li><li>5xx: 服务器端发生错误。<br>接下来就一一分析这里面具体的状态码。<h4 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h4>101 Switching Protocols。在HTTP升级为WebSocket的时候，如果服务器同意变更，就会发送状态码 101。</li></ul><h4 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h4><p>200 OK是见得最多的成功状态码。通常在响应体中放有数据。</p><p>204 No Content含义与 200 相同，但响应头后没有 body 数据。</p><p>206 Partial Content顾名思义，表示部分内容，它的使用场景为 HTTP 分块下载和断电续传，当然也会带上相应的响应头字段Content-Range。</p><h4 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h4><p>301 Moved Permanently即永久重定向，对应着302 Found，即临时重定向。</p><p>比如你的网站从 HTTP 升级到了 HTTPS 了，以前的站点再也不用了，应当返回301，这个时候浏览器默认会做缓存优化，在第二次访问的时候自动访问重定向的那个地址。</p><p>而如果只是暂时不可用，那么直接返回302即可，和301不同的是，浏览器并不会做缓存优化。</p><p>304 Not Modified: 当协商缓存命中时会返回这个状态码。详见浏览器缓存</p><h4 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h4><p>400 Bad Request: 开发者经常看到一头雾水，只是笼统地提示了一下错误，并不知道哪里出错了。</p><p>401 Unauthorized 代表客户端错误，指的是由于缺乏目标资源要求的身份验证凭证，发送的请求未得到满足。</p><p>403 Forbidden: 这实际上并不是请求报文出错，而是服务器禁止访问，原因有很多，比如法律禁止、信息敏感。</p><p>404 Not Found: 资源未找到，表示没在服务器上找到相应的资源。</p><p>405 Method Not Allowed: 请求方法不被服务器端允许。</p><p>406 Not Acceptable: 资源无法满足客户端的条件。</p><p>408 Request Timeout: 服务器等待了太长时间。</p><p>409 Conflict: 多个请求发生了冲突。</p><p>413 Request Entity Too Large: 请求体的数据过大。</p><p>414 Request-URI Too Long: 请求行里的 URI 太大。</p><p>429 Too Many Request: 客户端发送的请求过多。</p><p>431 Request Header Fields Too Large请求头的字段内容太大。</p><h4 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h4><p>500 Internal Server Error: 仅仅告诉你服务器出错了，出了啥错咱也不知道。</p><p>501 Not Implemented: 表示客户端请求的功能还不支持。</p><p>502 Bad Gateway: 服务器自身是正常的，但访问的时候出错了，啥错误咱也不知道。</p><p>503 Service Unavailable: 表示服务器当前很忙，暂时无法响应服务。</p><h3 id="简要概括一下-HTTP-的特点？HTTP-有哪些缺点？"><a href="#简要概括一下-HTTP-的特点？HTTP-有哪些缺点？" class="headerlink" title="简要概括一下 HTTP 的特点？HTTP 有哪些缺点？"></a>简要概括一下 HTTP 的特点？HTTP 有哪些缺点？</h3><h4 id="HTTP-的特点概括如下"><a href="#HTTP-的特点概括如下" class="headerlink" title="HTTP 的特点概括如下:"></a>HTTP 的特点概括如下:</h4><ul><li><p>灵活可扩展，主要体现在两个方面。一个是语义上的自由，只规定了基本格式，比如空格分隔单词，换行分隔字段，其他的各个部分都没有严格的语法限制。另一个是传输形式的多样性，不仅仅可以传输文本，还能传输图片、视频等任意数据，非常方便。</p></li><li><p>可靠传输。HTTP 基于 TCP/IP，因此把这一特性继承了下来。这属于 TCP 的特性，不具体介绍了。</p></li><li><p>请求-应答。也就是一发一收、有来有回， 当然这个请求方和应答方不单单指客户端和服务器之间，如果某台服务器作为代理来连接后端的服务端，那么这台服务器也会扮演请求方的角色。</p></li><li><p>无状态。这里的状态是指通信过程的上下文信息，而每次 http 请求都是独立、无关的，默认不需要保留状态信息。</p></li></ul><h4 id="HTTP-缺点"><a href="#HTTP-缺点" class="headerlink" title="HTTP 缺点"></a>HTTP 缺点</h4><h5 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h5><p>所谓的优点和缺点还是要分场景来看的，对于 HTTP 而言，最具争议的地方在于它的无状态。</p><p>在需要长连接的场景中，需要保存大量的上下文信息，以免传输大量重复的信息，那么这时候无状态就是 http 的缺点了。</p><p>但与此同时，另外一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态反而减少了网络开销，成为了 http 的优点。</p><h4 id="明文传输"><a href="#明文传输" class="headerlink" title="明文传输"></a>明文传输</h4><p>即协议里的报文(主要指的是头部)不使用二进制数据，而是文本形式。</p><p>这当然对于调试提供了便利，但同时也让 HTTP 的报文信息暴露给了外界，给攻击者也提供了便利。WIFI陷阱就是利用 HTTP 明文传输的缺点，诱导你连上热点，然后疯狂抓你所有的流量，从而拿到你的敏感信息。</p><h4 id="队头阻塞问题"><a href="#队头阻塞问题" class="headerlink" title="队头阻塞问题"></a>队头阻塞问题</h4><p>当 http 开启长连接时，共用一个 TCP 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于阻塞状态，也就是著名的队头阻塞问题。接下来会有一小节讨论这个问题。</p><h3 id="对-Content-系列字段了解多少？"><a href="#对-Content-系列字段了解多少？" class="headerlink" title="对 Content 系列字段了解多少？"></a>对 Content 系列字段了解多少？</h3><p>对于Content系列字段的介绍分为四个部分: 数据格式、压缩方式、支持语言和字符集。</p><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><p>上一节谈到 HTTP 灵活的特性，它支持非常多的数据格式，那么这么多格式的数据一起到达客户端，客户端怎么知道它的格式呢？</p><p>当然，最低效的方式是直接猜，有没有更好的方式呢？直接指定可以吗？</p><p>答案是肯定的。不过首先需要介绍一个标准——MIME(Multipurpose Internet Mail Extensions, 多用途互联网邮件扩展)。它首先用在电子邮件系统中，让邮件可以发任意类型的数据，这对于 HTTP 来说也是通用的。</p><p>因此，HTTP 从MIME type取了一部分来标记报文 body 部分的数据类型，这些类型体现在Content-Type这个字段，当然这是针对于发送端而言，接收端想要收到特定类型的数据，也可以用Accept字段。</p><p>具体而言，这两个字段的取值可以分为下面几类:</p><ul><li>text： text/html, text/plain, text/css 等</li><li>image: image/gif, image/jpeg, image/png 等</li><li>audio/video: audio/mpeg, video/mp4 等</li><li>application: application/json, application/javascript, application/pdf, application/octet-stream</li></ul><h4 id="压缩方式"><a href="#压缩方式" class="headerlink" title="压缩方式"></a>压缩方式</h4><p>当然一般这些数据都是会进行编码压缩的，采取什么样的压缩方式就体现在了发送方的Content-Encoding字段上， 同样的，接收什么样的压缩方式体现在了接受方的Accept-Encoding字段上。这个字段的取值有下面几种：</p><ul><li>gzip: 当今最流行的压缩格式</li><li>deflate: 另外一种著名的压缩格式</li><li>br: 一种专门为 HTTP 发明的压缩算法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line">Accept-Encoding: gizp</span><br></pre></td></tr></table></figure><h4 id="支持语言"><a href="#支持语言" class="headerlink" title="支持语言"></a>支持语言</h4><p>对于发送方而言，还有一个Content-Language字段，在需要实现国际化的方案当中，可以用来指定支持的语言，在接受方对应的字段为Accept-Language。如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line">Content-Language: zh-CN, zh, en</span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line">Accept-Language: zh-CN, zh, en</span><br></pre></td></tr></table></figure><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>最后是一个比较特殊的字段, 在接收端对应为Accept-Charset，指定可以接受的字符集，而在发送端并没有对应的Content-Charset, 而是直接放在了Content-Type中，相信大家也经常看到，以charset属性指定。如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line">Accept-Charset: charset=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><h4 id="对于定长和不定长的数据，HTTP-是怎么传输的？"><a href="#对于定长和不定长的数据，HTTP-是怎么传输的？" class="headerlink" title="对于定长和不定长的数据，HTTP 是怎么传输的？"></a>对于定长和不定长的数据，HTTP 是怎么传输的？</h4><h5 id="定长包体"><a href="#定长包体" class="headerlink" title="定长包体"></a>定长包体</h5><p>对于定长包体而言，发送端在传输的时候一般会带上 Content-Length, 来指明包体的长度。</p><p>我们用一个nodejs服务器来模拟一下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Content-Length'</span>, <span class="number">10</span>);</span><br><span class="line">    res.write(<span class="string">"helloworld"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8081</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"成功启动"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>启动后访问: localhost:8081。</p><p>浏览器中显示如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helloworld</span><br></pre></td></tr></table></figure></p><p>这是长度正确的情况，那不正确的情况是如何处理的呢？</p><p>我们试着把这个长度设置的小一些:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'Content-Length'</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure></p><p>重启服务，再次访问，现在浏览器中内容如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hellowor</span><br></pre></td></tr></table></figure><p>那后面的ld哪里去了呢？实际上在 http 的响应体中直接被截去了。</p><p>然后我们试着将这个长度设置得大一些:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'Content-Length'</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure></p><p>此时浏览器会显示 网页无法正常运作, 可以看到Content-Length对于 http 传输过程起到了十分关键的作用，如果设置不当可以直接导致传输失败。</p><h5 id="不定长包体"><a href="#不定长包体" class="headerlink" title="不定长包体"></a>不定长包体</h5><p>上述是针对于定长包体，那么对于不定长包体而言是如何传输的呢？</p><p>这里就必须介绍另外一个 http 头部字段了:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><p>表示分块传输数据，设置这个字段后会自动产生两个效果:</p><ul><li>Content-Length 字段会被忽略</li><li>基于长连接持续推送动态内容<br>我们依然以一个实际的例子来模拟分块传输，nodejs 程序如下:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf8'</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Content-Length'</span>, <span class="number">10</span>);</span><br><span class="line">    res.setHeader(<span class="string">'Transfer-Encoding'</span>, <span class="string">'chunked'</span>);</span><br><span class="line">    res.write(<span class="string">"&lt;p&gt;来啦&lt;/p&gt;"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.write(<span class="string">"第一次传输&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      res.write(<span class="string">"第二次传输"</span>);</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8009</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"成功启动"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问效果 会依次 按照 在页面 输出 res.write 的内容. </p><h3 id="HTTP-中如何处理表单数据的提交"><a href="#HTTP-中如何处理表单数据的提交" class="headerlink" title="HTTP 中如何处理表单数据的提交?"></a>HTTP 中如何处理表单数据的提交?</h3><p>在 http 中，有两种主要的表单提交的方式，体现在两种不同的Content-Type取值:</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data<br>由于表单提交一般是POST请求，很少考虑GET，因此这里我们将默认提交的数据放在请求体中。</li></ul><h4 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h4><ul><li>其中的数据会被编码成以&amp;分隔的键值对</li><li>字符以URL编码方式编码。<br>如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换过程: &#123;a: 1, b: 2&#125; -&gt; a=1&amp;b=2 -&gt; 如下(最终形式)</span></span><br><span class="line"><span class="string">"a%3D1%26b%3D2"</span></span><br></pre></td></tr></table></figure><h4 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h4><ul><li>请求头中的Content-Type字段会包含boundary，且boundary的值有浏览器默认指定。例: Content-Type: multipart/form-data;boundary=—-WebkitFormBoundaryRRJKeWfHPGrS4LKe。</li><li>数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有 HTTP 头部描述子包体，如Content-Type，在最后的分隔符会加上–表示结束。</li></ul><p>相应的请求体是下面这样:</p><p>Content-Disposition: form-data;name=”data1”;<br>Content-Type: text/plain<br>data1<br>—-WebkitFormBoundaryRRJKeWfHPGrS4LKe<br>Content-Disposition: form-data;name=”data2”;<br>Content-Type: text/plain<br>data2<br>—-WebkitFormBoundaryRRJKeWfHPGrS4LKe–</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote><p>值得一提的是，multipart/form-data 格式最大的特点在于:每一个表单元素都是独立的资源表述。另外，你可能在写业务的过程中，并没有注意到其中还有boundary的存在，如果你打开抓包工》&gt;具，确实可以看到不同的表单元素被拆分开了，之所以在平时感觉不到，是以为浏览器和 HTTP 给你封装了这一系列操作。而且，在实际的场景中，对于图片等文件的上传，基本采用multipart/form-data而不用application/x-www-form-urlencoded，因为没有必要做 URL 编码，带来巨大耗时的同时也占用了更&gt;多的空间。</p></blockquote><h3 id="如何解决-HTTP-的队头阻塞问题？"><a href="#如何解决-HTTP-的队头阻塞问题？" class="headerlink" title="如何解决 HTTP 的队头阻塞问题？"></a>如何解决 HTTP 的队头阻塞问题？</h3><h4 id="什么是-HTTP-队头阻塞？"><a href="#什么是-HTTP-队头阻塞？" class="headerlink" title="什么是 HTTP 队头阻塞？"></a>什么是 HTTP 队头阻塞？</h4><p>从前面的小节可以知道，HTTP 传输是基于请求-应答的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是著名的HTTP队头阻塞问题。</p><h4 id="并发连接"><a href="#并发连接" class="headerlink" title="并发连接"></a>并发连接</h4><p>对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。在RFC2616规定过客户端最多并发 2 个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome 中是 6 个。</p><p>但其实，即使是提高了并发连接，还是不能满足人们对性能的需求。</p><h4 id="域名分片"><a href="#域名分片" class="headerlink" title="域名分片"></a>域名分片</h4><p>一个域名不是可以并发 6 个长连接吗？那我就多分几个域名。</p><p>比如 content1.baidu.com 、content2.baidu.com。</p><p>这样一个baidu.com域名下可以分出非常多的二级域名，而它们都指向同样的一台服务器，能够并发的长连接数更多了，事实上也更好地解决了队头阻塞的问题。</p><h3 id="对-Cookie-了解多少？"><a href="#对-Cookie-了解多少？" class="headerlink" title="对 Cookie 了解多少？"></a>对 Cookie 了解多少？</h3><h4 id="Cookie-简介"><a href="#Cookie-简介" class="headerlink" title="Cookie 简介"></a>Cookie 简介</h4><p>前面说到了 HTTP 是一个无状态的协议，每次 http 请求都是独立、无关的，默认不需要保留状态信息。但有时候需要保存一些状态，怎么办呢？</p><p>HTTP 为此引入了 Cookie。Cookie 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在chrome开发者面板的Application这一栏可以看到)。向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。而服务端可以通过响应头中的Set-Cookie字段来对客户端写入Cookie。举例如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求头</span></span><br><span class="line">Cookie: a=xxx;b=xxx</span><br><span class="line"><span class="comment">// 响应头</span></span><br><span class="line"><span class="built_in">Set</span>-Cookie: a=xxx</span><br><span class="line"><span class="keyword">set</span>-Cookie: b=xxx</span><br></pre></td></tr></table></figure></p><h4 id="Cookie-属性"><a href="#Cookie-属性" class="headerlink" title="Cookie 属性"></a>Cookie 属性</h4><h5 id="生存周期"><a href="#生存周期" class="headerlink" title="生存周期"></a>生存周期</h5><p>Cookie 的有效期可以通过Expires和Max-Age两个属性来设置。</p><ul><li>Expires即过期时间</li><li>Max-Age用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算。<br>若 Cookie 过期，则这个 Cookie 会被删除，并不会发送给服务端。</li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>关于作用域也有两个属性: Domain和path, 给 Cookie 绑定了域名和路径，在发送请求之前，发现域名或者路径和这两个属性不匹配，那么就不会带上 Cookie。值得注意的是，对于路径来说，/表示域名下的任意路径都允许使用 Cookie。</p><h4 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h4><p>如果 cookie 字段带上HttpOnly，那么说明只能通过 HTTP 协议传输，不能通过 JS 访问，这也是预防 XSS 攻击的重要手段。</p><p>相应的，对于 CSRF 攻击的预防，也有SameSite属性。</p><p>SameSite可以设置为三个值，Strict、Lax和None。</p><p>a. 在Strict模式下，浏览器完全禁止第三方请求携带Cookie。比如请求baidu.com网站只能在baidu.com域名当中请求才能携带 Cookie，在其他网站请求都不能。</p><p>b. 在Lax模式，就宽松一点了，但是只能在 get 方法提交表单况或者a 标签发送 get 请求的情况下可以携带 Cookie，其他情况均不能。</p><p>c. 在None模式下，也就是默认模式，请求会自动携带上 Cookie。</p><h4 id="Cookie-的缺点"><a href="#Cookie-的缺点" class="headerlink" title="Cookie 的缺点"></a>Cookie 的缺点</h4><ul><li><p>容量缺陷。Cookie 的体积上限只有4KB，只能用来存储少量的信息。</p></li><li><p>性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。但可以通过Domain和Path指定作用域来解决。</p></li><li><p>安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在HttpOnly为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。</p></li></ul><h3 id="如何理解-HTTP-代理？"><a href="#如何理解-HTTP-代理？" class="headerlink" title="如何理解 HTTP 代理？"></a>如何理解 HTTP 代理？</h3><p>我们知道在 HTTP 是基于请求-响应模型的协议，一般由客户端发请求，服务器来进行响应。</p><p>当然，也有特殊情况，就是代理服务器的情况。引入代理之后，作为代理的服务器相当于一个中间人的角色，对于客户端而言，表现为服务器进行响应；而对于源服务器，表现为客户端发起请求，具有双重身份。</p><p>那代理服务器到底是用来做什么的呢? </p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li><p><b>负载均衡。</b>客户端的请求只会先到达代理服务器，后面到底有多少源服务器，IP 都是多少，客户端是不知道的。因此，这个代理服务器可以拿到这个请求之后，可以通过特定的算法分发给不同的源服务器，让各台源服务器的负载尽量平均。当然，这样的算法有很多，包括随机算法、轮询、一致性hash、LRU(最近最少使用)等等，不过这些算法并不是本文的重点，大家有兴趣自己可以研究一下。</p></li><li><p><b>保障安全。</b>利用心跳机制监控后台的服务器，一旦发现故障机就将其踢出集群。并且对于上下行的数据进行过滤，对非法 IP 限流，这些都是代理服务器的工作。</p></li><li><p><b>缓存代理。</b>将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得而不用到源服务器那里。下一节详细拆解。</p></li></ul><h3 id="如何理解-HTTP-缓存及缓存代理？"><a href="#如何理解-HTTP-缓存及缓存代理？" class="headerlink" title="如何理解 HTTP 缓存及缓存代理？"></a>如何理解 HTTP 缓存及缓存代理？</h3><p>关于强缓存和协商缓存的内容，我已经在能不能说一说浏览器缓存做了详细分析，小结如下:</p><p>首先通过 Cache-Control 验证强缓存是否可用</p><ul><li>如果强缓存可用，直接使用</li><li>否则进入协商缓存，即发送 HTTP 请求，服务器通过请求头中的If-Modified-Since或者If-None-Match这些条件请求字段检查资源是否更新<ul><li>若资源更新，返回资源和200状态码</li><li>否则，返回304，告诉浏览器直接从缓存获取资源<br>这一节我们主要来说说另外一种缓存方式: 代理缓存。</li></ul></li></ul><h4 id="为什么产生代理缓存？"><a href="#为什么产生代理缓存？" class="headerlink" title="为什么产生代理缓存？"></a>为什么产生代理缓存？</h4><p>对于源服务器来说，它也是有缓存的，比如Redis, Memcache，但对于 HTTP 缓存来说，如果每次客户端缓存失效都要到源服务器获取，那给源服务器的压力是很大的。</p><p>由此引入了缓存代理的机制。让代理服务器接管一部分的服务端HTTP缓存，客户端缓存过期后就近到代理缓存中获取，代理缓存过期了才请求源服务器，这样流量巨大的时候能明显降低源服务器的压力。</p><p>那缓存代理究竟是如何做到的呢？</p><p>总的来说，缓存代理的控制分为两部分，一部分是源服务器端的控制，一部分是客户端的控制。</p><h4 id="源服务器的缓存控制"><a href="#源服务器的缓存控制" class="headerlink" title="源服务器的缓存控制"></a>源服务器的缓存控制</h4><h5 id="private-和-public"><a href="#private-和-public" class="headerlink" title="private 和 public"></a>private 和 public</h5><p>在源服务器的响应头中，会加上Cache-Control这个字段进行缓存控制字段，那么它的值当中可以加入private或者public表示是否允许代理服务器缓存，前者禁止，后者为允许。</p><p>比如对于一些非常私密的数据，如果缓存到代理服务器，别人直接访问代理就可以拿到这些数据，是非常危险的，因此对于这些数据一般是不会允许代理服务器进行缓存的，将响应头部的Cache-Control设为private，而不是public。</p><h5 id="proxy-revalidate"><a href="#proxy-revalidate" class="headerlink" title="proxy-revalidate"></a>proxy-revalidate</h5><p>must-revalidate的意思是客户端缓存过期就去源服务器获取，而proxy-revalidate则表示代理服务器的缓存过期后到源服务器获取。</p><h5 id="s-maxage"><a href="#s-maxage" class="headerlink" title="s-maxage"></a>s-maxage</h5><p>s是share的意思，限定了缓存在代理服务器中可以存放多久，和限制客户端缓存时间的max-age并不冲突。</p><p>讲了这几个字段，我们不妨来举个小例子，源服务器在响应头中加入这样一个字段:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: public, max-age=<span class="number">1000</span>, s-maxage=<span class="number">2000</span></span><br></pre></td></tr></table></figure><p>相当于源服务器说: 我这个响应是允许代理服务器缓存的，客户端缓存过期了到代理中拿，并且在客户端的缓存时间为 1000 秒，在代理服务器中的缓存时间为 2000 s。</p><h4 id="客户端的缓存控制"><a href="#客户端的缓存控制" class="headerlink" title="客户端的缓存控制"></a>客户端的缓存控制</h4><h5 id="max-stale-和-min-fresh"><a href="#max-stale-和-min-fresh" class="headerlink" title="max-stale 和 min-fresh"></a>max-stale 和 min-fresh</h5><p>在客户端的请求头中，可以加入这两个字段，来对代理服务器上的缓存进行宽容和限制操作。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max-stale: 5</span><br></pre></td></tr></table></figure><p>表示客户端到代理服务器上拿缓存的时候，即使代理缓存过期了也不要紧，只要过期时间在5秒之内，还是可以从代理中获取的。</p><p>又比如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min-fresh: 5</span><br></pre></td></tr></table></figure><p>表示代理缓存需要一定的新鲜度，不要等到缓存刚好到期再拿，一定要在到期前 5 秒之前的时间拿，否则拿不到。</p><h4 id="only-if-cached"><a href="#only-if-cached" class="headerlink" title="only-if-cached"></a>only-if-cached</h4><p>这个字段加上后表示客户端只会接受代理缓存，而不会接受源服务器的响应。如果代理缓存无效，则直接返回504（Gateway Timeout）。</p><p>以上便是缓存代理的内容，涉及的字段比较多，希望能多多回顾，加深理解。</p><h3 id="什么是跨域？浏览器如何拦截响应？如何解决？"><a href="#什么是跨域？浏览器如何拦截响应？如何解决？" class="headerlink" title="什么是跨域？浏览器如何拦截响应？如何解决？"></a>什么是跨域？浏览器如何拦截响应？如何解决？</h3><p>在前后端分离的开发模式中，经常会遇到跨域问题，即 Ajax 请求发出去了，服务器也成功响应了，前端就是拿不到这个响应。接下来我们就来好好讨论一下这个问题。</p><h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h4><p>浏览器遵循同源政策(scheme(协议)、host(主机)和port(端口)都相同则为同源)。非同源站点有这样一些限制:</p><ul><li>不能读取和修改对方的 DOM</li><li>不读访问对方的 Cookie、IndexDB 和 LocalStorage</li><li>限制 XMLHttpRequest 请求。(后面的话题着重围绕这个)</li></ul><p>当浏览器向目标 URI 发 Ajax 请求时，只要当前 URL 和目标 URL 不同源，则产生跨域，被称为跨域请求。</p><p>跨域请求的响应一般会被浏览器所拦截，注意，是被浏览器拦截，响应其实是成功到达客户端了。</p><p>接下来我们来说一说解决跨域问题的几种方案。</p><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>CORS 其实是 W3C 的一个标准，全称是跨域资源共享。它需要浏览器和服务器的共同支持，具体来说，非 IE 和 IE10 以上支持CORS，服务器需要附加特定的响应头，后面具体拆解。不过在弄清楚 CORS 的原理之前，我们需要清楚两个概念: 简单请求和非简单请求。</p><p>浏览器根据请求方法和请求头的特定字段，将请求做了一下分类，具体来说规则是这样，凡是满足下面条件的属于简单请求:</p><p>请求方法为 GET、POST 或者 HEAD<br>请求头的取值范围: Accept、Accept-Language、Content-Language、Content-Type(只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain)<br>浏览器画了这样一个圈，在这个圈里面的就是简单请求, 圈外面的就是非简单请求，然后针对这两种不同的请求进行不同的处理。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>请求发出去之前，浏览器做了什么？</p><p>它会自动在请求头当中，添加一个Origin字段，用来说明请求来自哪个源。服务器拿到请求之后，在回应时对应地添加Access-Control-Allow-Origin字段，如果Origin不在这个字段的范围中，那么浏览器就会将响应拦截。</p><p>因此，Access-Control-Allow-Origin字段是服务器用来决定浏览器是否拦截这个响应，这是必需的字段。与此同时，其它一些可选的功能性的字段，用来描述如果不会拦截，这些字段将会发挥各自的作用。</p><p>Access-Control-Allow-Credentials。这个字段是一个布尔值，表示是否允许发送 Cookie，对于跨域请求，浏览器对这个字段默认值设为 false，而如果需要拿到浏览器的 Cookie，需要添加这个响应头并设为true, 并且在前端也需要设置withCredentials属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>Access-Control-Expose-Headers。这个字段是给 XMLHttpRequest 对象赋能，让它不仅可以拿到基本的 6 个响应头字段（包括Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma）, 还能拿到这个字段声明的响应头字段。比如这样设置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Expose-Headers: aaa</span><br></pre></td></tr></table></figure><p>那么在前端可以通过 XMLHttpRequest.getResponseHeader(‘aaa’) 拿到 aaa 这个字段的值。</p><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><p>非简单请求相对而言会有些不同，体现在两个方面: 预检请求和响应字段。</p><p>我们以 PUT 方法为例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://xxx.com'</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Custom-Header'</span>, <span class="string">'xxx'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>当这段代码执行后，首先会发送预检请求。这个预检请求的请求行和请求体是下面这个格式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS / HTTP/1.1</span><br><span class="line">Origin: 当前地址</span><br><span class="line">Host: xxx.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br></pre></td></tr></table></figure><p>预检请求的方法是OPTIONS，同时会加上Origin源地址和Host目标地址，这很简单。同时也会加上两个关键的字段:</p><ul><li>Access-Control-Request-Method, 列出 CORS 请求用到哪个HTTP方法</li><li>Access-Control-Request-Headers，指定 CORS 请求将要加上什么请求头</li></ul><p>这是预检请求。接下来是响应字段，响应字段也分为两部分，一部分是对于预检请求的响应，一部分是对于 CORS 请求的响应。</p><p>预检请求的响应。如下面的格式:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure></p><p>其中有这样几个关键的响应头字段:</p><ul><li>Access-Control-Allow-Origin: 表示可以允许请求的源，可以填具体的源名，也可以填*表示允许任意源请求。</li><li>Access-Control-Allow-Methods: 表示允许的请求方法列表。</li><li>Access-Control-Allow-Credentials: 简单请求中已经介绍。</li><li>Access-Control-Allow-Headers: 表示允许发送的请求头字段</li><li>Access-Control-Max-Age: 预检请求的有效期，在此期间，不用发出另外一条预检请求。<br>在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出去了。</li></ul><p>CORS 请求的响应。绕了这么一大转，到了真正的 CORS 请求就容易多了，现在它和简单请求的情况是一样的。浏览器自动加上Origin字段，服务端响应头返回Access-Control-Allow-Origin。可以参考以上简单请求部分的内容。</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>虽然XMLHttpRequest对象遵循同源政策，但是script标签不一样，它可以通过 src 填上目标地址从而发出 GET 请求，实现跨域请求并拿到响应。这也就是 JSONP 的原理，接下来我们就来封装一个 JSONP:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonp = <span class="function">(<span class="params">&#123; url, params, callbackName &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> generateURL = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dataStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      dataStr += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>&amp;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dataStr += <span class="string">`callback=<span class="subst">$&#123;callbackName&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;dataStr&#125;</span>`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化回调函数名称</span></span><br><span class="line">    callbackName = callbackName || <span class="built_in">Math</span>.random().toString.replace(<span class="string">','</span>, <span class="string">''</span>); </span><br><span class="line">    <span class="comment">// 创建 script 元素并加入到当前文档中</span></span><br><span class="line">    <span class="keyword">let</span> scriptEle = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    scriptEle.src = generateURL();</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(scriptEle);</span><br><span class="line">    <span class="comment">// 绑定到 window 上，为了后面调用</span></span><br><span class="line">    <span class="built_in">window</span>[callbackName] = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">      <span class="comment">// script 执行完了，成为无用元素，需要清除</span></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(scriptEle);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然在服务端也会有响应的操作, 以 express 为例:</p><p>let express = require(‘express’)<br>let app = express()<br>app.get(‘/‘, function(req, res) {<br>  let { a, b, callback } = req.query<br>  console.log(a); // 1<br>  console.log(b); // 2<br>  // 注意哦，返回给script标签，浏览器直接把这部分字符串执行<br>  res.end(<code>${callback}(&#39;数据包&#39;)</code>);<br>})<br>app.listen(3000)</p><p>前端这样简单地调用一下就好了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">  params: &#123; </span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 拿到数据进行处理</span></span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// 数据包</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>和CORS相比，JSONP 最大的优势在于兼容性好，IE 低版本不能使用 CORS 但可以使用 JSONP，缺点也很明显，请求方法单一，只支持 GET 请求。</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>Nginx 是一种高性能的反向代理服务器，可以用来轻松解决跨域问题。</p><p>what？反向代理？我给你看一张图你就懂了。<br><img src="/img/proxy.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><p>正向代理帮助客户端访问客户端自己访问不到的服务器，然后将结果返回给客户端。</p><p>反向代理拿到客户端的请求，将请求转发给其他的服务器，主要的场景是维持服务器集群的负载均衡，换句话说，反向代理帮其它的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它。</p><p>因此，两者的区别就很明显了，正向代理服务器是帮客户端做事情，而反向代理服务器是帮其它的服务器做事情。</p><p>好了，那 Nginx 是如何来解决跨域的呢？</p><p>比如说现在客户端的域名为client.com，服务器的域名为server.com，客户端向服务器发送 Ajax 请求，当然会跨域了，那这个时候让 Nginx 登场了，通过下面这个配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  <span class="number">80</span>;</span><br><span class="line">  server_name  client.com;</span><br><span class="line">  location /api &#123;</span><br><span class="line">    proxy_pass server.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nginx 相当于起了一个跳板机，这个跳板机的域名也是client.com，让客户端首先访问 client.com/api，这当然没有跨域，然后 Nginx 服务器作为反向代理，将请求转发给server.com，当响应返回时又将响应给到客户端，这就完成整个跨域请求的过程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之安全篇</title>
      <link href="/2020/05/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E5%AE%89%E5%85%A8%E7%AF%87/"/>
      <url>/2020/05/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E5%AE%89%E5%85%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-XSS-攻击？"><a href="#什么是-XSS-攻击？" class="headerlink" title="什么是 XSS 攻击？"></a>什么是 XSS 攻击？</h3><p>XSS 全称是 Cross Site Scripting(即跨站脚本)，为了和 CSS 区分，故叫它XSS。XSS 攻击是指浏览器中执行恶意脚本(无论是跨域还是同域)，从而拿到用户的信息并进行操作。</p><p>这些操作一般可以完成下面这些事情:</p><ul><li>窃取Cookie。</li><li>监听用户行为，比如输入账号密码后直接发送到黑客服务器。</li><li>修改 DOM 伪造登录表单。</li><li>在页面中生成浮窗广告。</li><li>通常情况，XSS 攻击的实现有三种方式——存储型、反射型和文档型。原理都比较简单，先来一一介绍一下。</li></ul><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>存储型，顾名思义就是将恶意脚本存储了起来，确实，存储型的 XSS 将脚本存储到了服务端的数据库，然后在客户端执行这些脚本，从而达到攻击的效果。</p><p>常见的场景是留言评论区提交一段脚本代码，如果前后端没有做好转义的工作，那评论内容存到了数据库，在页面渲染过程中直接执行, 相当于执行一段未知逻辑的 JS 代码，是非常恐怖的。这就是存储型的 XSS 攻击。</p><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>反射型XSS指的是恶意脚本作为网络请求的一部分。</p><p>最经典就是在请求地址带参数, 这样，在服务器端会拿到参数,然后将内容返回给浏览器端，浏览器将这些内容作为HTML的一部分解析，发现是一个脚本，直接执行，这样就被攻击了。</p><p>之所以叫它反射型, 是因为恶意脚本是通过作为网络请求的参数，经过服务器，然后再反射到HTML文档中，执行解析。和存储型不一样的是，服务器并不会存储这些恶意脚本。</p><h4 id="文档型"><a href="#文档型" class="headerlink" title="文档型"></a>文档型</h4><p>文档型的 XSS 攻击并不会经过服务端，而是作为中间人的角色，在数据传输过程劫持到网络数据包，然后修改里面的 html 文档！</p><p>这样的劫持方式包括WIFI路由器劫持或者本地恶意软件等。</p><h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><p>明白了三种XSS攻击的原理，我们能发现一个共同点: 都是让恶意脚本直接能在浏览器中执行。</p><p>那么要防范它，就是要避免这些脚本代码的执行。</p><p>为了完成这一点，必须做到一个信念，两个利用。</p><h4 id="一个信念"><a href="#一个信念" class="headerlink" title="一个信念"></a>一个信念</h4><p>千万不要相信任何用户的输入！</p><p>无论是在前端和服务端，都要对用户的输入进行转码或者过滤。</p><h4 id="利用-CSP"><a href="#利用-CSP" class="headerlink" title="利用 CSP"></a>利用 CSP</h4><p>CSP，即浏览器中的内容安全策略，它的核心思想就是服务器决定浏览器加载哪些资源，具体来说可以完成以下功能:</p><ul><li>限制其他域下的资源加载。</li><li>禁止向其它域提交数据。</li><li>提供上报机制，能帮助我们及时发现 XSS 攻击。</li></ul><h4 id="利用-HttpOnly-和-Secure-限制访问-Cookie"><a href="#利用-HttpOnly-和-Secure-限制访问-Cookie" class="headerlink" title="利用 HttpOnly 和 Secure 限制访问 Cookie"></a>利用 HttpOnly 和 Secure 限制访问 Cookie</h4><ul><li><p>有两种方法可以确保 Cookie 被安全发送，并且不会被意外的参与者或脚本访问：Secure 属性和HttpOnly 属性。</p></li><li><p>标记为 Secure 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端，但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障, 例如，可以访问客户端硬盘的人可以读取它。</p></li><li><p>JavaScript Document.cookie API 无法访问带有 HttpOnly 属性的cookie；此类 Cookie 仅作用于服务器。例如，例如，持久化服务器端会话的 Cookie 不需要对 JavaScript 可用，而应具有 HttpOnly 属性。此预防措施有助于缓解跨站点脚本（XSS）攻击。</p></li></ul><h3 id="CSRF攻击-是什么"><a href="#CSRF攻击-是什么" class="headerlink" title="CSRF攻击 是什么?"></a>CSRF攻击 是什么?</h3><p>定义: </p><blockquote><p>CSRF(Cross-site request forgery), 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。</p></blockquote><p>举个例子, 你在某个论坛点击了黑客精心挑选的小姐姐图片，你点击后，进入了一个新的页面。</p><p>那么恭喜你，被攻击了:）</p><p>你可能会比较好奇，怎么突然就被攻击了呢？接下来我们就来拆解一下当你点击了链接之后，黑客在背后做了哪些事情。</p><p>可能会做三样事情。列举如下: </p><h4 id="自动发-GET-请求"><a href="#自动发-GET-请求" class="headerlink" title="自动发 GET 请求"></a>自动发 GET 请求</h4><p>黑客网页里面可能有一段这样的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://xxx.com/info?user=hhh&amp;count=100"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进入页面后自动发送 get 请求，值得注意的是，这个请求会自动带上关于 xxx.com 的 cookie 信息(这里是假定你已经在 xxx.com 中登录过)。</p><p>假如服务器端没有相应的验证机制，它可能认为发请求的是一个正常的用户，因为携带了相应的 cookie，然后进行相应的各种操作，可以是转账汇款以及其他的恶意操作。</p><h4 id="自动发-POST-请求"><a href="#自动发-POST-请求" class="headerlink" title="自动发 POST 请求"></a>自动发 POST 请求</h4><p>黑客可能自己填了一个表单，写了一段自动提交的脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'hacker-form'</span> <span class="attr">action</span>=<span class="string">"https://xxx.com/info"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"hhh"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'hacker-form'</span>).submit();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样也会携带相应的用户 cookie 信息，让服务器误以为是一个正常的用户在操作，让各种恶意的操作变为可能。</p><h4 id="诱导点击发送-GET-请求"><a href="#诱导点击发送-GET-请求" class="headerlink" title="诱导点击发送 GET 请求"></a>诱导点击发送 GET 请求</h4><p>在黑客的网站上，可能会放上一个链接，驱使你来点击:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://xxx/info?user=hhh&amp;count=100"</span> <span class="attr">taget</span>=<span class="string">"_blank"</span>&gt;</span>点击进入修仙世界<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>点击后，自动发送 get 请求，接下来和自动发 GET 请求部分同理。</p><p>这就是CSRF攻击的原理。和XSS攻击对比，CSRF 攻击并不需要将恶意代码注入用户当前页面的html文档中，而是跳转到新的页面，利用服务器的验证漏洞和用户之前的登录状态来模拟用户进行操作。</p><h4 id="防范措施-1"><a href="#防范措施-1" class="headerlink" title="防范措施"></a>防范措施</h4><h5 id="利用Cookie的SameSite属性"><a href="#利用Cookie的SameSite属性" class="headerlink" title="利用Cookie的SameSite属性"></a>利用Cookie的SameSite属性</h5><p>CSRF攻击中重要的一环就是自动发送目标站点下的 Cookie,然后就是这一份 Cookie 模拟了用户的身份。因此在Cookie上面下文章是防范的不二之选。</p><p>恰好，在 Cookie 当中有一个关键的字段，可以对请求中 Cookie 的携带作一些限制，这个字段就是SameSite。</p><p>SameSite可以设置为三个值，Strict、Lax和None。</p><ul><li><p>在Strict模式下，浏览器完全禁止第三方请求携带Cookie。比如请求baidu.com网站只能在baidu.com域名当中请求才能携带 Cookie，在其他网站请求都不能。</p></li><li><p>在Lax模式，就宽松一点了，但是只能在 get 方法提交表单况或者a 标签发送 get 请求的情况下可以携带 Cookie，其他情况均不能。</p></li><li><p>在None模式下，也就是默认模式，请求会自动携带上 Cookie。</p></li></ul><h5 id="验证来源站点"><a href="#验证来源站点" class="headerlink" title="验证来源站点"></a>验证来源站点</h5><p>这就需要要用到请求头中的两个字段: Origin和Referer。</p><p>其中，Origin只包含域名信息，而Referer包含了具体的 URL 路径。</p><p>当然，这两者都是可以伪造的，通过 Ajax 中自定义请求头即可，安全性略差。</p><h5 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h5><p>Django作为 Python 的一门后端框架，用它开发过的同学就知道，在它的模板(template)中, 开发表单时，经常会附上这样一行代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></p><p>这就是CSRF Token的典型应用。那它的原理是怎样的呢？</p><p>首先，浏览器向服务器发送请求时，服务器生成一个字符串，将其植入到返回的页面中。</p><p>然后浏览器如果要发送请求，就必须带上这个字符串，然后服务器来验证是否合法，如果不合法则不予响应。这个字符串也就是CSRF Token，通常第三方站点无法拿到这个 token, 因此也就是被服务器给拒绝</p><h3 id="HTTPS为什么让数据传输更安全？"><a href="#HTTPS为什么让数据传输更安全？" class="headerlink" title="HTTPS为什么让数据传输更安全？"></a>HTTPS为什么让数据传输更安全？</h3><p>谈到HTTPS, 就不得不谈到与之相对的HTTP。HTTP的特性是明文传输，因此在传输的每一个环节，数据都有可能被第三方窃取或者篡改，具体来说，HTTP 数据经过 TCP 层，然后经过WIFI路由器、运营商和目标服务器，这些环节中都可能被中间人拿到数据并进行篡改，也就是我们常说的中间人攻击。</p><p>为了防范这样一类攻击，我们不得已要引入新的加密方案，即 HTTPS。</p><p>HTTPS并不是一个新的协议, 而是一个加强版的HTTP。其原理是在HTTP和TCP之间建立了一个中间层，当HTTP和TCP通信时并不是像以前那样直接通信，直接经过了一个中间层进行加密，将加密后的数据包传给TCP, 响应的，TCP必须将数据包解密，才能传给上面的HTTP。这个中间层也叫安全层。安全层的核心就是对数据加解密。</p><p>接下来我们就来剖析一下HTTPS的加解密是如何实现的。</p><h4 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>首先需要理解对称加密和非对称加密的概念，然后讨论两者应用后的效果如何。</p><p>对称加密是最简单的方式，指的是加密和解密用的是同样的密钥。</p><p>而对于非对称加密，如果有 A、 B 两把密钥，如果用 A 加密过的数据包只能用 B 解密，反之，如果用 B 加密过的数据包只能用 A 解密。</p><h5 id="加解密过程"><a href="#加解密过程" class="headerlink" title="加解密过程"></a>加解密过程</h5><p>接着我们来谈谈浏览器和服务器进行协商加解密的过程。</p><p>首先，浏览器会给服务器发送一个随机数client_random 和一个加密的方法列表。</p><p>服务器接收后给浏览器返回另一个随机数server_random和加密方法。</p><p>现在，两者拥有三样相同的凭证: client_random、server_random和加密方法。</p><p>接着用这个加密方法将两个随机数混合起来生成密钥，这个密钥就是浏览器和服务端通信的暗号。</p><h5 id="加解密过程-1"><a href="#加解密过程-1" class="headerlink" title="加解密过程"></a>加解密过程</h5><p>接着我们来谈谈浏览器和服务器进行协商加解密的过程。</p><p>首先，浏览器会给服务器发送一个随机数client_random 和一个加密的方法列表。</p><p>服务器接收后给浏览器返回另一个随机数server_random和加密方法。</p><p>现在，两者拥有三样相同的凭证: client_random、server_random和加密方法。</p><p>接着用这个加密方法将两个随机数混合起来生成密钥，这个密钥就是浏览器和服务端通信的暗号。</p><h5 id="各自应用的效果"><a href="#各自应用的效果" class="headerlink" title="各自应用的效果"></a>各自应用的效果</h5><p>如果用对称加密的方式，那么第三方可以在中间获取到client_random、server_random和加密方法，由于这个加密方法同时可以解密，所以中间人可以成功对暗号进行解密，拿到数据，很容易就将这种加密方式破解了。</p><p>那能不能只用非对称加密呢？理论上是可以的，但实际上非对称加密需要的计算量非常大，对于稍微大一点的数据即使用最快的处理器也非常耗时。后面有机会给大家分享一下 RSA 非对称加密算法的原理，大家就会有更加直观的认识，这里我们先不深究</p><h5 id="对称加密和非对称加密的结合"><a href="#对称加密和非对称加密的结合" class="headerlink" title="对称加密和非对称加密的结合"></a>对称加密和非对称加密的结合</h5><p>可以发现，对称加密和非对称加密，只用前者会有安全隐患，只用后者性能消耗又太大。那我们能不能把两者结合，保证性能的同时又能保证安全呢？</p><p>其实是可以的，演示一下整个流程：</p><ul><li>浏览器向服务器发送client_random和加密方法列表。</li><li>服务器接收到，返回server_random、加密方法以及公钥。</li><li>浏览器接收，接着生成另一个随机数pre_random, 并且用公钥加密，传给服务器。(敲黑板！重点操作！)</li><li>服务器用公钥解密这个被加密后的pre_random。</li><li>现在浏览器和服务器有三样相同的凭证:client_random、server_random和pre_random。然后两者用相同的加密方法混合这三个随机数，生成最终的密钥。</li></ul><p>然后浏览器和服务器尽管用一样的密钥进行通信，即使用对称加密。</p><p>这个最终的密钥是很难被中间人拿到的，为什么呢? 因为中间人没有私钥，从而拿不到pre_random，也就无法生成最终的密钥了。</p><p>回头比较一下和单纯的使用非对称加密, 这种方式做了什么改进呢？本质上是防止了私钥加密的数据外传。单独使用非对称加密，最大的漏洞在于服务器传数据给浏览器只能用私钥加密，这是危险产生的根源。利用对称和非对称加密结合的方式，就防止了这一点，从而保证了安全。</p><h4 id="添加数字证书"><a href="#添加数字证书" class="headerlink" title="添加数字证书"></a>添加数字证书</h4><p>尽管通过两者加密方式的结合，能够很好地实现加密传输，但实际上还是存在一些问题。黑客如果采用 DNS 劫持，将目标地址替换成黑客服务器的地址，然后黑客自己造一份公钥和私钥，照样能进行数据传输。而对于浏览器用户而言，他是不知道自己正在访问一个危险的服务器的。</p><p>事实上HTTPS在上述结合对称和非对称加密的基础上，又添加了数字证书认证的步骤。其目的就是让服务器证明自己的身份。</p><h4 id="传输过程"><a href="#传输过程" class="headerlink" title="传输过程"></a>传输过程</h4><p>为了获取这个证书，服务器运营者需要向第三方认证机构获取授权，这个第三方机构也叫CA(Certificate Authority), 认证通过后 CA 会给服务器颁发数字证书。</p><p>这个数字证书有两个作用:</p><ul><li>服务器向浏览器证明自己的身份。</li><li>把公钥传给浏览器。<br>这个验证的过程发生在什么时候呢？</li></ul><p>当服务器传送server_random、加密方法的时候，顺便会带上数字证书(包含了公钥), 接着浏览器接收之后就会开始验证数字证书。如果验证通过，那么后面的过程照常进行，否则拒绝执行。</p><p>现在我们来梳理一下HTTPS最终的加解密过程:<br><img src="/img/https.jpg" class="[class names]" title="[width] [height] [title text [alt text]]"></p><h4 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h4><p>浏览器拿到数字证书后，如何来对证书进行认证呢？</p><p>首先，会读取证书中的明文内容。CA 进行数字证书的签名时会保存一个 Hash 函数，来这个函数来计算明文内容得到信息A，然后用公钥解密明文内容得到信息B，两份信息做比对，一致则表示认证合法。</p><p>当然有时候对于浏览器而言，它不知道哪些 CA 是值得信任的，因此会继续查找 CA 的上级 CA，以同样的信息比对方式验证上级 CA 的合法性。一般根级的 CA 会内置在操作系统当中，当然如果向上找没有找到根级的 CA，那么将被视为不合法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之渲染篇</title>
      <link href="/2020/05/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E6%B8%B2%E6%9F%93%E7%AF%87/"/>
      <url>/2020/05/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8B%E6%B8%B2%E6%9F%93%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="说一说从输入URL到页面呈现发生了什么？——网络篇"><a href="#说一说从输入URL到页面呈现发生了什么？——网络篇" class="headerlink" title="说一说从输入URL到页面呈现发生了什么？——网络篇"></a>说一说从输入URL到页面呈现发生了什么？——网络篇</h3><h4 id="构建请求"><a href="#构建请求" class="headerlink" title="构建请求"></a>构建请求</h4><p>浏览器会构建请求行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求方法是GET，路径为根路径，HTTP协议版本为1.1,可用谷歌调试工具 查看 Response Headers .</span></span><br><span class="line">GET / HTTP/<span class="number">1.1</span></span><br></pre></td></tr></table></figure><h4 id="查找强缓存"><a href="#查找强缓存" class="headerlink" title="查找强缓存"></a>查找强缓存</h4><p>// 强缓存 是什么?<br>首先我们来总体感知一下它的匹配流程，如下： 1. 浏览器发送请求前，根据请求头的expires和cache-control判断是否命中（包括是否过期）强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，则进入下一步。 2. 没有命中强缓存规则，浏览器会发送请求，根据请求头的last-modified和etag判断是否命中协商缓存，如果命中，直接从缓存获取资源。如果没有命中，则进入下一步。 3. 如果前两步都没有命中，则直接从服务端获取资源。</p><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><p>由于我们输入的是域名，而数据包是通过IP地址传给对方的。因此我们需要得到域名对应的IP地址。这个过程需要依赖一个服务系统，这个系统将域名和 IP 一一映射，我们将这个系统就叫做DNS（域名系统）。得到具体 IP 的过程就是DNS解析。</p><p>当然，值得注意的是，浏览器提供了DNS数据缓存功能。即如果一个域名已经解析过，那会把解析的结果缓存下来，下次处理直接走缓存，不需要经过 DNS解析。</p><p>另外，如果不指定端口的话，默认采用对应的 IP 的 80 端口。</p><h4 id="建立-TCP-连接"><a href="#建立-TCP-连接" class="headerlink" title="建立 TCP 连接"></a>建立 TCP 连接</h4><p>这里要提醒一点，Chrome 在同一个域名下要求同时最多只能有 6 个 TCP 连接，超过 6 个的话剩下的请求就得等待。</p><p>假设现在不需要等待，我们进入了 TCP 连接的建立阶段。首先解释一下什么是 TCP:</p><blockquote><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></blockquote><p>建立 TCP连接经历了下面三个阶段:</p><ul><li>通过三次握手(即总共发送3个数据包确认已经建立连接)建立客户端和服务器之间的连接。</li><li>进行数据传输。这里有一个重要的机制，就是接收方接收到数据包后必须要向发送方确认, 如果发送方没有接到这个确认的消息，就判定为数据包丢失，并重新发送该数据包。当然，发送的过程中还有一个优化策略，就是把大的数据包拆成一个个小包，依次传输到接收方，接收方按照这个小包的顺序把它们组装成完整数据包。</li><li>断开连接的阶段。数据传输完成，现在要断开连接了，通过四次挥手来断开连接。</li></ul><p>TCP 连接通过什么手段来保证数据传输的可靠性，一是三次握手确认连接，二是数据包校验保证数据到达接收方，三是通过四次挥手断开连接。</p><h4 id="发送-HTTP-请求"><a href="#发送-HTTP-请求" class="headerlink" title="发送 HTTP 请求"></a>发送 HTTP 请求</h4><p>现在TCP连接建立完毕，浏览器可以和服务器开始通信，即开始发送 HTTP 请求。浏览器发 HTTP 请求要携带三样东西:请求行、请求头和请求体。</p><p>首先，浏览器会向服务器发送请求行,关于请求行，结构很简单，由请求方法、请求URI和HTTP版本协议组成,同时也要带上请求头，比如我们之前说的Cache-Control、If-Modified-Since、If-None-Match都由可能被放入请求头中作为缓存的标识信息。当然了还有一些其他的属性，列举如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: /* 省略cookie信息 */</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1</span><br></pre></td></tr></table></figure></p><p>最后是请求体，请求体只有在POST方法下存在，常见的场景是表单提交。</p><h4 id="网络响应"><a href="#网络响应" class="headerlink" title="网络响应"></a>网络响应</h4><p>HTTP 请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。</p><p>跟请求部分类似，网络响应具有三个部分:响应行、响应头和响应体, 由HTTP协议版本、状态码和状态描述组成。</p><p>响应头包含了服务器及其返回数据的一些信息, 服务器生成数据的时间、返回的数据类型以及对即将写入的Cookie信息。</p><p>举例如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html;charset=utf-8</span><br><span class="line">Date: Wed, 04 Dec 2019 12:29:13 GMT</span><br><span class="line">Server: apache</span><br><span class="line">Set-Cookie: rsv_i=f9a0SIItKqzv7kqgAAgphbGyRts3RwTg%2FLyU3Y5Eh5LwyfOOrAsvdezbay0QqkDqFZ0DfQXby4wXKT8Au8O7ZT9UuMsBq2k; path=/; domain=.baidu.com</span><br></pre></td></tr></table></figure></p><p>响应完成之后怎么办？TCP 连接就断开了吗？</p><p>不一定。这时候要判断Connection字段, 如果请求头或响应头中包含Connection: Keep-Alive，表示建立了持久连接，这样TCP连接会一直保持，之后请求统一站点的资源会复用这个连接。</p><p>否则断开TCP连接, 请求-响应流程结束。</p><p>流程图如下:<br><img src="/img/http.jpg" class="[class names]" title="[width] [height] [title text [alt text]]"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之JS数组篇</title>
      <link href="/2020/02/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BJS%E6%95%B0%E7%BB%84%E7%AF%87/"/>
      <url>/2020/02/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BJS%E6%95%B0%E7%BB%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="JS数组的高阶函数之基础篇"><a href="#JS数组的高阶函数之基础篇" class="headerlink" title="JS数组的高阶函数之基础篇"></a>JS数组的高阶函数之基础篇</h3><h4 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h4><p>概念非常简单，如下:</p><blockquote><p>一个函数就可以接收另一个函数作为参数或者返回值为一个函数，这种函数就称之为高阶函数。</p></blockquote><h4 id="数组中的高阶函数"><a href="#数组中的高阶函数" class="headerlink" title="数组中的高阶函数"></a>数组中的高阶函数</h4><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ul><li>参数:接受两个参数，一个是回调函数，一个是回调函数的this值(可选)。<br>其中，回调函数被默认传入三个值，依次为当前元素、当前索引、整个数组。</li><li>创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果</li><li>对原来的数组没有影响</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">val</span>: <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> newNums = nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item + index + array[index] + <span class="keyword">this</span>.val; </span><br><span class="line">  <span class="comment">//对第一个元素，1 + 0 + 1 + 5 = 7</span></span><br><span class="line">  <span class="comment">//对第二个元素，2 + 1 + 2 + 5 = 10</span></span><br><span class="line">  <span class="comment">//对第三个元素，3 + 2 + 3 + 5 = 13</span></span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(newNums);<span class="comment">//[7, 10, 13]</span></span><br></pre></td></tr></table></figure><p>当然，后面的参数都是可选的 ，不用的话可以省略。</p><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><ul><li>参数: 接收两个参数，一个为回调函数，另一个为初始值。回调函数中三个默认参数，依次为积累值、当前值、整个数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 多个数的加和</span></span><br><span class="line"><span class="keyword">let</span> newNums = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preSum,curVal,array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preSum + curVal; </span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newNums);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>不传默认值会怎样？<br>不传默认值会自动以第一个元素为初始值，然后从第二个元素开始依次累计。</p><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>参数: 一个函数参数。这个函数接受一个默认参数，就是当前元素。这个作为参数的函数返回值为一个布尔类型，决定元素是否保留。</p><p>filter方法返回值为一个新的数组，这个数组里面包含参数里面所有被保留的项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 保留奇数项</span></span><br><span class="line"><span class="keyword">let</span> oddNums = nums.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oddNums) <span class="comment">// [1, 3];</span></span><br></pre></td></tr></table></figure><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>参数: 一个用于比较的函数，它有两个默认参数，分别是代表比较的两个元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let nums = [2, 3, 1];</span><br><span class="line">//两个比较的元素分别为a, b</span><br><span class="line">nums.sort(function(a, b) &#123;</span><br><span class="line">  if(a &gt; b) return 1;</span><br><span class="line">  else if(a <span class="tag">&lt; <span class="attr">b</span>) <span class="attr">return</span> <span class="attr">-1</span>;</span></span><br><span class="line"><span class="tag">  <span class="attr">else</span> <span class="attr">if</span>(<span class="attr">a</span> == <span class="string">b)</span> <span class="attr">return</span> <span class="attr">0</span>;</span></span><br><span class="line"><span class="tag">&#125;)</span></span><br></pre></td></tr></table></figure><p>当比较函数返回值大于0，则 a 在 b 的后面，即a的下标应该比b大。</p><p>反之，则 a 在 b 的后面，即 a 的下标比 b 小。</p><p>整个过程就完成了一次升序的排列。</p><p>当然还有一个需要注意的情况，就是比较函数不传的时候，是如何进行排序的？</p><blockquote><p>答案是将数字转换为字符串，然后根据字母unicode值进行升序排序，也就是根据字符串的比较规则进行升序排序。</p></blockquote><h3 id="函数的arguments为什么不是数组？如何转化成数组？"><a href="#函数的arguments为什么不是数组？如何转化成数组？" class="headerlink" title="函数的arguments为什么不是数组？如何转化成数组？"></a>函数的arguments为什么不是数组？如何转化成数组？</h3><p>因为argument是一个对象，只不过它的属性从0开始排，依次为0，1，2…最后还有callee和length属性。我们也把这样的对象称为类数组。</p><p>常见的类数组还有：</p><ul><li>用getElementByTagName/ClassName/Name（）获得的HTMLCollection.</li><li>用querySlector获得的nodeList<br>那这导致很多数组的方法就不能用了，必要时需要我们将它们转换成数组，有哪些方法呢？</li></ul><h4 id="Array-prototype-slice-call"><a href="#Array-prototype-slice-call" class="headerlink" title="Array.prototype.slice.call()"></a>Array.prototype.slice.call()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(args.reduce(<span class="function">(<span class="params">sum, cur</span>) =&gt;</span> sum + cur));<span class="comment">//args可以调用数组原生的方法啦</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(args.reduce(<span class="function">(<span class="params">sum, cur</span>) =&gt;</span> sum + cur));<span class="comment">//args可以调用数组原生的方法啦</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>这种方法也可以用来转换Set和Map哦！</p><h4 id="ES6展开运算符"><a href="#ES6展开运算符" class="headerlink" title="ES6展开运算符"></a>ES6展开运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments];</span><br><span class="line">  <span class="built_in">console</span>.log(args.reduce(<span class="function">(<span class="params">sum, cur</span>) =&gt;</span> sum + cur));<span class="comment">//args可以调用数组原生的方法啦</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="利用concat-apply"><a href="#利用concat-apply" class="headerlink" title="利用concat+apply"></a>利用concat+apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.concat.apply([], <span class="built_in">arguments</span>);<span class="comment">//apply方法会把第二个参数展开</span></span><br><span class="line">  <span class="built_in">console</span>.log(args.reduce(<span class="function">(<span class="params">sum, cur</span>) =&gt;</span> sum + cur));<span class="comment">//args可以调用数组原生的方法啦</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>当然，最原始的方法就是再创建一个数组，用for循环把类数组的每个属性值放在里面，过于简单，就不浪费篇幅了。</p><h3 id="forEach中return有效果吗？如何中断forEach循环？"><a href="#forEach中return有效果吗？如何中断forEach循环？" class="headerlink" title="forEach中return有效果吗？如何中断forEach循环？"></a>forEach中return有效果吗？如何中断forEach循环？</h3><p>在forEach中用return不会返回，函数会继续执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">nums.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>;<span class="comment">//无效</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>中断方法：</p><ul><li><p>使用try监视代码块，在需要中断的地方抛出异常。</p></li><li><p>官方推荐方法（替换方法）：用every和some替代forEach函数。every在碰到return false的时候，中止循环。some在碰到return ture的时候，中止循环.</p></li></ul><h3 id="JS判断数组中是否包含某个值"><a href="#JS判断数组中是否包含某个值" class="headerlink" title="JS判断数组中是否包含某个值"></a>JS判断数组中是否包含某个值</h3><h4 id="方法一：array-indexOf"><a href="#方法一：array-indexOf" class="headerlink" title="方法一：array.indexOf"></a>方法一：array.indexOf</h4><blockquote><p>此方法判断数组中是否存在某个值，如果存在，则返回数组元素的下标，否则返回-1。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> index=arr.indexOf(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index);</span><br></pre></td></tr></table></figure><h4 id="方法二：array-includes-searcElement-fromIndex"><a href="#方法二：array-includes-searcElement-fromIndex" class="headerlink" title="方法二：array.includes(searcElement[,fromIndex])"></a>方法二：array.includes(searcElement[,fromIndex])</h4><blockquote><p>此方法判断数组中是否存在某个值，如果存在返回true，否则返回false</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span>(arr.includes(<span class="number">3</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"存在"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"不存在"</span>);</span><br></pre></td></tr></table></figure><h4 id="方法三：array-find-callback-thisArg"><a href="#方法三：array-find-callback-thisArg" class="headerlink" title="方法三：array.find(callback[,thisArg])"></a>方法三：array.find(callback[,thisArg])</h4><blockquote><p>返回数组中满足条件的第一个元素的值，如果没有，返回undefined<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.find(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="方法四：array-findeIndex-callback-thisArg"><a href="#方法四：array-findeIndex-callback-thisArg" class="headerlink" title="方法四：array.findeIndex(callback[,thisArg])"></a>方法四：array.findeIndex(callback[,thisArg])</h4><blockquote><p>返回数组中满足条件的第一个元素的下标，如果没有找到，返回-1]<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></p></blockquote><p>当然，for循环当然是没有问题的，这里讨论的是数组方法，就不再展开了。</p><h3 id="JS中flat—数组扁平化"><a href="#JS中flat—数组扁平化" class="headerlink" title="JS中flat—数组扁平化"></a>JS中flat—数组扁平化</h3><p>对于前端项目开发过程中，偶尔会出现层叠数据结构的数组，我们需要将多层级数组转化为一级数组（即提取嵌套数组元素最终合并为一个数组），使其内容合并且展开。那么该如何去实现呢？</p><p>需求:多维数组=&gt;一维数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]], <span class="number">6</span>];<span class="comment">// -&gt; [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(ary);</span><br></pre></td></tr></table></figure></p><h4 id="调用ES6中的flat方法"><a href="#调用ES6中的flat方法" class="headerlink" title="调用ES6中的flat方法"></a>调用ES6中的flat方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ary = arr.flat(<span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure><h4 id="replace-split"><a href="#replace-split" class="headerlink" title="replace + split"></a>replace + split</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ary = str.replace(<span class="regexp">/(\[|\])/g</span>, <span class="string">''</span>).split(<span class="string">','</span>)</span><br></pre></td></tr></table></figure><h4 id="replace-JSON-parse"><a href="#replace-JSON-parse" class="headerlink" title="replace + JSON.parse"></a>replace + JSON.parse</h4><p>str = str.replace(/([|])/g, ‘’);<br>str = ‘[‘ + str + ‘]’;<br>ary = JSON.parse(str);</p><h4 id="普通递归"><a href="#普通递归" class="headerlink" title="普通递归"></a>普通递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">ary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = ary[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(ary[i]))&#123;</span><br><span class="line">      fn(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用reduce函数迭代"><a href="#利用reduce函数迭代" class="headerlink" title="利用reduce函数迭代"></a>利用reduce函数迭代</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">ary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ary.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre.concat(<span class="built_in">Array</span>.isArray(cur) ? flatten(cur) : cur);</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]]]</span><br><span class="line"><span class="built_in">console</span>.log(flatten(ary))</span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要有一个元素有数组，那么循环继续</span></span><br><span class="line"><span class="keyword">while</span> (ary.some(<span class="built_in">Array</span>.isArray())) &#123;</span><br><span class="line">  ary = [].concat(...ary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之JS基础篇</title>
      <link href="/2020/02/08/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BJS%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2020/02/08/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BJS%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h3><h4 id="JS原始数据类型有哪些？引用数据类型有哪些？"><a href="#JS原始数据类型有哪些？引用数据类型有哪些？" class="headerlink" title="JS原始数据类型有哪些？引用数据类型有哪些？"></a>JS原始数据类型有哪些？引用数据类型有哪些？</h4><p>在 JS 中，存在着 6 种原始值，分别是：</p><ul><li>boolean</li><li>null</li><li>undefined</li><li>number</li><li>string</li><li>symbol</li></ul><p>引用数据类型: 对象Object（包含普通对象-Object，数组对象-Array，正则对象-RegExp，日期对象-Date，数学函数-Math，函数对象-Function）</p><h4 id="说出下面运行的结果，解释原因。"><a href="#说出下面运行的结果，解释原因。" class="headerlink" title="说出下面运行的结果，解释原因。"></a>说出下面运行的结果，解释原因。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.age = <span class="number">26</span></span><br><span class="line">  person = &#123;</span><br><span class="line">    name: <span class="string">'hzj'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = &#123;</span><br><span class="line">  name: <span class="string">'fyq'</span>,</span><br><span class="line">  age: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = test(p1)</span><br><span class="line"><span class="built_in">console</span>.log(p1) <span class="comment">// -&gt; ?</span></span><br><span class="line"><span class="built_in">console</span>.log(p2) <span class="comment">// -&gt; ?</span></span><br></pre></td></tr></table></figure><p>结果:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1：&#123;<span class="attr">name</span>: “fyq”, <span class="attr">age</span>: <span class="number">26</span>&#125;</span><br><span class="line">p2：&#123;<span class="attr">name</span>: “hzj”, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>原因: 在函数传参的时候传递的是对象在堆中的内存地址值，test函数中的实参person是p1对象的内存地址，相当于传引用. 所以通过调用person.age = 26 改变了p1的值，但随后person变成了另一块内存空间的地址，并且在最后将这另外一份内存空间的地址返回，赋给了p2。</p></blockquote><h4 id="null究竟是不是对象"><a href="#null究竟是不是对象" class="headerlink" title="null究竟是不是对象?"></a>null究竟是不是对象?</h4><p>null 不是对象,虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object。为了避免这种问题，我们可以通过 Object.prototype.toString.call(xx)进行判断类型。</p><h4 id="‘1’-toString-为什么可以调用？"><a href="#‘1’-toString-为什么可以调用？" class="headerlink" title="‘1’.toString()为什么可以调用？"></a>‘1’.toString()为什么可以调用？</h4><p>其实在这个语句运行的过程中做了这样几件事情：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'1'</span>);</span><br><span class="line">s.toString();</span><br><span class="line">s = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>第一步: 创建String类实例。</p><p>第二步: 调用实例方法。</p><p>第三步: 执行完方法立即销毁这个实例。</p><p>整个过程体现了基本包装类型的性质，而基本包装类型恰恰属于基本数据类型，包括Boolean, Number和String。</p><h4 id="0-1-0-2为什么不等于0-3？"><a href="#0-1-0-2为什么不等于0-3？" class="headerlink" title="0.1+0.2为什么不等于0.3？"></a>0.1+0.2为什么不等于0.3？</h4><p>0.1和0.2在转换成二进制后会无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度的损失，相加后因浮点数小数位的限制而截断的二进制数字在转换为十进制就会变成0.30000000000000004。</p><h3 id="数据类型如何检测"><a href="#数据类型如何检测" class="headerlink" title="数据类型如何检测"></a>数据类型如何检测</h3><h4 id="typeof-方法判断类型"><a href="#typeof-方法判断类型" class="headerlink" title="typeof 方法判断类型"></a>typeof 方法判断类型</h4><p>对于原始类型来说，除了 null 都可以调用typeof显示正确的类型。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'1'</span> <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() <span class="comment">// 'symbol'</span></span><br></pre></td></tr></table></figure></p><p>但对于引用数据类型，除了函数之外，都会显示”object”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof [] // 'object'</span><br><span class="line">typeof &#123;&#125; // 'object'</span><br><span class="line">typeof console.log // 'function'</span><br></pre></td></tr></table></figure><p>因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1 <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'hello world'</span></span><br><span class="line">str1 <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>)</span><br><span class="line">str2 <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="能不能手动实现一下instanceof的功能"><a href="#能不能手动实现一下instanceof的功能" class="headerlink" title="能不能手动实现一下instanceof的功能"></a>能不能手动实现一下instanceof的功能</h4><p>能, 从原型链查找 是否匹配 ,代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//基本数据类型直接返回false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">'object'</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象</span></span><br><span class="line">    <span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//查找到尽头，还没找到</span></span><br><span class="line">        <span class="keyword">if</span>(proto == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//找到相同的原型对象</span></span><br><span class="line">        <span class="keyword">if</span>(proto == right.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        proto = <span class="built_in">Object</span>.getPrototypeof(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="string">"111"</span>, <span class="built_in">String</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"111"</span>), <span class="built_in">String</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h4 id="Object-is和-的区别"><a href="#Object-is和-的区别" class="headerlink" title="Object.is和===的区别"></a>Object.is和===的区别</h4><p>目前发现的 是 Object 相较于 === 严格一些, 修正了一些特殊情况下的失误. 目前发现有 +0和-0，NaN和NaN。</p><p>源码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// SameValue algorithm</span></span><br><span class="line">   <span class="keyword">if</span> (x === y) &#123; <span class="comment">// Steps 1-5, 7-10</span></span><br><span class="line">     <span class="comment">// Steps 6.b-6.e: +0 != -0</span></span><br><span class="line">     <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// Step 6.a: NaN == NaN</span></span><br><span class="line">     <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><h3 id="JS数据类型之隐式转换"><a href="#JS数据类型之隐式转换" class="headerlink" title="JS数据类型之隐式转换"></a>JS数据类型之隐式转换</h3><h4 id="发生了一些什么"><a href="#发生了一些什么" class="headerlink" title="[] == ![] 发生了一些什么?"></a>[] == ![] 发生了一些什么?</h4><p>首先 == 运算符，会将左右两边都需要转换为数字然后进行比较。</p><p>[]转换为数字为0。<br>![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true, 因此![]为false，进而在转换成数字，变为0。</p><p>0 == 0 ， 结果为true</p><h4 id="JS中类型转换有哪几种？"><a href="#JS中类型转换有哪几种？" class="headerlink" title="JS中类型转换有哪几种？"></a>JS中类型转换有哪几种？</h4><p>JS中，类型转换只有三种：</p><ul><li>转换成数字</li><li>转换成布尔值</li><li>转换成字符串<br>转换具体规则如下:</li></ul><img src="/img/translation_table.jpg" class="[class names]" title="[width] [height] [title text [alt text]]"><h4 id="和-有什么区别？"><a href="#和-有什么区别？" class="headerlink" title="== 和 ===有什么区别？"></a>== 和 ===有什么区别？</h4><p>===叫做严格相等，是指：左右两边不仅值要相等，类型也要相等，例如’1’===1的结果是false，因为一边是string，另一边是number。</p><p>==不像===那样严格，对于一般情况，只要值相等，就返回true，但==还涉及一些类型转换，它的转换规则如下：</p><ul><li>两边的类型是否相同，相同的话就比较值的大小，例如1==2，返回false</li><li>判断的是否是null和undefined，是的话就返回true</li><li>判断的类型是否是String和Number，是的话，把String类型转换成Number，再进行比较</li><li>判断其中一方是否是Boolean，是的话就把Boolean转换成Number，再进行比较</li><li>如果其中一方为Object，且另一方为String、Number或者Symbol，会将Object转换成字符串，再进行比较</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125; == <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125; == <span class="string">"[object Object]"</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="对象转原始类型是根据什么流程运行的？"><a href="#对象转原始类型是根据什么流程运行的？" class="headerlink" title="对象转原始类型是根据什么流程运行的？"></a>对象转原始类型是根据什么流程运行的？</h4><p>对象转原始类型，会调用内置的[ToPrimitive]函数，对于该函数而言，其逻辑如下：</p><ul><li>如果Symbol.toPrimitive()方法，优先调用再返回</li><li>调用valueOf()，如果转换为原始类型，则返回</li><li>调用toString()，如果转换为原始类型，则返回</li><li>如果都没有返回原始类型，会报错</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  value: 3,</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    return 4;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return '5'</span><br><span class="line">  &#125;,</span><br><span class="line">  [Symbol.toPrimitive]() &#123;</span><br><span class="line">    return 6</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj + 1); // 输出7</span><br></pre></td></tr></table></figure><h4 id="如何让if-a-1-amp-amp-a-2-条件成立？"><a href="#如何让if-a-1-amp-amp-a-2-条件成立？" class="headerlink" title="如何让if(a == 1 &amp;&amp; a == 2)条件成立？"></a>如何让if(a == 1 &amp;&amp; a == 2)条件成立？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;</span><br><span class="line">  value: 0,</span><br><span class="line">  valueOf: function() &#123;</span><br><span class="line">    this.value++;</span><br><span class="line">    return this.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(a == 1 &amp;&amp; a == 2);//true</span><br></pre></td></tr></table></figure><p>可以发现 可以用上题 中的特性来解题</p><h3 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>闭包是指有权访问另外一个函数作用域中的变量的函数，创建闭包的常见方式,就是在一个函数内部创建另一个函数.且由于闭包会携带包含它的函数的作用域,过度使用会导致占用更多的内存.因此需谨慎使用闭包.</p></blockquote><h4 id="闭包的本质"><a href="#闭包的本质" class="headerlink" title="闭包的本质"></a>闭包的本质</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function f1() &#123;</span><br><span class="line">  var a = 2</span><br><span class="line">  function f2() &#123;</span><br><span class="line">    var a = 3;</span><br><span class="line">    console.log(a);//3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，f1的作用域指向有全局作用域(window)和它本身，而f2的作用域指向全局作用域(window)、f1和它本身。而且作用域是从最底层向上找，直到找到全局作用域window为止，如果全局还没有的话就会报错。就这么简单一件事情！<br>闭包产生的本质就是，当前环境中存在指向父级作用域的引用。还是举上面的例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function f1() &#123;</span><br><span class="line">  var a = 2</span><br><span class="line">  function f2() &#123;</span><br><span class="line">    console.log(a);//2</span><br><span class="line">  &#125;</span><br><span class="line">  return f2;</span><br><span class="line">&#125;</span><br><span class="line">var x = f1();</span><br><span class="line">x();</span><br></pre></td></tr></table></figure><p>这里x会拿到父级作用域中的变量，输出2。因为在当前环境中，含有对f2的引用，f2恰恰引用了window、f1和f2的作用域。因此f2可以访问到f1的作用域的变量。</p><p>那是不是只有返回函数才算是产生了闭包呢？、</p><p>回到闭包的本质，我们只需要让父级作用域的引用存在即可，因此我们还可以这么做：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var f3;</span><br><span class="line">function f1() &#123;</span><br><span class="line">  var a = 2</span><br><span class="line">  f3 = function() &#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line">f3();</span><br></pre></td></tr></table></figure></p><p>让f1执行，给f3赋值后，等于说现在f3拥有了window、f1和f3本身这几个作用域的访问权限，还是自底向上查找，最近是在f1中找到了a,因此输出2。</p><p>在这里是外面的变量f3存在着父级作用域的引用，因此产生了闭包，形式变了，本质没有改变。</p><h4 id="闭包的运用"><a href="#闭包的运用" class="headerlink" title="闭包的运用"></a>闭包的运用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 1; i <span class="tag">&lt;<span class="name">=</span> <span class="attr">5</span>; <span class="attr">i</span> ++)&#123;</span></span><br><span class="line"><span class="tag">  <span class="attr">setTimeout</span>(<span class="attr">function</span> <span class="attr">timer</span>()&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">console.log</span>(<span class="attr">i</span>)</span></span><br><span class="line"><span class="tag">  &#125;, <span class="attr">0</span>)</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure><p>这是一道很经典的 Es5 运用闭包 保存变量,当然 Es6 中针对这一点出现了革命性的变化 ,let 标签,让JS有函数作用域变为了块级作用域，用let后作用域链不复存在。 代码的作用域以块级为单位。代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 1; i <span class="tag">&lt;<span class="name">=</span> <span class="attr">5</span>; <span class="attr">i</span>++)&#123;</span></span><br><span class="line"><span class="tag">  <span class="attr">setTimeout</span>(<span class="attr">function</span> <span class="attr">timer</span>()&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">console.log</span>(<span class="attr">i</span>)</span></span><br><span class="line"><span class="tag">  &#125;,<span class="attr">0</span>)</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="js原型链"><a href="#js原型链" class="headerlink" title="js原型链"></a>js原型链</h3><h4 id="原型对象和构造函数是什么"><a href="#原型对象和构造函数是什么" class="headerlink" title="原型对象和构造函数是什么?"></a>原型对象和构造函数是什么?</h4><p>在JavaScript中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个prototype属性，这个属性指向函数的原型对象。</p><p>当函数经过new调用时，这个函数就成为了构造函数，返回一个全新的实例对象，这个实例对象有一个<strong>proto</strong>属性，指向构造函数的原型对象。</p><h4 id="原型链-是什么"><a href="#原型链-是什么" class="headerlink" title="原型链 是什么?"></a>原型链 是什么?</h4><p>JavaScript对象通过prototype指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条, 即原型链。</p><ul><li>对象的 hasOwnProperty() 来检查对象自身中是否含有该属性</li><li>使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true</li></ul><h3 id="js-继承"><a href="#js-继承" class="headerlink" title="js 继承"></a>js 继承</h3><h4 id="第一种-借助call"><a href="#第一种-借助call" class="headerlink" title="第一种: 借助call"></a>第一种: 借助call</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Parent1()&#123;</span><br><span class="line">   this.name = 'parent1';</span><br><span class="line"> &#125;</span><br><span class="line"> function Child1()&#123;</span><br><span class="line">   Parent1.call(this);</span><br><span class="line">   this.type = 'child1'</span><br><span class="line"> &#125;</span><br><span class="line"> console.log(new Child1);</span><br></pre></td></tr></table></figure><p>  这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p><h4 id="第二种-借助原型链"><a href="#第二种-借助原型链" class="headerlink" title="第二种: 借助原型链"></a>第二种: 借助原型链</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">  <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child2'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child2());</span><br></pre></td></tr></table></figure><p>看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2();</span><br><span class="line">s1.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1.play, s2.play);</span><br></pre></td></tr></table></figure><p>可以看到控制台：s1 和 s2 都被改变了. 明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。<br>那么如何规避 这个问题呢? </p><h3 id="第三种：将前两种组合"><a href="#第三种：将前两种组合" class="headerlink" title="第三种：将前两种组合"></a>第三种：将前两种组合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">   <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">   <span class="keyword">this</span>.type = <span class="string">'child3'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Child3.prototype = <span class="keyword">new</span> Parent3();</span><br><span class="line"> <span class="keyword">var</span> s3 = <span class="keyword">new</span> Child3();</span><br><span class="line"> <span class="keyword">var</span> s4 = <span class="keyword">new</span> Child3();</span><br><span class="line"> s3.play.push(<span class="number">4</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure><p>可以在控制台看到 之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？</p><h4 id="第四种-组合继承的优化1"><a href="#第四种-组合继承的优化1" class="headerlink" title="第四种: 组合继承的优化1"></a>第四种: 组合继承的优化1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = <span class="string">'parent4'</span>;</span><br><span class="line">   <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   Parent4.call(<span class="keyword">this</span>);</span><br><span class="line">   <span class="keyword">this</span>.type = <span class="string">'child4'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Child4.prototype = Parent4.prototype;</span><br></pre></td></tr></table></figure><p>  这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="built_in">console</span>.log(s3)</span><br></pre></td></tr></table></figure></p><p>可以从控制台看到 子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。</p><h4 id="第五种-最推荐使用-组合继承的优化1"><a href="#第五种-最推荐使用-组合继承的优化1" class="headerlink" title="第五种(最推荐使用): 组合继承的优化1"></a>第五种(最推荐使用): 组合继承的优化1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">   <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   Parent5.call(<span class="keyword">this</span>);</span><br><span class="line">   <span class="keyword">this</span>.type = <span class="string">'child5'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype);</span><br><span class="line"> Child5.prototype.constructor = Child5;</span><br></pre></td></tr></table></figure><p>这是最推荐的一种方式，接近完美的继承，它的名字也叫做寄生组合继承。</p><h4 id="继承的问题"><a href="#继承的问题" class="headerlink" title="继承的问题"></a>继承的问题</h4><p>假如现在有不同品牌的车，每辆车都有drive、music、addOil这三个方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  drive()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"wuwuwu!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  music()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"lalala!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  addOil()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"哦哟！"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">otherCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>现在可以实现车的功能，并且以此去扩展不同的车。</p><p>但是问题来了，新能源汽车也是车，但是它并不需要addOil(加油)。</p><p>如果让新能源汽车的类继承Car的话，也是有问题的，俗称”大猩猩和香蕉”的问题。大猩猩手里有香蕉，但是我现在明明只需要香蕉，却拿到了一只大猩猩。也就是说加油这个方法，我现在是不需要的，但是由于继承的原因，也给到子类了。</p><blockquote><p>继承的最大问题在于：无法决定继承哪些属性，所有属性都得继承。</p></blockquote><p>当然你可能会说，可以再创建一个父类啊，把加油的方法给去掉，但是这也是有问题的，一方面父类是无法描述所有子类的细节情况的，为了不同的子类特性去增加不同的父类，代码势必会大量重复，另一方面一旦子类有所变动，父类也要进行相应的更新，代码的耦合性太高，维护性不好。</p><p>那如何来解决继承的诸多问题呢？</p><p>用组合，这也是当今编程语法发展的趋势，比如golang完全采用的是面向组合的设计方式。</p><p>顾名思义，面向组合就是先设计一系列零件，然后将这些零件进行拼装，来形成不同的实例或者类。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wuwuwu!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">music</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"lalala!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"哦哟！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = compose(drive, music, addOil);</span><br><span class="line"><span class="keyword">let</span> newEnergyCar = compose(drive, music);</span><br></pre></td></tr></table></figure></p><p>代码干净，复用性也很好。这就是面向组合的设计方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之CSS</title>
      <link href="/2020/02/05/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BCSS/"/>
      <url>/2020/02/05/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BCSS/</url>
      
        <content type="html"><![CDATA[<h3 id="元素水平垂直居中"><a href="#元素水平垂直居中" class="headerlink" title="元素水平垂直居中"></a>元素水平垂直居中</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><ul><li>对于行内元素: text-align: center;</li><li>对于确定宽度的块级元素：<ul><li>width和margin实现。margin: 0 auto;</li><li>绝对定位和margin-left: -width/2, 前提是父元素position: relative</li></ul></li><li>对于宽度未知的块级元素<ul><li>table标签配合margin左右auto实现水平居中。使用table标签（或直接将块级元素设值为display:table），再通过给该标签添加左右margin为auto。</li><li>inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。</li><li>绝对定位+transform，translateX可以移动本身元素的50%。</li><li>flex布局使用justify-content:center</li></ul></li></ul><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><ul><li>利用line-height实现居中，这种方法适合纯文字类</li><li>通过设置父容器相对定位，子级设置绝对定位，标签通过margin实现自适应居中</li><li>弹性布局flex:父级设置display: flex; 子级设置margin为auto实现自适应居中</li><li>父级设置相对定位，子级设置绝对定位，并且通过位移transform实现</li><li>table布局，父级通过转换成表格形式，然后子级设置vertical-align实现。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。</li></ul><h3 id="浮动布局的优缺点-以及有哪些方式清除浮动"><a href="#浮动布局的优缺点-以及有哪些方式清除浮动" class="headerlink" title="浮动布局的优缺点,以及有哪些方式清除浮动."></a>浮动布局的优缺点,以及有哪些方式清除浮动.</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>浮动布局简介:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变现的好像浮动元素不存在一样。</p></blockquote><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，会造成父级元素的高度塌陷。</p><h4 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h4><ul><li><p>添加额外标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent_box"</span>&gt;</span></span><br><span class="line">    //添加额外标签并且添加clear属性</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    //也可以加一个br标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>父级添加overflow属性，或者设置高度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent_box"</span> <span class="attr">style</span>=<span class="string">"overflow:hidden"</span>&gt;</span></span><br><span class="line">    //将父元素的overflow设置为hidden或auto.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>推荐建立伪类选择器 + <code>clear:both</code> 属性清除浮动.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置添加子元素的内容是空 */</span></span></span><br><span class="line">        content: '';  </span><br><span class="line"><span class="css">        <span class="comment">/* 设置添加子元素为块级元素 */</span></span></span><br><span class="line">        display: block;</span><br><span class="line"><span class="css">        <span class="comment">/* 设置添加的子元素的高度0 */</span></span></span><br><span class="line">        height: 0;</span><br><span class="line"><span class="css">        <span class="comment">/* 设置添加子元素看不见 */</span></span></span><br><span class="line">        visibility: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/* 设置clear：both */</span></span></span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    // 浮动元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="display-inline-block-小特性-知识扩展"><a href="#display-inline-block-小特性-知识扩展" class="headerlink" title="display:inline-block 小特性(知识扩展)"></a>display:inline-block 小特性(知识扩展)</h3><h4 id="两个display：inline-block元素放到一起会产生一段空白。"><a href="#两个display：inline-block元素放到一起会产生一段空白。" class="headerlink" title="两个display：inline-block元素放到一起会产生一段空白。"></a>两个display：inline-block元素放到一起会产生一段空白。</h4><p>复现代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        width: 800px;</span><br><span class="line">        height: 200px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        font-size: 14px;</span><br><span class="line">        background: red;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        font-size: 14px;</span><br><span class="line">        background: blue;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        左</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        右</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如图:<br><img src="/img/inline-block-image.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><h4 id="产生空白的原因"><a href="#产生空白的原因" class="headerlink" title="产生空白的原因"></a>产生空白的原因</h4><p>元素被当成行内元素排版的时候，元素之间的空白符（空格、回车换行等）都会被浏览器处理，根据CSS中white-space属性的处理方式（默认是normal，合并多余空白），原来HTML代码中的回车换行被转成一个空白符，在字体不为0的情况下，空白符占据一定宽度，所以inline-block的元素之间就出现了空隙。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li><p>将子元素标签的结束符和下一个标签的开始符写在同一行或把所有子标签写在同一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">      左</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      右</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>父元素中设置font-size: 0，在子元素上重置正确的font-size</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  font-size: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为子元素设置float:left</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;</span><br><span class="line">  float: left;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  background: red;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS之品字布局"><a href="#CSS之品字布局" class="headerlink" title="CSS之品字布局"></a>CSS之品字布局</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>品字布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    body &#123;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">      margin: auto 0;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background: red;</span><br><span class="line">      font-size: 40px;</span><br><span class="line">      line-height: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line">      margin: 100px auto 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line">      margin-left: 50%;</span><br><span class="line">      background: green;</span><br><span class="line">      float: left;</span><br><span class="line">      transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.div3</span> &#123;</span></span><br><span class="line">      background: blue;</span><br><span class="line">      float: left;</span><br><span class="line">      transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图:<br><img src="/img/css_product_keyword.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><h4 id="第二种-全屏版"><a href="#第二种-全屏版" class="headerlink" title="第二种(全屏版)"></a>第二种(全屏版)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>品字布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        font-size: 40px;</span><br><span class="line">        line-height: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line">        margin: 0 auto 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line">        background: green;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 50%;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.div3</span> &#123;</span></span><br><span class="line">        background: blue;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 50%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图:<br><img src="/img/css_product_keyword1.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><h3 id="CSS之圣杯布局"><a href="#CSS之圣杯布局" class="headerlink" title="CSS之圣杯布局"></a>CSS之圣杯布局</h3><p>如图:<br><img src="/img/grail1.jpg" class="[class names]" title="[width] [height] [title text [alt text]]"></p><p>左右宽度固定,中间宽度自适应.</p><h4 id="利用flex布局"><a href="#利用flex布局" class="headerlink" title="利用flex布局"></a>利用flex布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.header</span>,<span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>中间部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这里是底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="float布局-全部float-left"><a href="#float布局-全部float-left" class="headerlink" title="float布局(全部float:left)"></a>float布局(全部float:left)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      height: 40px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      padding-left: 200px;</span><br><span class="line">      padding-right: 250px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      position: relative;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      background: pink;</span><br><span class="line">      margin-left: -100%;</span><br><span class="line">      left: -200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      width: 250px;</span><br><span class="line">      background: aqua;</span><br><span class="line">      margin-left: -250px;</span><br><span class="line">      left: 250px; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>中间部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这里是底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的float布局 是相对较难理解的, 主要是运用了浮动 + 负 margin 配合定位.</p><h4 id="float布局-左边float-left-右边float-right"><a href="#float布局-左边float-left-右边float-right" class="headerlink" title="float布局(左边float: left, 右边float: right)"></a>float布局(左边float: left, 右边float: right)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      height: 40px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">      overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">      background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line">      width: 200px;</span><br><span class="line">      background: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      float: right;</span><br><span class="line">      width: 250px;</span><br><span class="line">      background: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>中间部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这里是底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      height: 40px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">min-height</span>: 1<span class="selector-class">.2em</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">      left: 200px;</span><br><span class="line">      right: 250px;</span><br><span class="line">      background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      left: 0;</span><br><span class="line">      width: 200px;</span><br><span class="line">      background: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      right: 0;</span><br><span class="line">      width: 250px;</span><br><span class="line">      background: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>中间部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这里是底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">        display: grid;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#header</span>&#123;</span></span><br><span class="line">        background: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">grid-row</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        grid-column:1/5;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">    <span class="selector-id">#left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">grid-row</span><span class="selector-pseudo">:2</span>;</span></span><br><span class="line">        grid-column:1/2;</span><br><span class="line">        background: orange;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">grid-row</span><span class="selector-pseudo">:2</span>;</span></span><br><span class="line">        grid-column:4/5;</span><br><span class="line">        background: cadetblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#middle</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">grid-row</span><span class="selector-pseudo">:2</span>;</span></span><br><span class="line">        grid-column:2/4;</span><br><span class="line">        background: rebeccapurple</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#footer</span>&#123;</span></span><br><span class="line">        background: gold;</span><br><span class="line"><span class="css">        <span class="selector-tag">grid-row</span><span class="selector-pseudo">:3</span>;</span></span><br><span class="line">        grid-column:1/5;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS之双飞翼布局"><a href="#CSS之双飞翼布局" class="headerlink" title="CSS之双飞翼布局"></a>CSS之双飞翼布局</h3><p>如图<br><img src="/img/duble_swallow.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        min-width: 600px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 400px;</span><br><span class="line">        background: red;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">        margin: 0 200px; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 400px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-left: -200px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>理解了 圣杯布局的 浮动 + 负margin 这个就理解起来就很容易了.</p><h3 id="css之BFC"><a href="#css之BFC" class="headerlink" title="css之BFC"></a>css之BFC</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><blockquote><p>W3C对BFC的定义如下： 浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为”visiable”的块级盒子，都会为他们的内容创建新的BFC（Block Fromatting Context， 即块级格式上下文）。</p></blockquote><h4 id="如何创建-BFC"><a href="#如何创建-BFC" class="headerlink" title="如何创建 BFC"></a>如何创建 BFC</h4><ul><li><p>float属性不为none.</p></li><li><p>position属性不为static和relative.</p></li><li><p>display属性为下列之一:table-cell,table-caption,inline-block,flex,or inline-flex.</p></li><li><p>overflow属性不为visible.</p></li></ul><h4 id="BFC渲染特性"><a href="#BFC渲染特性" class="headerlink" title="BFC渲染特性"></a>BFC渲染特性</h4><ul><li>计算BFC高度的时候浮动元素也会参与计算</li><li>BFC是一个独立的容器，外面的元素不会影响里面的元素</li><li>BFC的区域不会与浮动元素的box重叠</li><li>BFC垂直方向边距重叠</li></ul><h4 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h4><ul><li>解决 浮动导致的父元素高度坍塌</li><li>避免外边距折叠</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识梳理之HTML</title>
      <link href="/2020/01/25/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BHTML/"/>
      <url>/2020/01/25/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%8BHTML/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML5和HTML4-一些不同之处？"><a href="#HTML5和HTML4-一些不同之处？" class="headerlink" title="HTML5和HTML4 一些不同之处？"></a>HTML5和HTML4 一些不同之处？</h3><h4 id="声明方面"><a href="#声明方面" class="headerlink" title="声明方面"></a>声明方面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  //HTML5 文件类型声明（<span class="meta">&lt;!DOCTYPE&gt;</span>）更简洁</span><br></pre></td></tr></table></figure><h4 id="标签方面"><a href="#标签方面" class="headerlink" title="标签方面"></a>标签方面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>、<span class="tag">&lt;<span class="name">footer</span>&gt;</span>、<span class="tag">&lt;<span class="name">section</span>&gt;</span>、<span class="tag">&lt;<span class="name">article</span>&gt;</span>、<span class="tag">&lt;<span class="name">nav</span>&gt;</span>、<span class="tag">&lt;<span class="name">hgroup</span>&gt;</span>、<span class="tag">&lt;<span class="name">aside</span>&gt;</span>、<span class="tag">&lt;<span class="name">figure</span>&gt;</span>  </span><br><span class="line">// HTML5 新增语义标签</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>、<span class="tag">&lt;<span class="name">u</span>&gt;</span>、<span class="tag">&lt;<span class="name">font</span>&gt;</span>、<span class="tag">&lt;<span class="name">basefont</span>&gt;</span>、<span class="tag">&lt;<span class="name">center</span>&gt;</span>、<span class="tag">&lt;<span class="name">s</span>&gt;</span>、<span class="tag">&lt;<span class="name">tt</span>&gt;</span> </span><br><span class="line">// 废除一些网页美化方面的标签，使样式与结构分离更加彻底</span><br></pre></td></tr></table></figure><p>另外通过增加了<code>&lt;audio&gt;、&lt;video&gt;</code>两个标签来实现对多媒体中的音频、视频使用的支持。</p><h4 id="属性方面"><a href="#属性方面" class="headerlink" title="属性方面"></a>属性方面</h4><p>增加了一些表单属性, 主要是其中的input属性的增强<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此类型要求输入格式正确的email地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">email</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 要求输入格式正确的URL地址  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">url</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 要求输入格式数字，默认会有上下两个按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">number</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 时间系列，但目前只有 Opera和Chrome支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">date</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">time</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">datetime</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">datetime-local</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">month</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">week</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认占位文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">placeholder</span>=<span class="string">"your message"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认聚焦属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">autofacus</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只写属性名默认为true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">checked</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 属性名="属性名"也为true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>其他标签新增了一些属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- meta标签增加charset属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script标签增加async属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="存储方面"><a href="#存储方面" class="headerlink" title="存储方面"></a>存储方面</h4><p>1、新增WebStorage, 包括localStorage和sessionStorage</p><p>2、引入了IndexedDB和Web SQL，允许在浏览器端创建数据库表并存储数据, 两者的区别在于IndexedDB更像是一个NoSQL数据库，而WebSQL更像是关系型数据库。W3C已经不再支持WebSQL。</p><p>3、引入了应用程序缓存器(application cache)，可对web进行缓存，在没有网络的情况下使用，通过创建cache manifest文件,创建应用缓存，为PWA(Progressive Web App)提供了底层的技术支持。</p><h3 id="meta标签属性汇集？"><a href="#meta标签属性汇集？" class="headerlink" title="meta标签属性汇集？"></a>meta标签属性汇集？</h3><h4 id="http-equiv属性"><a href="#http-equiv属性" class="headerlink" title="http-equiv属性"></a>http-equiv属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用浏览器版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对WebApp全屏模式，隐藏状态栏/设置状态栏颜色，content的值为default | black | black-translucent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black-translucent"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- expires指定网页的过期时间。一旦网页过期，必须从服务器上下载。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Fri, 12 Jan 2020 18:18:18 GMT"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等待一定的时间刷新或跳转到其他url。下面1表示1秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"1; url=https://www.baidu.com"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 禁止浏览器从本地缓存中读取网页，即浏览器一旦离开网页在无法连接网络的情况下就无法访问到页面。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也是设置cookie的一种方式，并且可以指定过期时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"set-cookie"</span> <span class="attr">content</span>=<span class="string">"name=value expires=Fri, 12 Jan 2001 18:18:18 GMT,path=/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="charset属性"><a href="#charset属性" class="headerlink" title="charset属性"></a>charset属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义网页文档的字符集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="name-content属性"><a href="#name-content属性" class="headerlink" title="name + content属性"></a>name + content属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网页作者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"开源技术团队"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"website"</span> <span class="attr">content</span>=<span class="string">"https://www.baidu.com/"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页关键字, 用于SEO --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"meta,html"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"网页描述"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页版权信息 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"copyright"</span> <span class="attr">content</span>=<span class="string">"2019-2020 demo.com"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 搜索引擎索引方式，一般为all，不用深究 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 移动端常用视口设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0, user-scalable=no"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  viewport参数详解：</span></span><br><span class="line"><span class="comment">  user-scalable：用户是否可以手动缩 (no,yes)</span></span><br><span class="line"><span class="comment">  minimum-scale：允许用户缩放到的最小比例</span></span><br><span class="line"><span class="comment">  maximum-scale：允许用户缩放到的最大比例</span></span><br><span class="line"><span class="comment">  width：宽度（数值 / device-width）（默认为980 像素）</span></span><br><span class="line"><span class="comment">  height：高度（数值 / device-height）</span></span><br><span class="line"><span class="comment">  initial-scale：初始的缩放比例 （范围从&gt;0 到10）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="href和src-一些不同之处？"><a href="#href和src-一些不同之处？" class="headerlink" title="href和src 一些不同之处？"></a>href和src 一些不同之处？</h3><h4 id="常见场景及定义"><a href="#常见场景及定义" class="headerlink" title="常见场景及定义:"></a>常见场景及定义:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"common.css"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- href是Hypertext Reference的简写，表示超文本引用，指向网络资源所在位置。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/girl.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"top.html"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"show.js"</span>&gt;</span> </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="comment">&lt;!-- src是source的简写，目的是要把文件下载到html页面中去。 --&gt;</span></span></span></span><br></pre></td></tr></table></figure><h4 id="浏览器解析方式"><a href="#浏览器解析方式" class="headerlink" title="浏览器解析方式"></a>浏览器解析方式</h4><p>当浏览器遇到href会并行下载资源并且不会停止对当前文档的处理。(同时也是为什么建议使用 link 方式加载 CSS，而不是使用 @import 方式)<br>当浏览器解析到src ，会暂停其他资源的下载和处理，直到将该资源加载或执行完毕。(这也是script标签为什么放在底部而不是头部的原因)</p><h4 id="作用结果"><a href="#作用结果" class="headerlink" title="作用结果"></a>作用结果</h4><p>href 用于在当前文档和引用资源之间确立联系<br>src 用于替换当前内容</p><h3 id="script标签中defer和async-一些不同之处？"><a href="#script标签中defer和async-一些不同之处？" class="headerlink" title="script标签中defer和async 一些不同之处？"></a>script标签中defer和async 一些不同之处？</h3><p>默认情况下，脚本的下载和执行将会按照文档的先后顺序同步进行。当脚本下载和执行的时候，文档解析就会被阻塞，在脚本下载和执行完成之后文档才能往下继续进行解析。</p><p>下面是async和defer两者区别：</p><ul><li><p>当script中有defer属性时，脚本的加载过程和文档加载是异步发生的，等到文档解析完(DOMContentLoaded事件发生)脚本才开始执行。</p></li><li><p>当script有async属性时，脚本的加载过程和文档加载也是异步发生的。但脚本下载完成后会停止HTML解析，执行脚本，脚本解析完继续HTML解析。</p></li><li><p>当script同时有async和defer属性时，执行效果和async一致。</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>粗略的统计了一下 印象中的 ,后续再补充. 一步步完善. 巩固知识体系书面化.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2015,2016,2017 特性 及使用</title>
      <link href="/2019/12/04/ES2015-2016-2017-%E7%89%B9%E6%80%A7-%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/04/ES2015-2016-2017-%E7%89%B9%E6%80%A7-%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><font color="#337ab7">概述</font></h3><p>ECMAScript 和 JavaScript 到底是什么关系？</p><p>1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。该标准从一开始就是针对 JavaScript 语言制定的，但是JavaScript已经被Netscape公司注册为商标。再者想体现这门语言的制定者是 ECMA，不是Netscape，故取名ECMAScript，这样也有利于保证这门语言的开放性和中立性。<br>简而言之，ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。</p><table><thead><tr><th>ECMAScript版本</th><th>发布时间</th><th>新增特性</th></tr></thead><tbody><tr><td>ECMAScript 2009(ES5)</td><td>2009年11月</td><td>扩展了Object、Array、Function的功能等</td></tr><tr><td>ECMAScript 2015(ES6)</td><td>2015年6月</td><td>类，模块化，箭头函数，函数参数默认值等</td></tr><tr><td>ECMAScript 2016(ES7)</td><td>2016年3月</td><td>includes，指数操作符</td></tr><tr><td>ECMAScript 2017(ES8)</td><td>2017年6月</td><td>sync/await，Object.values()，Object.entries()，String padding等</td></tr></tbody></table><h3 id="ES6的特性（2015）"><a href="#ES6的特性（2015）" class="headerlink" title="ES6的特性（2015）"></a><font color="#337ab7">ES6的特性（2015）</font></h3><p>2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p>列举几个经常使用的：</p><ul><li>类</li><li>模块化</li><li>箭头函数</li><li>函数参数默认值</li><li>模板字符串</li><li>解构赋值</li><li>延展操作符</li><li>对象属性简写</li><li>Promise</li><li>Let与Const</li></ul><h4 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">static</span> classMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="built_in">this</span>.x + <span class="string">', '</span> + <span class="built_in">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="type">Example</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="type">Example</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.__proto__ === p2.__proto__</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Example.classMethod() <span class="comment">// 'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> example = <span class="keyword">new</span> <span class="type">Example</span>();</span><br><span class="line">example.classMethod() <span class="comment">// TypeError: foo.classMethod is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">Example</span></span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> classMethodBar() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.classMethod() + <span class="string">', too'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Bar.classMethodBar() <span class="comment">// "hello, too"</span></span><br><span class="line"></span><br><span class="line">Bar.classMethod() <span class="comment">// 'hello'</span></span><br></pre></td></tr></table></figure><p>这里定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。</p><p>Point类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p><p>ES6 的类，完全可以看作构造函数的另一种写法。与ES5一样，类的所有实例共享一个原型对象。</p><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。父类的静态方法，可以被子类继承。静态方法也是可以从super对象上调用的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    print() &#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">A</span>.prototype.x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    console.log(<span class="keyword">super</span>.x) <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  m() &#123;</span><br><span class="line">    <span class="keyword">super</span>.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b = <span class="keyword">new</span> <span class="type">B</span>();</span><br><span class="line">b.m() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p><h4 id="模块化-Module"><a href="#模块化-Module" class="headerlink" title="模块化(Module)"></a>模块化(Module)</h4><p>Es6 之前，社区的模块加载方案最主要的有 CommonJS 和 AMD 两种。</p><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure></p><p>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p><h5 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> firstName</span><br></pre></td></tr></table></figure><h5 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">'./person.js'</span>;</span><br><span class="line"><span class="keyword">import</span> firstName <span class="keyword">from</span> <span class="string">'./person.js'</span>; <span class="comment">// defauls 默认导出不需要括号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName &#125; <span class="keyword">from</span> <span class="string">'person.js'</span>; <span class="comment">// 复合写法</span></span><br></pre></td></tr></table></figure><h4 id="箭头（Arrow）函数"><a href="#箭头（Arrow）函数" class="headerlink" title="箭头（Arrow）函数"></a>箭头（Arrow）函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">example = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数不但易书写，更大的好处在于 融合了 上下文环境，不改变方法内部 this 指向。不再需要var self = this;</p><h4 id="ES6-允许为函数的参数设置默认值，即直接写在参数定义的后面。"><a href="#ES6-允许为函数的参数设置默认值，即直接写在参数定义的后面。" class="headerlink" title="ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。"></a>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">firstName = <span class="string">'david'</span>, age = <span class="number">25</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">person(<span class="string">''</span>,<span class="number">0</span>) <span class="comment">// age = 0 ,firstName = ''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">firstName, lastName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName = firstName || <span class="string">'david'</span>;</span><br><span class="line">    <span class="keyword">var</span> age = age || <span class="number">25</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person(<span class="string">''</span>,<span class="number">0</span>) <span class="comment">// age = 25 ,firstName = 'david'</span></span><br></pre></td></tr></table></figure><p>因为0的布尔值为false，这样age的取值将是25。firstName的取值为‘david’。可以看出Es6 允许为函数的参数设置默认值后不仅能是代码变得更加简洁而且能规避一些问题。</p><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Hello</span> <span class="variable">$&#123;name&#125;</span>, how are you <span class="variable">$&#123;time&#125;</span>?</span><br></pre></td></tr></table></figure><p>可以很畅快的拼接字符串。</p><h4 id="解构赋值-与-延展操作符"><a href="#解构赋值-与-延展操作符" class="headerlink" title="解构赋值 与 延展操作符"></a>解构赋值 与 延展操作符</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">c <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// 这里用到 另一个新语法延展操作符</span></span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>]; </span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">x, y</span>] = [y, x]; <span class="comment">// 快速交换变量值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; foo: <span class="string">'aaa'</span>, bar: <span class="string">'bbb'</span> &#125;; </span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;foo&#125; = &#123;bar: <span class="string">'baz'</span>&#125;;</span><br><span class="line">foo <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a>let与const</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> c = a;</span><br><span class="line">  <span class="keyword">var</span> d = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">d <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。若是var声明的，里面的i指向的就是全局的i。导致运行时输出的是最后一轮的i的值，也就是 10。。</p><p>const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。const的作用域与let命令相同：只在声明所在的块级作用域内有效。</p><h4 id="Promise，对象属性简写。"><a href="#Promise，对象属性简写。" class="headerlink" title="Promise，对象属性简写。"></a>Promise，对象属性简写。</h4><p>Promise对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><h3 id="ES7的特性（2016）"><a href="#ES7的特性（2016）" class="headerlink" title="ES7的特性（2016）"></a><font color="#337ab7">ES7的特性（2016）</font></h3><ul><li>Array.prototype.includes()</li><li>指数操作符</li></ul><p>ES6 由于间隔数年才发布 可以看到 更新较为多，而之后ES的发布频率较为频繁，基本一年一次，所以更新 较少。</p><h4 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h4><p>includes() 函数用来判断一个数组是否包含一个指定的值，如果包含则返回 true，否则返回false。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="keyword">includes</span>(x)  <span class="comment">// ES7</span></span><br><span class="line">arr.indexOf(x) &gt;= <span class="number">0</span> <span class="comment">// 之前的做法</span></span><br></pre></td></tr></table></figure><h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>**<span class="number">2</span>);<span class="comment">// 输出4 ES7 </span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">//  之前的做法</span></span><br></pre></td></tr></table></figure><h3 id="ES8的特性（2017）"><a href="#ES8的特性（2017）" class="headerlink" title="ES8的特性（2017）"></a><font color="#337ab7">ES8的特性（2017）</font></h3><ul><li>Object.values() 和 Object.entries()</li><li>String.prototype.padEnd() 和 String.prototype.padStart()</li><li>Object.getOwnPropertyDescriptors()</li><li>async/await</li></ul><h4 id="Object-values-和-Object-entries"><a href="#Object-values-和-Object-entries" class="headerlink" title="Object.values() 和 Object.entries()"></a>Object.values() 和 Object.entries()</h4><p>Object.values()返回一个数组，其元素是在对象上找到的可枚举属性值。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。</p><blockquote><p>需要注意的是 如果可枚举对象的key 为数字，会根据键以数字顺序返回值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ['bar', 42]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> an_obj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(an_obj)); <span class="comment">// ['b', 'c', 'a']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.values) <span class="built_in">Object</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">// 向下兼容仿写</span></span><br><span class="line">    <span class="keyword">if</span> (obj !== <span class="built_in">Object</span>(obj))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Object.values called on a non-object'</span>);</span><br><span class="line">    <span class="keyword">var</span> val=[],key;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj,key)) &#123;</span><br><span class="line">            val.push(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object.entries()返回一个数组，其元素是与直接在object上找到的可枚举属性键值对相对应的数组。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。</p><blockquote><p>需要注意的是 如果可枚举对象的key 为数字，会根据键以数字顺序返回值。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123; foo: <span class="string">'bar'</span>, baz: <span class="number">42</span> &#125;;</span><br><span class="line">console.log(<span class="symbol">Object</span>.entries(obj)); // [ [<span class="string">'foo'</span>, <span class="string">'bar'</span>], [<span class="string">'baz'</span>, <span class="number">42</span>] ]</span><br><span class="line"></span><br><span class="line">const anObj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line">console.log(<span class="symbol">Object</span>.entries(anObj)); // [ [<span class="string">'2'</span>, <span class="string">'b'</span>], [<span class="string">'7'</span>, <span class="string">'c'</span>], [<span class="string">'100'</span>, <span class="string">'a'</span>] ]</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="String-prototype-padEnd-和-String-prototype-padStart"><a href="#String-prototype-padEnd-和-String-prototype-padStart" class="headerlink" title="String.prototype.padEnd() 和 String.prototype.padStart()"></a>String.prototype.padEnd() 和 String.prototype.padStart()</h4><p>padStart() 从左侧添加字符以达到给定长度，若填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>);         <span class="comment">// "       abc" 填充到指定长度</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "123abc" 保留左侧</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">8</span>, <span class="string">"0"</span>);     <span class="comment">// "00000abc" 重复填充入参到指定长度</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">1</span>);          <span class="comment">// "abc" 保留左侧</span></span><br><span class="line"><span class="comment">// 如果原生环境不支持该方法，在其他代码之前先运行下面的代码，将创建 String.prototype.padStart() 方法。</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.padStart) &#123;</span><br><span class="line">    <span class="built_in">String</span>.prototype.padStart = <span class="function"><span class="keyword">function</span> <span class="title">padStart</span>(<span class="params">targetLength,padString</span>) </span>&#123;</span><br><span class="line">        targetLength = targetLength&gt;&gt;<span class="number">0</span>; <span class="comment">//floor if number or convert non-number to 0;</span></span><br><span class="line">        padString = <span class="built_in">String</span>((<span class="keyword">typeof</span> padString !== <span class="string">'undefined'</span> ? padString : <span class="string">' '</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt; targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength-<span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength/padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> padString.slice(<span class="number">0</span>,targetLength) + <span class="built_in">String</span>(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>padEnd()  特性与padStart 差之不大，只不过是从尾部填充至指定长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">10</span>);         <span class="comment">// "abc       " 填充到指定长度</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "abc123" 保留左侧</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">8</span>, <span class="string">"0"</span>);     <span class="comment">// "abc00000" 重复填充入参到指定长度</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">1</span>);          <span class="comment">// "abc" 保留左侧</span></span><br><span class="line"><span class="comment">// 如果原生环境不支持该方法，在其他代码之前先运行下面的代码，将创建 String.prototype.padEnd() 方法。</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.padEnd) &#123;</span><br><span class="line">    <span class="built_in">String</span>.prototype.padEnd = <span class="function"><span class="keyword">function</span> <span class="title">padEnd</span>(<span class="params">targetLength,padString</span>) </span>&#123;</span><br><span class="line">        targetLength = targetLength&gt;&gt;<span class="number">0</span>; <span class="comment">//floor if number or convert non-number to 0;</span></span><br><span class="line">        padString = <span class="built_in">String</span>((<span class="keyword">typeof</span> padString !== <span class="string">'undefined'</span> ? padString: <span class="string">''</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt; targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength-<span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength/padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>) + padString.slice(<span class="number">0</span>,targetLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getOwnPropertyDescriptors"><a href="#getOwnPropertyDescriptors" class="headerlink" title="getOwnPropertyDescriptors"></a>getOwnPropertyDescriptors</h4><p>Object.getOwnPropertyDescriptors（）方法返回给定对象的所有自己的属性描述符。如果没有属性，则可能是一个undefined。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">object1</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">property1:</span> <span class="number">42</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">const</span> <span class="string">descriptors1</span> <span class="string">=</span> <span class="string">Object.getOwnPropertyDescriptors(object1);</span></span><br><span class="line"><span class="string">console.log(descriptors1.property1)</span></span><br><span class="line"><span class="string">//</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">//</span>    <span class="attr">configurable:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">//</span>    <span class="attr">enumerable:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">//</span>    <span class="attr">value:</span> <span class="number">42</span></span><br><span class="line"><span class="string">//</span>    <span class="attr">writable:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">//</span>    <span class="attr">__proto__:</span> <span class="string">Object</span></span><br><span class="line"><span class="string">//&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><p>异步函数可以包含await指令，该指令会暂停异步函数的执行，并等待Promise执行，然后继续执行异步函数，并返回结果（异步转同步）。</p><blockquote><p>await 关键字只在异步函数内有效。如果你在异步函数外使用它，会抛出语法错误。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfter2Seconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'slow promise is done'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfterSeconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'fast promise is done'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncCall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'calling'</span>);</span><br><span class="line">  <span class="keyword">var</span> slow = <span class="keyword">await</span> resolveAfter2Seconds();</span><br><span class="line">  <span class="built_in">console</span>.log(slow);</span><br><span class="line">  <span class="keyword">var</span> fast = <span class="keyword">await</span> resolveAfterSeconds();</span><br><span class="line">  <span class="built_in">console</span>.log(fast);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncCall();</span><br><span class="line"></span><br><span class="line"><span class="comment">// "calling"</span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">// "slow promise is done"</span></span><br><span class="line"><span class="comment">// "fast promise is done"</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h5 id="async函数返回一个-Promise对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。"><a href="#async函数返回一个-Promise对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。" class="headerlink" title="async函数返回一个 Promise对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。"></a>async函数返回一个 Promise对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 等同于</span></span><br><span class="line">  <span class="comment">// return 'hello world';</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="string">'hello world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// "hello world"</span></span><br></pre></td></tr></table></figure><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val1 = <span class="keyword">await</span> firstStep();</span><br><span class="line">    <span class="keyword">const</span> val2 = <span class="keyword">await</span> secondStep(val1);</span><br><span class="line">    <span class="keyword">const</span> val3 = <span class="keyword">await</span> thirdStep(val1, val2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> val1</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main().then(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;)</span><br><span class="line"><span class="comment">//ReferenceError: firstStep is not defined</span></span><br><span class="line"><span class="comment">//  at main</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><font color="#337ab7">参考</font></h3><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a></p><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React Native开发之React基础</title>
      <link href="/2019/11/27/React-Native%E5%BC%80%E5%8F%91%E4%B9%8BReact%E5%9F%BA%E7%A1%80%20copy/"/>
      <url>/2019/11/27/React-Native%E5%BC%80%E5%8F%91%E4%B9%8BReact%E5%9F%BA%E7%A1%80%20copy/</url>
      
        <content type="html"><![CDATA[<h2 id="React是什么？"><a href="#React是什么？" class="headerlink" title="# React是什么？"></a><font color="#337ab7"># React是什么？</font></h2><p> React 是 Facebook 推出的开源 JavaScript Library，React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。React 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。</p><a id="more"></a><h2 id="最简易的-React-示例如下："><a href="#最简易的-React-示例如下：" class="headerlink" title="# 最简易的 React 示例如下："></a><font color="#337ab7"># 最简易的 React 示例如下：</font></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;Hello, world!&lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>它将在页面上展示一个 “Hello, world!” 的标题。</p><h2 id="为什么使用-JSX？"><a href="#为什么使用-JSX？" class="headerlink" title="# 为什么使用 JSX？"></a><font color="#337ab7"># 为什么使用 JSX？</font></h2><p>JSX 明显更加简洁易读。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = React.createElement(</span><br><span class="line">  <span class="string">'h1'</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">'greeting'</span>&#125;,</span><br><span class="line">  <span class="string">'Hello, world!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="在-JSX-中嵌入表达式"><a href="#在-JSX-中嵌入表达式" class="headerlink" title="# 在 JSX 中嵌入表达式"></a><font color="#337ab7"># 在 JSX 中嵌入表达式</font></h2><p>示例中，我们将调用 JavaScript 函数 formatName(user) 的结果，并将结果嵌入到 <code>&lt;h1&gt;</code> 元素中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + <span class="string">' '</span> + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">'Harper'</span>,</span><br><span class="line">  lastName: <span class="string">'Perez'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    Hello, &#123;formatName(user)&#125;!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  element,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h2 id="组件-amp-Props"><a href="#组件-amp-Props" class="headerlink" title="# 组件 &amp; Props"></a><font color="#337ab7"># 组件 &amp; Props</font></h2><p>组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Cahal"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Edite"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>提示：<br>React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。<br>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代， React DOM 使用 className 和 htmlFor 来做对应的属性。所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p></blockquote><h2 id="State-amp-生命周期"><a href="#State-amp-生命周期" class="headerlink" title="# State &amp; 生命周期"></a><font color="#337ab7"># State &amp; 生命周期</font></h2><p>componentDidMount() 方法会在组件已经被渲染到 DOM 中后运行，所以，最好在这里设置计时器，<br>一旦 Clock 组件从 DOM 中被移除，React 就会调用 componentWillUnmount() 生命周期方法，这样计时器就停止了。</p><p>必须在 componentWillUnmount() 生命周期方法中清除计时器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(</span><br><span class="line">      () =&gt; <span class="keyword">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Clock /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>不要直接修改 State,例如，此代码不会重新渲染组件：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;comment: <span class="string">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>如果更新State 需要用到Props 属性，将此次更新被应用时的 props 做为第二个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Correct</span><br><span class="line">this.<span class="built_in">set</span>State((<span class="keyword">state</span>, props) =&gt; (&#123;</span><br><span class="line">  counter: <span class="keyword">state</span>.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="# 元素渲染"></a><font color="#337ab7"># 元素渲染</font></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;It is &#123;new Date().toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  ReactDOM.render(element, document.getElementById('root'));</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">setInterval(tick, 1000);</span></span><br></pre></td></tr></table></figure><p>遍历渲染<br><code>this.props.children</code>会返回组件对象的所有属性。 React 提供一个工具方法 React.Children 来处理 <code>this.props.children</code> 。我们可以用 React.Children.map或React.Children.forEach 来遍历子节点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">React</span><span class="selector-class">.Children</span><span class="selector-class">.map</span>(<span class="selector-tag">children</span>, <span class="selector-tag">function</span><span class="selector-attr">[(thisArg)]</span>)</span><br><span class="line"><span class="selector-tag">React</span><span class="selector-class">.Children</span><span class="selector-class">.forEach</span>(<span class="selector-tag">children</span>, <span class="selector-tag">function</span><span class="selector-attr">[(thisArg)]</span>)</span><br></pre></td></tr></table></figure><p>示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    React.Children.map(<span class="keyword">this</span>.props.children,(child)=&gt; </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;                     </span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;<span class="regexp">/ol&gt; );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;NotesList&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;hello&lt;/</span>span&gt;     </span><br><span class="line">    &lt;span&gt;world&lt;<span class="regexp">/span&gt; </span></span><br><span class="line"><span class="regexp">    &lt;/</span>NotesList&gt;, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p><p> 列表可以参考此方式渲染。</p><h2 id="ref属性-获取真是DOM"><a href="#ref属性-获取真是DOM" class="headerlink" title="# ref属性 获取真是DOM"></a><font color="#337ab7"># ref属性 获取真是DOM</font></h2><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。</p><p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alert</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    showAlert(message) &#123;</span><br><span class="line">        alert(`<span class="type">Debug</span>:$&#123;message&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    onClick = () =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.alert.showAlert(<span class="symbol">'MyTitl</span>e');</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">            &lt;h1 onClick=&#123;<span class="keyword">this</span>.onClick&#125;&gt;<span class="type">Click</span> me&lt;/h1&gt;</span><br><span class="line">            &lt;<span class="type">Alert</span> ref=<span class="symbol">'aler</span>t'/&gt;</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyTitle</span>/&gt;, document.getElementById(<span class="symbol">'roo</span>t'));</span><br></pre></td></tr></table></figure></p><h2 id="使用-PropTypes-进行类型检查"><a href="#使用-PropTypes-进行类型检查" class="headerlink" title="# 使用 PropTypes 进行类型检查"></a><font color="#337ab7"># 使用 PropTypes 进行类型检查</font></h2><p>自 React v15.5 起，React.PropTypes 已移入另一个包中。请使用 prop-types 库 代替。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">PropTypes</span> from <span class="symbol">'prop</span>-types';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;<span class="type">Hello</span>, &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Greeting</span>.propTypes = &#123;</span><br><span class="line">  name: <span class="type">PropTypes</span>.string</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="# 组件的生命周期"></a><font color="#337ab7"># 组件的生命周期</font></h2><p><img src="https://img.alicdn.com/tfs/TB1ELaIugHqK1RjSZJnXXbNLpXa-1093-618.png" alt></p><h4 id="组件的生命周期分成三个时期"><a href="#组件的生命周期分成三个时期" class="headerlink" title="# 组件的生命周期分成三个时期"></a><font color="#337ab7"># 组件的生命周期分成三个时期</font></h4><ul><li>Mounting：挂载时</li><li>Updating：更新时</li><li>Unmounting：卸载时</li></ul><h4 id="Mounting：挂载时"><a href="#Mounting：挂载时" class="headerlink" title="# Mounting：挂载时"></a><font color="#337ab7"># Mounting：挂载时</font></h4><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p><ul><li><p>constructor()</p><p>  React组件的构造函数将会在装配之前被调用。当为一个React.Component子类定义构造函数时，你应该在任何其他的表达式之前调用super(props)。否则，this.props在构造函数中将是未定义，并可能引发异常。</p></li><li><p>static getDerivedStateFromProps()<br>  组件实例化后和接受新属性时将会调用getDerivedStateFromProps。它应该返回一个对象来更新状态，或者返回null来表明新属性不需要更新任何状态。</p><p>  注意，如果父组件导致了组件的重新渲染，即使属性没有更新，这一方法也会被调用。如果你只想处理变化，那么可以通过比较新旧值来完成。</p><blockquote><p>调用this.setState() 通常不会触发 getDerivedStateFromProps()。</p></blockquote></li><li><p>render()<br>  render() 方法是 class 组件中唯一必须实现的方法。<br>  当 render 被调用时，它会检查 this.props 和 this.state 的变化并返回以下类型之一：<br>  React 元素。通常通过 JSX 创建。例如，<div> 会被 React 渲染为 DOM 节点，<mycomponent> 会被 React 渲染为自定义组件，无论是 <div> 还是 <mycomponent> 均为 React 元素。<br>  数组或 fragments。 使得 render 方法可以返回多个元素。欲了解更多详细信息，请参阅 fragments 文档。<br>  Portals。可以渲染子节点到不同的 DOM 子树中。欲了解更多详细信息，请参阅有关 portals 的文档<br>  字符串或数值类型。它们在 DOM 中会被渲染为文本节点<br>  布尔类型或 null。什么都不渲染。（主要用于支持返回 test &amp;&amp; <child> 的模式，其中 test 为布尔类型。)<br>  render() 函数应该为纯函数，这意味着在不修改组件 state 的情况下，每次调用时都返回相同的结果，并且它不会直接与浏览器交互。</child></mycomponent></div></mycomponent></div></p><p>  如需与浏览器进行交互，请在 componentDidMount() 或其他生命周期方法中执行你的操作。保持 render() 为纯函数，可以使组件更容易思考。</p></li><li><p>componentDidMount()<br>  componentDidMount()在组件被装配后立即调用，通常在该方法中进行一些初始化操作。初始化时需要DOM节点的操作可以放到这里进行`。若你需要从远端加载数据，这是一个适合实现网络请求的地方。在该方法里设置状态将会触发重渲。</p><p>  这一方法是一个发起任何订阅的好地方。如果你这么做了，别忘了在componentWillUnmount()退订。</p><p>  另外，在这个方法中调用setState()将会触发一次额外的渲染，但是它将在浏览器刷新屏幕之前发生。这保证了即使render()将会调用两次，但用户不会看到中间状态。</p></li></ul><h4 id="Updating：更新时"><a href="#Updating：更新时" class="headerlink" title="# Updating：更新时"></a><font color="#337ab7"># Updating：更新时</font></h4><p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p><ul><li><p>shouldComponentUpdate()<br>  在接收到新的 props 或者 state，将要渲染之前调用，以让React知道当前状态或属性的改变是否不影响组件的输出。</p><p>  该方法在初始化渲染的时候不会调用，在使用 forceUpdate 方法的时候也不会。如果确定新的 props 和 state 不需要重新渲染，则此处应该 返回 false。</p></li></ul><ul><li>getSnapshotBeforeUpdate()<br>  getSnapshotBeforeUpdate() 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 componentDidUpdate()。</li><li>componentDidUpdate()<br>  当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）<blockquote><p>componentDidUpdate() 会在更新后会被立即调用。首次渲染不会执行此方法。</p></blockquote></li></ul><h4 id="Mounting：挂载时-1"><a href="#Mounting：挂载时-1" class="headerlink" title="# Mounting：挂载时"></a><font color="#337ab7"># Mounting：挂载时</font></h4><p>当组件从 DOM 中移除时会调用如下方法：</p><ul><li><p>componentWillUnmount()<br>  在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 componentDidMount() 中创建的订阅等。</p><p>  componentWillUnmount() 中不应调用 setState()，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。</p></li></ul><h4 id="不安全的方法"><a href="#不安全的方法" class="headerlink" title="# 不安全的方法"></a><font color="#337ab7"># 不安全的方法</font></h4><ul><li>componentWillMount</li><li>componentWillReceiveProps</li><li>componentWillUpdate<br>使用这些生命周期方法通常会导致错误和不一致，因此将来会被弃用。在新的React版本中他们被标记为UNSAFE。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native列表之FlatList</title>
      <link href="/2019/11/24/React-Native-FlatList/"/>
      <url>/2019/11/24/React-Native-FlatList/</url>
      
        <content type="html"><![CDATA[<p>在APP开发过程中，列表可谓是页面最重要的一种展现形式了，几乎每一个APP都离不了列表，那么在这篇文章中将向大家分享在React Native中该如何实现列表，以及FlatList的原理和实用指南。</p><p>在React Native的早期版本中列表通常使用<code>ListView</code>来实现，新版React Native推荐我们使用FlatList来实现列表，那么为什么推荐使用FlatList列表呢？接下来就让我从FlatList的由来说起：</p><h2 id="FlatList的由来？"><a href="#FlatList的由来？" class="headerlink" title="# FlatList的由来？"></a># FlatList的由来？</h2><p>在React Native0.43版本中引入了<code>FlatList</code>,<code>SectionList</code>与<code>VirtualizedList</code>，其中<code>VirtualizedList</code>是FlatList 与 SectionList 的底层实现。</p><p><em>为什么要设计一个FlatList?</em></p><p>经常使用ListView的同学都知道： ListView的性能是比较差的，尤其是当有大量的数据需要展示的时候，ListView对内存的占用是相当可观的、丢帧卡顿那是常有的事。</p><p><em>为什么ListView对于大数据量的情况下性能会很差呢？</em></p><p>深入ListView的原理会发现，ListView对列表中的Item是全量渲染的，并且没有复用机制，这就难以避免当让ListView渲染大数据量的时候会发生以下两个问题：</p><ul><li>第一次打开与切换Tab时会出现卡顿或白屏的情况：这是因为ListView对所有的Item都是全量渲染的，比如：ListView中有100条Item，只有等这100条Item都渲染完成，ListView中的内容才会展示，这就难以避免卡顿白屏的问题；</li><li>滑动列表时会出现卡顿与不跟手：当因ListView中展示了大量数据的时候，滑动列表你会发现没有少量数据的时候的跟手与流畅，这是因为ListView为了渲染大量数据需要大量的内存和计算，这对手机资源是一个很大的消耗，尤其是在一些低端机上甚至会出现OOM；</li></ul><p>ListView的这种性能问题一直困扰着React Native开发者。有能力的公司、团队都纷纷对ListView做优化，封装自己的列表组件，然对性能的提升并不大，所以现在急需一个高性能的列表组件，于是便有了设计FlatList的构想；</p><p><em>FlatList特性</em></p><p>FlatList是基于VirtualizedList的，要说FlatList的特性还要从VirtualizedList说起：</p><p>##VirtualizedList</p><p>VirtualizedList 是FlatList 与 SectionList 的底层实现。Vritualization 通过维护一个有限的渲染窗口（其中包含可见的元素），并将渲染窗口之外的元素全部用合适的定长空白空间代替的方式，极大的改善了内存消耗以及在有大量数据情况下的使用性能。这个渲染窗口能响应滚动行为。当一个元素离可视区太远时，它就有一个较低优先级；否则就获得一个较高的优先级。渲染窗口通过这种方式逐步渲染其中的元素（在进行了任何交互之后），以尽量减少出现空白区域的可能性。<img src="https://www.devio.org/img/teach/flatlist/render-window.jpg" alt="render-window"></p><h3 id="特性"><a href="#特性" class="headerlink" title="#特性"></a>#特性</h3><p>VirtualizedList有以下特性：</p><ul><li>支持滚动加载(具体可以借助onEndReached的回调，做数据动态加载)；</li><li>支持下拉刷新(借助onRefresh / refreshing属性实现)；</li><li>支持可配置的可见性（VPV）回调（借助onViewableItemsChanged / viewabilityConfig实现）</li><li>滑动方向增加对Horizontal(水平)方向的支持；</li><li>更加智能的Item以及section separators支持；</li><li>支持Multi-column(借助numColumns属性实现)；</li><li>添加scrollToEnd, scrollToIndex, 和 scrollToItem方法的支持；</li><li>对 Flow更加友好；</li></ul><h3 id="性能"><a href="#性能" class="headerlink" title="#性能"></a>#性能</h3><p>VirtualizedList除了简化API之外，新的列表组件还具有显着的性能增强，主要的是对于任意数量的行(Item)的增加不会带着内存的增加。 它主要是通过虚拟元素也就是在渲染窗口之外的元素将会被从组件结构上卸载以达到回收内存目的。这样会带来一个问题，即内部组件状态不会被保留，因此请确保你跟踪组件本身以外的任何重要状态，例如， 在Relay或Redux或Flux store。</p><p>限制渲染窗口还可以减少React和本地平台的工作量，例如View遍历。 即使你渲染了最后的一百万个元素，用这些新的列表也不需要渲染所有的元素来完成遍历。比如：你可以使用scrollToIndex跳至中间位置，而无需过多渲染。</p><p>另外VirtualizedList还对调度进行了一些改进，这对应用程序的响应很有帮助。 在任何手势或动画或其他交互完成后，呈现在窗口边缘的Item不会被频繁的渲染，并且渲染优先级比较低。</p><h3 id="高级使用"><a href="#高级使用" class="headerlink" title="#高级使用"></a>#高级使用</h3><ul><li>与ListView不同的是，渲染窗口中的所有Item在任何props改变时都会重新渲染，这在通常情况下是比较好的，因为渲染窗口的Item数量是不变的，但是如果Item比较复杂的话，你因该应确保遵循React最佳性能实践，并在适当情况下使用React.PureComponent和/或shouldComponentUpdate来限制你的组件以及子组件的渲染次数，减少不必要的渲染以及递归渲染等。</li><li>如果你不需要渲染就知道内容的高度的话，可以通过getItemLayout 属性来改善用户体验，这使得通过例如滚动到具体Item更平滑。比如使用 scrollToIndex滚动到指定的Item。</li><li>如果你有另一种数据类型比如immutable的list, 那么使用<code>VirtualizedList</code>是个不错的选择. 它提供一个getItem属性来让你为任何给定的index返回item数据。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="#注意事项"></a>#注意事项</h3><ul><li>当某行滑出渲染区域之外后，其内部状态将不会保留。请确保你在行组件以外的地方保留了数据。</li><li>本组件继承自PureComponent而非通常的Component，这意味着如果其props在浅比较中是相等的，则不会重新渲染。所以请先检查你的renderItem函数所依赖的props数据（包括data属性以及可能用到的父组件的state），如果是一个引用类型（Object或者数组都是引用类型），则需要先修改其引用地址（比如先复制到一个新的Object或者数组中），然后再修改其值，否则界面很可能不会刷新。（译注：这一段不了解的朋友建议先学习下js中的基本类型和引用类型。）</li><li>为了优化内存占用同时保持滑动的流畅，列表内容会在屏幕外异步绘制。这意味着如果用户滑动的速度超过渲染的速度，则会先看到空白的内容。这是为了优化不得不作出的妥协，而我们也在设法持续改进。</li><li>默认情况下每行都需要提供一个不重复的key属性。你也可以提供一个keyExtractor函数来生成key。</li><li>另外如果你有一些特殊的需求或用例，你也通过调整一些参数来实现。 例如，你可以使用windowSize来平衡内存使用情况与用户体验，使用maxToRenderPerBatch调整填充率与响应度，使用onEndReachedThreshold以控制何时发生滚动加载等等。</li></ul><h3 id="React-Native列表的未来规划"><a href="#React-Native列表的未来规划" class="headerlink" title="#React Native列表的未来规划"></a>#React Native列表的未来规划</h3><ul><li>完成现有的迁移（最终弃用ListView）。</li><li>实现一些看到或听到的好的功能。</li><li>粘滞头部支持。</li><li>更多的性能优化。</li><li>支持具有状态的功能Item组件。</li></ul><p>了解完<code>VirtualizedList</code>之后，接下来就让我们来认识一下FlatList的一些特性吧：</p><h2 id="FlatList的特性"><a href="#FlatList的特性" class="headerlink" title="#FlatList的特性"></a>#FlatList的特性</h2><p>高性能的且使用简单的列表组件，支持一些特性：</p><ul><li>完全跨平台；</li><li>支持水平布局模式；</li><li>行组件显示或隐藏时可配置回调事件；</li><li>支持单独的头部组件；</li><li>支持单独的尾部组件；</li><li>支持自定义行间分隔线；</li><li>支持下拉刷新；</li><li>支持上拉加载；</li><li>支持跳转到指定行（ScrollToIndex）；</li></ul><p>如果需要分组/类/区（section）的功能，请使用<code>&lt;SectionList&gt;</code>。</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="#简单使用"></a>#简单使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FlatList</span><br><span class="line">  data=&#123;[&#123;<span class="attr">key</span>: <span class="string">'a'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'b'</span>&#125;]&#125;</span><br><span class="line">  renderItem=&#123;(&#123;item&#125;) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item.key&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="#注意事项"></a>#注意事项</h3><p>FlatList组件实质是基于<code>&lt;VirtualizedList&gt;</code>组件的封装，因此除了<code>&lt;VirtualizedList&gt;</code>需要注意的事项之外还有下面这些需要注意的事项：</p><ul><li><code>removeClippedSubviews</code>属性目前是不必要的，而且可能会引起问题。如果你在某些场景碰到内容不渲染的情况（比如使用LayoutAnimation时），尝试设置removeClippedSubviews={false}。我们可能会在将来的版本中修改此属性的默认值。</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="#属性"></a>#属性</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">data:</span> ?Array<span class="params">&lt;ItemT&gt;</span></span><br></pre></td></tr></table></figure><p>为了简化起见，data属性目前只支持普通数组。如果需要使用其他特殊数据结构，例如immutable数组，请直接使用更底层的VirtualizedList组件。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">renderItem:</span> (<span class="string">info:</span> &#123;<span class="string">item:</span> ItemT, <span class="string">index:</span> number&#125;) =&gt; ?React.Element&lt;any&gt;</span><br></pre></td></tr></table></figure><p>根据行数据data渲染每一行的组件。典型用法：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">_renderItem = (</span><span class="template-variable">&#123;item&#125;</span><span class="xml">) =&gt; ( <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=</span></span><span class="template-variable">&#123;() =&gt; this._onPress(item)&#125;</span><span class="xml"><span class="tag">&gt;</span> <span class="tag">&lt;<span class="name">Text</span>&gt;</span></span><span class="template-variable">&#123;item.title&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span> <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span> ); ... <span class="tag">&lt;<span class="name">FlatList</span> <span class="attr">data</span>=</span></span><span class="template-variable">&#123;[&#123;title: 'Title Text', key: 'item1'&#125;</span><span class="xml"><span class="tag">]&#125; <span class="attr">renderItem</span>=</span></span><span class="template-variable">&#123;this._renderItem&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>除data外还有第二个参数index可供使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onRefresh?: ?<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>如果设置了此选项，则会在列表头部添加一个标准的RefreshControl控件，以便实现“下拉刷新”的功能。同时你需要正确设置refreshing属性。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refreshing?: ?<span class="built_in">boolean</span></span><br></pre></td></tr></table></figure><p>在等待加载新数据时将此属性设为true，列表就会显示出一个正在加载的符号。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">horizontal?: ?<span class="built_in">boolean</span></span><br></pre></td></tr></table></figure><p>设置为true则变为水平布局模式。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initialNumToRender: <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>指定一开始渲染的元素数量，最好刚刚够填满一个屏幕，这样保证了用最短的时间给用户呈现可见的内容。注意这第一批次渲染的元素不会在滑动过程中被卸载，这样是为了保证用户执行返回顶部的操作时，不需要重新渲染首批元素。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">keyExtractor</span>: <span class="function"><span class="params">(item: ItemT, index: number)</span> =&gt;</span> <span class="built_in">string</span></span><br></pre></td></tr></table></figure><p>此函数用于为给定的item生成一个不重复的key。Key的作用是使React能够区分同类元素的不同个体，以便在刷新时能够确定其变化的位置，减少重新渲染的开销。若不指定此函数，则默认抽取item.key作为key值。若item.key也不存在，则使用数组下标。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ItemSeparatorComponent?: </span>?ReactClass&lt;any&gt;</span><br></pre></td></tr></table></figure><p>行与行之间的分隔线组件。不会出现在第一行之前和最后一行之后。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListFooterComponent?: ?ReactClass<span class="tag">&lt;<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过它设置尾部组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListHeaderComponent?: ?ReactClass<span class="tag">&lt;<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过它设置头部组件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">columnWrapperStyle?: StyleObj</span><br></pre></td></tr></table></figure><p>如果设置了多列布局（即将numColumns值设为大于1的整数），则可以额外指定此样式作用在每行容器上。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extraData?: <span class="built_in">any</span></span><br></pre></td></tr></table></figure><p>如果有除data以外的数据用在列表中（不论是用在renderItem还是Header或者Footer中），请在此属性中指定。同时此数据在修改时也需要先修改其引用地址（比如先复制到一个新的Object或者数组中），然后再修改其值，否则界面很可能不会刷新。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getItem?:</span><br></pre></td></tr></table></figure><p>获取指定的Item；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getItemCount?:</span><br></pre></td></tr></table></figure><p>用于获取总共有多少Item；</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getItemLayout?: (dat<span class="variable">a:</span> ?Array<span class="symbol">&lt;ItemT&gt;</span>, <span class="built_in">index</span>: <span class="keyword">number</span>) =&gt; &#123;length: <span class="keyword">number</span>, offse<span class="variable">t:</span> <span class="keyword">number</span>, <span class="built_in">index</span>: <span class="keyword">number</span>&#125;</span><br></pre></td></tr></table></figure><p>对于元素较多的列表（几百行）来说，添加<code>getItemLayout</code>可以极大地提高性能。注意如果你指定了<code>ItemSeparatorComponent</code>，请把分隔线的尺寸也考虑到 offset 的计算之中。</p><p>getItemLayout`是一个可选的优化，用于避免动态测量内容尺寸的开销，不过前提是你可以提前知道内容的高度。如果你的行高是固定的，getItemLayout用起来就既高效又简单，类似下面这样：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getItemLayout=&#123;(data, <span class="keyword">index</span>) =&gt; ( &#123;<span class="built_in">length</span>: 行高, <span class="keyword">offset</span>: 行高 * <span class="keyword">index</span>, <span class="keyword">index</span>&#125; )&#125;</span><br></pre></td></tr></table></figure><p>注意如果你指定了SeparatorComponent，请把分隔线的尺寸也考虑到offset的计算之中。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">legacyImplementation?: ?<span class="built_in">boolean</span></span><br></pre></td></tr></table></figure><p>设置为true则使用旧的ListView的实现。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numColumn<span class="variable">s:</span> <span class="keyword">number</span></span><br></pre></td></tr></table></figure><p>多列布局只能在非水平模式下使用，即必须是horizontal={false}。此时组件内元素会从左到右从上到下按Z字形排列，类似启用了flexWrap的布局。组件内元素必须是等高的——暂时还无法支持瀑布流布局。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onEndReached?: ?(info: &#123;<span class="string">distanceFromEnd:</span> number&#125;) =&gt; <span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onEndReachedThreshold?: ?<span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>决定当距离内容最底部还有多远时触发onEndReached回调。注意此参数是一个比值而非像素单位。比如，0.5表示距离内容最底部的距离为当前列表可见长度的一半时触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onViewableItemsChanged?: ?<span class="function">(<span class="params">info: &#123;viewableItems: <span class="built_in">Array</span>&lt;ViewToken&gt;, changed: <span class="built_in">Array</span>&lt;ViewToken&gt;&#125;</span>) =&gt;</span> <span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>在可见行元素变化时调用。可见范围和变化频率等参数的配置请设置viewabilityconfig属性</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewabilityConfig?: ViewabilityConfig</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="#方法"></a>#方法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">scrollToEnd</span><span class="params">(params?: object)</span></span></span><br></pre></td></tr></table></figure><p>滚动到底部。如果不设置getItemLayout属性的话，可能会比较卡。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">scrollToIndex</span><span class="params">(params: object)</span></span></span><br></pre></td></tr></table></figure><p>滚动到指定位置，如果不设置getItemLayout属性的话，可能会比较卡。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrollToItem(params: object)</span><br></pre></td></tr></table></figure><p>需要线性扫描数据 - 如果可能，请使用scrollToIndex。如果不设置getItemLayout属性的话只能滚动到当前渲染窗口的某个位置。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">scrollToOffset</span><span class="params">(params: object)</span></span></span><br></pre></td></tr></table></figure><p>滚动到列表中的特定内容像素偏移量。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">recordInteraction</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="复杂使用"><a href="#复杂使用" class="headerlink" title="#复杂使用"></a>#复杂使用</h3><p>下面是一个较复杂的例子，其中演示了如何利用PureComponent来进一步优化性能和减少bug产生的可能：</p><ul><li>对于<code>MyListItem</code>组件来说，其<code>onPressItem</code>属性使用箭头函数而非bind的方式进行绑定，使其不会在每次列表重新render时生成一个新的函数，从而保证了props的不变性（当然前提是 id、selected和title也没变），不会触发自身无谓的重新render。换句话说，如果你是用bind来绑定onPressItem，每次都会生成一个新的函数，导致props在===比较时返回false，从而触发自身的一次不必要的重新render。</li><li>给FlatList指定extraData={this.state}属性，是为了保证state.selected变化时，能够正确触发FlatList的更新。如果不指定此属性，则FlatList不会触发更新，因为它是一个PureComponent，其props在===比较中没有变化则不会触发更新。</li><li>keyExtractor属性指定使用id作为列表每一项的key。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  _onPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onPressItem(<span class="keyword">this</span>.props.id);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    retuReact Native (</span><br><span class="line">      &lt;SomeOtherWidget</span><br><span class="line">        &#123;...this.props&#125;</span><br><span class="line">        onPress=&#123;<span class="keyword">this</span>._onPress&#125;</span><br><span class="line">      /&gt;     )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  state = &#123;<span class="attr">selected</span>: (<span class="keyword">new</span> <span class="built_in">Map</span>(): <span class="built_in">Map</span>&lt;string, boolean&gt;)&#125;;</span><br><span class="line"></span><br><span class="line">  _keyExtractor = <span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id;</span><br><span class="line"></span><br><span class="line">  _onPressItem = <span class="function">(<span class="params">id: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// updater functions are preferred for transactional updates</span></span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// copy the map rather than modifying state.</span></span><br><span class="line">      <span class="keyword">const</span> selected = <span class="keyword">new</span> <span class="built_in">Map</span>(state.selected);</span><br><span class="line">      selected.set(id, !selected.get(id)); <span class="comment">// toggle</span></span><br><span class="line">      retuReact Native &#123;selected&#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _renderItem = <span class="function">(<span class="params">&#123;item&#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;MyListItem</span><br><span class="line">      id=&#123;item.id&#125;</span><br><span class="line">      onPressItem=&#123;<span class="keyword">this</span>._onPressItem&#125;</span><br><span class="line">      selected=&#123;!!<span class="keyword">this</span>.state.selected.get(item.id)&#125;</span><br><span class="line">      title=&#123;item.title&#125;</span><br><span class="line">    /&gt;   );</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    retuReact Native (</span><br><span class="line">      &lt;FlatList</span><br><span class="line">        data=&#123;<span class="keyword">this</span>.props.data&#125;</span><br><span class="line">        extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">        keyExtractor=&#123;<span class="keyword">this</span>._keyExtractor&#125;</span><br><span class="line">        renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">      /&gt;     );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例：上拉加载更多，下拉刷新，自定义刷新组件"><a href="#实例：上拉加载更多，下拉刷新，自定义刷新组件" class="headerlink" title="#实例：上拉加载更多，下拉刷新，自定义刷新组件"></a>#实例：上拉加载更多，下拉刷新，自定义刷新组件</h3><p><img src="https://www.devio.org/img/teach/flatlist/FlatListDemo.gif" alt="FlatListDemo"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CITY_NAMES = [<span class="string">'北京'</span>, <span class="string">'上海'</span>, <span class="string">'广州'</span>, <span class="string">'深圳'</span>, <span class="string">'杭州'</span>, <span class="string">'苏州'</span>, <span class="string">'成都'</span>, <span class="string">'武汉'</span>, <span class="string">'郑州'</span>, <span class="string">'洛阳'</span>, <span class="string">'厦门'</span>, <span class="string">'青岛'</span>, <span class="string">'拉萨'</span>];</span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FlatListDemo</span> <span class="title">extends</span> <span class="title">Component</span>&lt;<span class="type">Props</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            dataArray: CITY_NAMES,</span><br><span class="line">            isLoading: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _renderItem(<span class="keyword">data</span>) &#123;</span><br><span class="line">        retuReact Native &lt;View style=&#123;styles.item&#125;&gt;</span><br><span class="line">            &lt;Text style=&#123;styles.text&#125;&gt;&#123;<span class="keyword">data</span>.item&#125;&lt;/Text&gt;         &lt;/View&gt;     &#125;</span><br><span class="line"></span><br><span class="line">    loadData(refresh) &#123;</span><br><span class="line">        <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                isLoading: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            let dataArray = [];</span><br><span class="line">            <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">                <span class="keyword">for</span> (let i = <span class="keyword">this</span>.state.dataArray.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    dataArray.push(<span class="keyword">this</span>.state.dataArray[i])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataArray = <span class="keyword">this</span>.state.dataArray.concat(CITY_NAMES);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                dataArray: dataArray,</span><br><span class="line">                isLoading: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    genIndicator() &#123;</span><br><span class="line">        retuReact Native &lt;View style=&#123;styles.indicatorContainer&#125;&gt;</span><br><span class="line">            &lt;ActivityIndicator</span><br><span class="line">                style=&#123;styles.indicator&#125;</span><br><span class="line">                size=<span class="string">'large'</span></span><br><span class="line">                animating=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">            /&gt;             &lt;Text&gt;正在加载更多&lt;/Text&gt;         &lt;/View&gt;     &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        retuReact Native (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;FlatList</span><br><span class="line">                    <span class="keyword">data</span>=&#123;<span class="keyword">this</span>.state.dataArray&#125;</span><br><span class="line">                    renderItem=&#123;(<span class="keyword">data</span> =&gt; <span class="keyword">this</span>._renderItem(<span class="keyword">data</span>))&#125;</span><br><span class="line">                    <span class="comment">// refreshing=&#123;this.state.isLoading&#125;</span></span><br><span class="line">                    <span class="comment">// onRefresh=&#123;() =&gt; &#123;</span></span><br><span class="line">                    <span class="comment">// this.loadData();</span></span><br><span class="line">                    <span class="comment">// &#125;&#125;</span></span><br><span class="line">                    refreshControl=&#123;</span><br><span class="line">                        &lt;RefreshControl</span><br><span class="line">                            title=<span class="string">'Loading...'</span></span><br><span class="line">                            colors=&#123;[<span class="string">'red'</span>]&#125;</span><br><span class="line">                            refreshing=&#123;<span class="keyword">this</span>.state.isLoading&#125;</span><br><span class="line">                            onRefresh=&#123;() =&gt; <span class="keyword">this</span>.loadData(<span class="literal">true</span>)&#125;</span><br><span class="line">                            tintColor=&#123;<span class="string">'orange'</span>&#125;</span><br><span class="line">                        /&gt;                     &#125;</span><br><span class="line">                    ListFooterComponent=&#123;() =&gt; <span class="keyword">this</span>.genIndicator()&#125;</span><br><span class="line">                    onEndReached=&#123;() =&gt; &#123;</span><br><span class="line">                        <span class="keyword">this</span>.loadData()</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;/View&gt;         );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    item: &#123;</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        backgroundColor: <span class="string">'#169'</span>,</span><br><span class="line">        marginLeft: <span class="number">15</span>,</span><br><span class="line">        marginRight: <span class="number">15</span>,</span><br><span class="line">        marginBottom: <span class="number">15</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        justifyContent: <span class="string">'center'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    text: &#123;</span><br><span class="line">        color: <span class="string">'white'</span>,</span><br><span class="line">        fontSize: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    indicatorContainer: &#123;</span><br><span class="line">        alignItems: <span class="string">"center"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    indicator: &#123;</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">        margin: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native之Redux</title>
      <link href="/2019/11/23/React-Native-Redux/"/>
      <url>/2019/11/23/React-Native-Redux/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Redux？"><a href="#什么是Redux？" class="headerlink" title="#什么是Redux？"></a>#什么是Redux？</h2><p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理，可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。</p><p><img src="https://www.devio.org/io/githubapp/redux-flow.png" alt="render-window"></p><h3 id="Redux工作流程："><a href="#Redux工作流程：" class="headerlink" title="Redux工作流程："></a>Redux工作流程：</h3><ol><li>用户（操作View）发出Action，发出方式就用到了dispatch方法；</li><li>然后，Store自动调用Reducer，并且传入两个参数(当前State和收到的Action)，Reducer会返回新的State，如果有Middleware，Store会将当前State和收到的Action传递给Middleware，Middleware会调用Reducer 然后返回新的State；</li><li>State一旦有变化，Store就会调用监听函数，来更新View；</li></ol><p>到这儿为止，一次用户交互流程结束。可以看到，在整个流程中数据都是单向流动的。</p><h3 id="Redux和Flux的对比"><a href="#Redux和Flux的对比" class="headerlink" title="Redux和Flux的对比"></a>Redux和Flux的对比</h3><p>Redux是Flux思想的一种实现，同时又在其基础上做了改进。<strong>Redux秉承了Flux单向数据流、Store是唯一的数据源的思想。</strong></p><ul><li>Redux中没有Dispatcher：它使用Store的Store.dispatch()方法来把action传给Store，由于所有的action处理都会经过这个Store.dispatch()方法，所以在Redux中很容易实现Middleware机制。Middleware可以让你在reducer执行前与执行后进行拦截并插入代码，来达到操作action和Store的目的，这样一来就很容易实现灵活的日志打印、错误收集、API请求、路由等操作。</li><li>Redux只有一个Store：Flux中允许有多个Store，但是Redux中只允许有一个，相较于多个Store的Flux，一个Store更加清晰，并易于管理；</li></ul><p><code>Redux和Flux的最大不同是Redux没有 Dispatcher 且不支持多个 store。Redux只有一个单一的 store 和一个根级的 reduce 函数（reducer)，随着应用不断变大，我们需要将根级的 reducer 拆成多个小的 reducers，分别独立地操作 state 树的不同部分，而不是添加新的 stores。</code></p><h3 id="Redux优点"><a href="#Redux优点" class="headerlink" title="Redux优点"></a>Redux优点</h3><ul><li>可预测： 始终有一个唯一的准确的数据源（single source of truth）就是store，通过actions和reducers来保证整个应用状态同步，做到绝不混乱</li><li>易维护： 具备可预测的结果和严格的组织结构让代码更容易维护</li><li>易测试： 编写可测试代码的首要准则是编写可以仅做一件事并且独立的小函数（single responsibility principle），Redux的代码几乎全部都是这样的函数：短小·纯粹·分离</li></ul><h3 id="为什么要使用Redux"><a href="#为什么要使用Redux" class="headerlink" title="为什么要使用Redux"></a>为什么要使用Redux</h3><p>随着 JavaScript 应用越来越大，越来越复杂，我们需要管理的state变得越来越多。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p><p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得非常复杂。</p><p>虽然React 试图在视图层禁止异步和直接操作 DOM 来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux就是为了帮你解决这个问题。</p><h3 id="Redux的三个原则"><a href="#Redux的三个原则" class="headerlink" title="Redux的三个原则"></a>Redux的三个原则</h3><ul><li>单一数据源：整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中；</li><li>State 是只读的：唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象；</li><li>使用纯函数来执行修改：为了描述 action 如何改变 state tree ，你需要编写 reducers；</li></ul><h3 id="Redux有那几部分构成？"><a href="#Redux有那几部分构成？" class="headerlink" title="Redux有那几部分构成？"></a>Redux有那几部分构成？</h3><ul><li>action：action就是一个描述发生什么的对象；</li><li>reducer：形式为 (state, action) =&gt; state 的纯函数，功能是根据action 修改state 将其转变成下一个 state；</li><li>store：用于存储state，你可以把它看成一个容器，整个应用只能有一个store。</li></ul><p>Redux应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中。 惟一改变 state 的办法是触发 action，action就是一个描述发生什么的对象。 为了描述 action 如何改变 state 树，你需要编写 reducers。</p><p><code>先看一个redux的简单使用例子：</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Redux reducer</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</span></span><br><span class="line"><span class="comment"> * 描述了 action 如何把 state 转变成下一个 state。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * state 的形式取决于你，可以是基本类型、数组、对象,</span></span><br><span class="line"><span class="comment"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</span></span><br><span class="line"><span class="comment"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">    <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'DECREMENT'</span>: </span><br><span class="line">    <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Redux store 来存放应用的状态。</span></span><br><span class="line"><span class="comment">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以手动订阅更新，也可以事件绑定到视图层。</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></span><br><span class="line"><span class="comment">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'DECREMENT'</span> &#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>以上代码便是一个redux的最简单的使用，接下来我们来分别介绍一下redux的三大组成部分：action、reducer以及store。</p><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>Action 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源，也就是说要改变store中的state就需要触发一个action。</p><p>Action 本质上一个普通的JavaScript对象。action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作，除了 type 字段外，action 对象的结构完全由你自己决定。多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ADD_TODO, REMOVE_TODO &#125; <span class="keyword">from</span> <span class="string">'../actionTypes'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//action</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">type</span>: ADD_TODO,</span><br><span class="line">  <span class="built_in">text</span>: <span class="string">'Build my first Redux app'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>提示：使用单独的模块或文件来定义 action type 常量并不是必须的，甚至根本不需要定义。对于小应用来说，使用字符串做 action type 更方便些。不过，在大型应用中把它们显式地定义成常量还是利大于弊的。</code></p><h4 id="Action创建函数"><a href="#Action创建函数" class="headerlink" title="Action创建函数"></a>Action创建函数</h4><p>Action 创建函数 就是生成 action 的方法。<strong>“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分</strong>。</p><p>在 Redux 中的 action 创建函数只是简单的返回一个 action:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">addTodo</span>(text) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">&#123;</span></span><br><span class="line">    <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做将使 action 创建函数更容易被移植和测试。</p><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>reducer是根据action 修改state 将其转变成下一个 state，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(previousState, action) =&gt; newState</span><br></pre></td></tr></table></figure><p>保持 reducer 纯净非常重要。永远不要在 reducer 里做这些操作：</p><ul><li>修改传入参数；</li><li>执行有副作用的操作，如 API 请求和路由跳转；</li><li>调用非纯函数，如 Date.now() 或 Math.random()。</li></ul><p><code>提示：reducer 是纯函数。它仅仅用于计算下一个 state。它应该是完全可预测的：多次传入相同的输入必须产生相同的输出。它不应做有副作用的操作，如 API 调用或路由跳转。这些应该在 dispatch action 前发生。</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不要修改 state。 使用Object.assign()新建了一个副本。不能这样使用Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用{ …state,visibilityFilter: action.filter }达到相同的目的。</li><li>在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。</li></ul><h3 id="拆分与合并Reducer"><a href="#拆分与合并Reducer" class="headerlink" title="拆分与合并Reducer"></a>拆分与合并Reducer</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function <span class="keyword">on</span>Action(<span class="keyword">state</span> = <span class="keyword">default</span>State, action) &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case Types.THEME_CHANGE://主题</span><br><span class="line">            return &#123;</span><br><span class="line">                ...<span class="keyword">state</span>,</span><br><span class="line">                theme: action.theme,</span><br><span class="line">            &#125;;</span><br><span class="line">        case Types.SHOW_THEME_VIEW://主题</span><br><span class="line">            return &#123;</span><br><span class="line">                ...<span class="keyword">state</span>,</span><br><span class="line">                customThemeViewVisible: action.customThemeViewVisible,</span><br><span class="line">            &#125;;</span><br><span class="line">        case Types.SORT_LANGUAGE://排序</span><br><span class="line">            return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123;</span><br><span class="line">                checkedArray: action.checkedArray,</span><br><span class="line">            &#125;);</span><br><span class="line">        case Types.REFRESH_ABOUT://关于</span><br><span class="line">            return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123;</span><br><span class="line">                [action.flag]: &#123;</span><br><span class="line">                    ...<span class="keyword">state</span>[action.flag],</span><br><span class="line">                    projectModels: action.projectModels,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        case Types.ABOUT_SHOW_MORE://关于</span><br><span class="line">            return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123;</span><br><span class="line">                me: &#123;</span><br><span class="line">                    ...<span class="keyword">state</span>.me,</span><br><span class="line">                    [action.menuFlag]: action.menuShow</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            return <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码看起来有些冗长，并且主题、排序、关于的更新看起来是相互独立的，能不能将他们拆到单独的函数或文件里呢，答案是可以的。</p><h4 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主题 theme.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">onTheme</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> Types.THEME_CHANGE:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                theme: action.theme,</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">case</span> Types.SHOW_THEME_VIEW:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                customThemeViewVisible: action.customThemeViewVisible,</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序 sort.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">onSort</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> Types.SORT_LANGUAGE:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">                checkedArray: action.checkedArray,</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关于 about.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">onAbout</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> Types.REFRESH_ABOUT:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">                [action.flag]: &#123;</span><br><span class="line">                    ...state[action.flag],</span><br><span class="line">                    projectModels: action.projectModels,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> Types.ABOUT_SHOW_MORE:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">                me: &#123;</span><br><span class="line">                    ...state.me,</span><br><span class="line">                    [action.menuFlag]: action.menuShow</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们将对主题、排序、关于的操作拆到了单独的函数中并放到了不同的文件里，这样以来各个模块的操作就更加的聚合了，代码看起来也就更加的简洁明了。</p><p><strong>合并reducer</strong></p><p>经过上述的步骤我们将一个大的reducer拆分成了不同的小的reducer，但redux原则是只允许一个根reducer，接下来我们需要将这几个小的reducer聚合到一个跟reducer中。</p><p>这里我们需要用到Redux 提供的 <code>combineReducers(reducers)</code> 。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">'./theme'</span></span><br><span class="line"><span class="keyword">import</span> sort <span class="keyword">from</span> <span class="string">'./sort'</span></span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">'./about'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = combineReducers(&#123;</span><br><span class="line">    theme: theme,</span><br><span class="line">    sort: sort,</span><br><span class="line">    about: about,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index;</span><br></pre></td></tr></table></figure><p><code>combineReducers(reducers)</code> 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。没有任何魔法。正如其他 reducers，如果<code>combineReducers(reducers)</code>中包含的所有 reducers 都没有更改 state，那么也就不会创建一个新的对象。</p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>是存储state的容器，Store 会把两个参数(当前的 state 树和 action)传入 reducer，职责如下。</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state：我们可以在任何地方调用 store.dispatch(action)，包括组件中、XMLHttpRequest 回调中、甚至定时器中；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。</li></ul><p>通过Redux的<code>combineReducers(reducers)</code>来创建一个Store。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(todoApp)</span><br></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="异步Action"><a href="#异步Action" class="headerlink" title="异步Action"></a>异步Action</h4><p>我们上文中所讲的Action都是基于同步实现的，那么对于网络请求数据库加载等应用场景同步Action显然是不适用的，对此我们需要用到异步Action。</p><h5 id="我们可将异步Action简答理解为：在Action中进行异步操作等操作返回后再dispatch一个action。"><a href="#我们可将异步Action简答理解为：在Action中进行异步操作等操作返回后再dispatch一个action。" class="headerlink" title="我们可将异步Action简答理解为：在Action中进行异步操作等操作返回后再dispatch一个action。"></a>我们可将异步Action简答理解为：在Action中进行异步操作等操作返回后再dispatch一个action。</h5><p><em>为了使用异步action我们需要引入</em><code>redux-thunk</code><em>库，</em><code>redux-thunk</code><em>是为Redux提供异步action支持的中间件。</em></p><h3 id="使用redux-thunk"><a href="#使用redux-thunk" class="headerlink" title="使用redux-thunk"></a>使用redux-thunk</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux-thunk</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">let</span> middlewares = [</span><br><span class="line">    thunk</span><br><span class="line">]</span><br><span class="line"><span class="comment">//添加异步中间件redux-thunk</span></span><br><span class="line"><span class="keyword">let</span> createAppStore = applyMiddleware(...middlewares)(createStore)</span><br></pre></td></tr></table></figure><h4 id="创建异步action"><a href="#创建异步action" class="headerlink" title="创建异步action"></a>创建异步action</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">onSearch</span>(<span class="params">inputKey, token, popularKeys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>: Types.SEARCH_REFRESH&#125;);</span><br><span class="line">        fetch(genFetchUrl(inputKey)).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="comment">//如果任务取消，则不做任何处理</span></span><br><span class="line">            <span class="keyword">return</span> checkCancel(token) ? response.json() : <span class="literal">null</span>;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">responseData</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!checkCancel(token, <span class="literal">true</span>)) &#123;<span class="comment">//如果任务取消，则不做任何处理</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!responseData || !responseData.items || responseData.items.length === <span class="number">0</span>) &#123;</span><br><span class="line">                dispatch(&#123;<span class="attr">type</span>: Types.SEARCH_FAIL, <span class="attr">message</span>: inputKey + <span class="string">'什么都没找到'</span>&#125;);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> items = responseData.items;</span><br><span class="line">            getFavoriteKeys(inputKey, dispatch, items, token, popularKeys);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">            dispatch(&#123;<span class="attr">type</span>: Types.SEARCH_FAIL, <span class="attr">error</span>: e&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步数据流"><a href="#异步数据流" class="headerlink" title="异步数据流"></a>异步数据流</h4><p>默认情况下，createStore() 所创建的 Redux store 没有使用 middleware，所以只支持 同步数据流。</p><p>你可以使用 applyMiddleware() 来增强 createStore()。它可以帮助你用简便的方式来描述异步的 action。</p><p>像 redux-thunk 或 redux-promise 这样支持异步的 middleware 都包装了 store 的 dispatch() 方法，以此来让你 dispatch 一些除了 action 以外的其他内容，例如：函数或者 Promise。你所使用的任何 middleware 都可以以自己的方式解析你 dispatch 的任何内容，并继续传递 actions 给下一个 middleware。比如，支持 Promise 的 middleware 能够拦截 Promise，然后为每个 Promise 异步地 dispatch 一对 begin/end actions。</p><p><em>当 middleware 链中的最后一个 middleware 开始 dispatch action 时，这个 action 必须是一个普通对象；</em></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>Redux 应用只有一个单一的 store。当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store；</li><li>redux一个特点是：状态共享，所有的状态都放在一个store中，任何component都可以订阅store中的数据；</li><li>并不是所有的state都适合放在store中，这样会让store变得非常庞大，如某个状态只被一个组件使用，不存在状态共享，可以不放在store中；</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Webpack多页</title>
      <link href="/2019/11/05/React-Webpack%E5%A4%9A%E9%A1%B5/"/>
      <url>/2019/11/05/React-Webpack%E5%A4%9A%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>react- scripts 中的一系列技术栈配置都 在使用<strong>create-react-app</strong>构建项目时并未开放，需要使用以下命令弹射到应用的顶层以供个性化，不过特别注意，整个过程是不可逆的 ，eject后就可以看见熟悉的webpack配置目录config。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure><p>webpack 是什么？归根到底，webpack 就是一个.js 配置文件，你的架构好或坏 都体现在webpack.config.js这个配置里。</p><p>webpack配置中最重要也是必选的两项是入口（Entry）和出口（Output）。入口的作用是告诉webpack从哪里开始寻找依赖，并且编译，出口则用来配置编译后的文件储存位置和文件名。</p><p>通过观察发现 entry 处 只配置了一个入口 paths.appIndexJs ，点进去可以看见指向index.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">entry: [</span><br><span class="line">  <span class="comment">// Include an alternative client for WebpackDevServer. A client's job is to</span></span><br><span class="line">  <span class="comment">// connect to WebpackDevServer by a socket and get notified about changes.</span></span><br><span class="line">  <span class="comment">// When you save a file, the client will either apply hot updates (in case</span></span><br><span class="line">  <span class="comment">// of CSS changes), or refresh the page (in case of JS changes). When you</span></span><br><span class="line">  <span class="comment">// make a syntax error, this client will display a syntax error overlay.</span></span><br><span class="line">  <span class="comment">// Note: instead of the default WebpackDevServer client, we use a custom one</span></span><br><span class="line">  <span class="comment">// to bring better experience for Create React App users. You can replace</span></span><br><span class="line">  <span class="comment">// the line below with these two lines if you prefer the stock client:</span></span><br><span class="line">  <span class="comment">// require.resolve('webpack-dev-server/client') + '?/',</span></span><br><span class="line">  <span class="comment">// require.resolve('webpack/hot/dev-server'),</span></span><br><span class="line">  isEnvDevelopment &amp;&amp;</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'react-dev-utils/webpackHotDevClient'</span>),</span><br><span class="line">  <span class="comment">// Finally, this is your app's code:</span></span><br><span class="line">  paths.appIndexJs,</span><br><span class="line">  <span class="comment">// We include the app code last so that if there is a runtime error during</span></span><br><span class="line">  <span class="comment">// initialization, it doesn't blow up the WebpackDevServer client, and</span></span><br><span class="line">  <span class="comment">// changing JS code would still trigger a refresh.</span></span><br><span class="line">].filter(<span class="built_in">Boolean</span>),</span><br></pre></td></tr></table></figure><h5 id="webpack官方文档有介绍-入口起点-entry-points-的多种书写形式如下："><a href="#webpack官方文档有介绍-入口起点-entry-points-的多种书写形式如下：" class="headerlink" title="webpack官方文档有介绍 入口起点(entry points)的多种书写形式如下："></a><a href="https://www.webpackjs.com/concepts/entry-points/#单个入口-简写-语法" target="_blank" rel="noopener">webpack官方文档有介绍</a> 入口起点(entry points)的多种书写形式如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">'./path/to/my/entry/file.js'</span>  <span class="comment">//单个入口（简写）语法</span></span><br><span class="line">entry: &#123;</span><br><span class="line">    main: <span class="string">'./path/to/my/entry/file.js'</span>  <span class="comment">//对象语法</span></span><br><span class="line">&#125;</span><br><span class="line"> entry: &#123;  <span class="comment">//多页面应用程序</span></span><br><span class="line">    pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">    pageTwo: <span class="string">'./src/pageTwo/index.js'</span>,</span><br><span class="line">    pageThree: <span class="string">'./src/pageThree/index.js'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里可以看出将 单个入口 改写为 对象语法 的多页面应用程序就可以达到多入口的目的。</p><p>工程化 可以用到 globby 的帮助 搜寻 src 目录下的多页面应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 globby 模块</span></span><br><span class="line"><span class="keyword">const</span> globby = <span class="built_in">require</span>(<span class="string">'globby'</span>);</span><br><span class="line"><span class="comment">// 入口文件路径</span></span><br><span class="line"><span class="keyword">const</span> entriesPath = globby.sync([resolveApp(<span class="string">'src'</span>) + <span class="string">'/*/index.tsx'</span>]);</span><br></pre></td></tr></table></figure><p>通过遍历 globby 获得的目录数组 获得 多页面 路径入口文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEntries</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> entries = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> files = paths.entriesPath;</span><br><span class="line">  files.forEach(<span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tmpArr = filePath.split(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">let</span> name = tmpArr[tmpArr.length - <span class="number">2</span>];</span><br><span class="line">    entries[name] = [</span><br><span class="line">      filePath,</span><br><span class="line">    ];</span><br><span class="line">    isEnvDevelopment &amp;&amp; entries[name].push(<span class="built_in">require</span>.resolve(<span class="string">'react-dev-utils/webpackHotDevClient'</span>)); </span><br><span class="line">    <span class="comment">//这份代码是由react官方的create-react-app提供的热构建插件</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入口-boundle-如何插入对应的-html-中？"><a href="#入口-boundle-如何插入对应的-html-中？" class="headerlink" title="入口 boundle 如何插入对应的 html 中？"></a>入口 boundle 如何插入对应的 html 中？</h5><p>我们通常需要这个插件<code>HtmlWebpackPlugin</code>自动处理，目前代码是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(</span><br><span class="line">  <span class="built_in">Object</span>.assign(</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      template: paths.appHtml,</span><br><span class="line">    &#125;,</span><br><span class="line">    isEnvProduction</span><br><span class="line">      ? &#123;</span><br><span class="line">          minify: &#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">            removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">            useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">            removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">            removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">            keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      : <span class="literal">undefined</span></span><br><span class="line">  )</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>配置 HtmlWebpackPlugin 插件, 指定入口生成对应的 html 文件，有多少个页面就需要 new 多少个 HtmllWebpackPlugin<br>webpack配置多入口后，只是编译出多个入口的JS，同时入口的HTML文件由HtmlWebpackPlugin生成，也需做配置。<br>chunks，指明哪些 webpack入口的JS会被注入到这个HTML页面。如果不配置，则将所有entry的JS文件都注入HTML。<br> filename，指明生成的HTML路径，如果不配置就是build/index.html，需要 配置新的filename，避免与第一个入口的index.html相互覆盖。</p><p>我们已经 通过 globby 的帮助拿到多入口对象 entries，这里可以遍历处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="built_in">Object</span>.keys(entries).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="keyword">new</span> HtmlWebpackPlugin(</span><br><span class="line">      <span class="built_in">Object</span>.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            template: paths.appHtml,</span><br><span class="line">            filename: item + <span class="string">'.html'</span>,</span><br><span class="line">            chunks: [item]</span><br><span class="line">          &#125;,</span><br><span class="line">          isEnvProduction</span><br><span class="line">              ? &#123;</span><br><span class="line">                minify: &#123;</span><br><span class="line">                  removeComments: <span class="literal">true</span>,</span><br><span class="line">                  collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                  removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">                  useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">                  removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">                  removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">                  keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">                  minifyJS: <span class="literal">true</span>,</span><br><span class="line">                  minifyCSS: <span class="literal">true</span>,</span><br><span class="line">                  minifyURLs: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">              : <span class="literal">undefined</span></span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>将 处理完成的 htmlPlugin 放入对应的 plugins，这里可以使用扩展运算符（ spread ）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ...htmlPlugin,</span><br><span class="line">  </span><br><span class="line">      以下代码省略...</span><br></pre></td></tr></table></figure><p>如此能正常的打包出正确的 多页面应用了，但是开发环境会受到静态资源名字没有Hash 而出现白屏，需要将 出口（Output）开发环境静态资源加上 Hash值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">// The build folder.</span></span><br><span class="line">  path: isEnvProduction ? paths.appBuild : <span class="literal">undefined</span>,</span><br><span class="line">  <span class="comment">// Add /* filename */ comments to generated require()s in the output.</span></span><br><span class="line">  pathinfo: isEnvDevelopment,</span><br><span class="line">  <span class="comment">// There will be one main bundle, and one file per asynchronous chunk.</span></span><br><span class="line">  <span class="comment">// In development, it does not produce real files.</span></span><br><span class="line">  filename: isEnvProduction</span><br><span class="line">    ? <span class="string">'static/js/[name].[contenthash:8].js'</span></span><br><span class="line">    : isEnvDevelopment &amp;&amp; <span class="string">'static/js/[name].bundle.js'</span>,</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> remove this when upgrading to webpack 5</span></span><br><span class="line">  futureEmitAssets: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// There are also additional JS chunk files if you use code splitting.</span></span><br><span class="line">  chunkFilename: isEnvProduction</span><br><span class="line">    ? <span class="string">'static/js/[name].[contenthash:8].chunk.js'</span></span><br><span class="line">    : isEnvDevelopment &amp;&amp; <span class="string">'static/js/[name].chunk.js'</span>,</span><br><span class="line">    </span><br><span class="line">    以下代码省略...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native开发之真机调试</title>
      <link href="/2019/10/28/React%20Native%E5%BC%80%E5%8F%91%E4%B9%8B%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>/2019/10/28/React%20Native%E5%BC%80%E5%8F%91%E4%B9%8B%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Ios指定模拟的设备类型"><a href="#Ios指定模拟的设备类型" class="headerlink" title="# Ios指定模拟的设备类型 "></a><font color="#337ab7"># Ios指定模拟的设备类型 </font></h2><p>你可以在终端中运行 xcrun simctl list 來查看具体可用的模拟器名称.<br>启动 react-native run-ios –simulator “iPhone 4s“。</p><p>你可以在终端中运行 xctrace list devices 來查看具体可用的设备名称.<br>启动 react-native run-ios –device “iPhone 4s“。</p><h2 id="AndRoid指定模拟的设备类型"><a href="#AndRoid指定模拟的设备类型" class="headerlink" title="# AndRoid指定模拟的设备类型 "></a><font color="#337ab7"># AndRoid指定模拟的设备类型 </font></h2><p>你可以在终端中运行 adb devices 來查看具体可用的设备名称.<br>启动：react-native run-android –deviceId=”设备ID号”。</p><p>如需查看 AVD 名称的列表，请输入以下命令：emulator -list-avds<br>启动：emulator -avd avd_name</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 使用</title>
      <link href="/2019/10/05/Docker/"/>
      <url>/2019/10/05/Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">Go 语言</a> 并遵从Apache2.0协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h3 id="停止、删除所有的docker容器和镜像"><a href="#停止、删除所有的docker容器和镜像" class="headerlink" title="停止、删除所有的docker容器和镜像"></a>停止、删除所有的docker容器和镜像</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq  <span class="comment">// 列出所有的容器 ID</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)  <span class="comment">// 停止所有的容器</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)  <span class="comment">// 删除所有的容器</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)  <span class="comment">// 删除所有的镜像</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js + jsonwebtoken 实现 token 验证</title>
      <link href="/2019/09/10/Node.js+Token/"/>
      <url>/2019/09/10/Node.js+Token/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-jsonwebtoken"><a href="#安装-jsonwebtoken" class="headerlink" title="安装 jsonwebtoken"></a>安装 jsonwebtoken</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jsonwebtoken</span><br></pre></td></tr></table></figure><h3 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"><span class="keyword">const</span> token = jwt.sign(&#123; key, <span class="attr">exp</span>: <span class="number">30</span>&#125;, <span class="string">'my_secret_key'</span>); <span class="comment">//key 获取 用户相关 变量，‘my_secret_key’ 服务器 私有 变量。exp 过期时间。</span></span><br></pre></td></tr></table></figure><h3 id="执行以下代码即可验证token。"><a href="#执行以下代码即可验证token。" class="headerlink" title="执行以下代码即可验证token。"></a>执行以下代码即可验证token。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">jwt.verify(token, <span class="string">'my_secret_key'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, decoded</span>) </span>&#123; <span class="comment">//jwt解析</span></span><br><span class="line">      <span class="built_in">console</span>.log(err,decoded)     <span class="comment">//获取信息 进行下一步操作</span></span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">if</span> (err.message === <span class="string">"jwt expired"</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123;<span class="attr">success</span>:<span class="literal">false</span>, <span class="attr">msg</span>:<span class="string">'token过期，请重新登录'</span>&#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123;<span class="attr">error</span>: <span class="string">"登录信息有误"</span>&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123;<span class="attr">success</span>:<span class="literal">true</span>, <span class="attr">msg</span>:<span class="string">'token 正确'</span>&#125;);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(decoded)     //获取信息 进行下一步操作</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">//next();</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡 NodeJS～</title>
      <link href="/2019/08/29/Nginx%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2019/08/29/Nginx%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p>负载均衡的目的是为了解决单个节点压力过大，造成Web服务响应过慢，严重的情况下导致服务瘫痪，无法正常提供服务。</p><p>假设 基于 本博客内 Node.js+MySQL 服务已经跑在 如下端口,并配置 Nginx 转发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream ht-server &#123;</span><br><span class="line">    server <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3004</span>;</span><br><span class="line">    server <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3001</span>;</span><br><span class="line">    server <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3002</span>;</span><br><span class="line">    server <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3003</span>;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;#监听端口</span><br><span class="line">    #server_name 192.168.1.30;#域名</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root /usr/local/webserver/nginx/pages;#站点目录</span><br><span class="line"></span><br><span class="line">    location /ht/ &#123;</span><br><span class="line">       proxy_pass http:<span class="comment">//ht-server/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假若有以下 查询用户接口，利用 ab 测试工具 测试 负载均衡<br>ab -c 1000 -n 20000 <a href="http://localhost/ht/users" target="_blank" rel="noopener">http://localhost/ht/users</a></p><p>本地环境测试nodeJS+Express+mysql, 设置连接池，4进程 Nginx负载均衡，得出结论：1000并发20000个请求 10.566秒完成 0失败。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1430300</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, <span class="attr">http</span>:<span class="comment">//www.zeustech.net/</span></span><br><span class="line">Licensed to The Apache Software Foundation, <span class="attr">http</span>:<span class="comment">//www.apache.org/</span></span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed <span class="number">2000</span> requests</span><br><span class="line">Completed <span class="number">4000</span> requests</span><br><span class="line">Completed <span class="number">6000</span> requests</span><br><span class="line">Completed <span class="number">8000</span> requests</span><br><span class="line">Completed <span class="number">10000</span> requests</span><br><span class="line">Completed <span class="number">12000</span> requests</span><br><span class="line">Completed <span class="number">14000</span> requests</span><br><span class="line">Completed <span class="number">16000</span> requests</span><br><span class="line">Completed <span class="number">18000</span> requests</span><br><span class="line">Completed <span class="number">20000</span> requests</span><br><span class="line">Finished <span class="number">20000</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software: nginx/<span class="number">1.6</span><span class="number">.2</span></span><br><span class="line">Server Hostname: localhost</span><br><span class="line">Server Port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line">Document Path: <span class="regexp">/ht/u</span>sers</span><br><span class="line">Document Length: <span class="number">692</span> bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level: <span class="number">1000</span></span><br><span class="line">Time taken <span class="keyword">for</span> tests: <span class="number">10.566</span> seconds</span><br><span class="line">Complete requests: <span class="number">20000</span></span><br><span class="line">Failed requests: <span class="number">0</span></span><br><span class="line">Write errors: <span class="number">0</span></span><br><span class="line">Total transferred: <span class="number">19960000</span> bytes</span><br><span class="line">HTML transferred: <span class="number">13840000</span> bytes</span><br><span class="line">Requests per second: 1892.92 [#/sec] (mean)</span><br><span class="line">Time per request: <span class="number">528.283</span> [ms] (mean)</span><br><span class="line">Time per request: <span class="number">0.528</span> [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate: <span class="number">1844.86</span> [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">min mean[+<span class="regexp">/-sd] median max</span></span><br><span class="line"><span class="regexp">Connect: 0 7 14.0 0 73</span></span><br><span class="line"><span class="regexp">Processing: 1 508 377.1 481 1492</span></span><br><span class="line"><span class="regexp">Waiting: 0 506 376.9 478 1492</span></span><br><span class="line"><span class="regexp">Total: 1 515 376.3 487 1492</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></span><br><span class="line"><span class="regexp">50% 487</span></span><br><span class="line"><span class="regexp">66% 677</span></span><br><span class="line"><span class="regexp">75% 793</span></span><br><span class="line"><span class="regexp">80% 922</span></span><br><span class="line"><span class="regexp">90% 1021</span></span><br><span class="line"><span class="regexp">95% 1142</span></span><br><span class="line"><span class="regexp">98% 1327</span></span><br><span class="line"><span class="regexp">99% 1386</span></span><br><span class="line"><span class="regexp">100% 1492 (longest request)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-ECharts</title>
      <link href="/2019/07/06/Vue-ECharts/"/>
      <url>/2019/07/06/Vue-ECharts/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-中使用-ECharts-有两种方法。"><a href="#Vue-中使用-ECharts-有两种方法。" class="headerlink" title="Vue 中使用 ECharts 有两种方法。"></a>Vue 中使用 <a href="https://echarts.baidu.com" target="_blank" rel="noopener">ECharts</a> 有两种方法。</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>   直接引入 ECharts 或 其中某个 实例。</p><p>   安装echarts项目依赖<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure></p><p>   全局引入<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line">Vue.prototype.$echarts = echarts;</span><br></pre></td></tr></table></figure></p><p>   创建图表<br>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"main"</span> style=<span class="string">"width: 600px;height:400px;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: "app",</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    drawChart() &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="regexp">      let myChart = this.$echarts.init(document.getElementById("main"));</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 指定图表的配置项和数据</span></span><br><span class="line"><span class="regexp">      let option = &#123;</span></span><br><span class="line"><span class="regexp">        title: &#123;</span></span><br><span class="line"><span class="regexp">          text: "ECharts 入门示例"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        legend: &#123;</span></span><br><span class="line"><span class="regexp">          data: ["销量"]</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        xAxis: &#123;</span></span><br><span class="line"><span class="regexp">          data: ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        yAxis: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        series: [</span></span><br><span class="line"><span class="regexp">          &#123;</span></span><br><span class="line"><span class="regexp">            name: "销量",</span></span><br><span class="line"><span class="regexp">            type: "bar",</span></span><br><span class="line"><span class="regexp">            data: [5, 20, 36, 10, 10, 20]</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line"><span class="regexp">      myChart.setOption(option);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  mounted() &#123;</span></span><br><span class="line"><span class="regexp">    this.drawChart();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>  使用 Vue-ECharts 组件</p><p>  安装组件<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-echarts -S</span><br></pre></td></tr></table></figure></p><p>  使用组件<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;v-chart <span class="class"><span class="keyword">class</span></span>=<span class="string">"my-chart"</span> :options=<span class="string">"bar"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> ECharts <span class="keyword">from</span> <span class="string">"vue-echarts/components/ECharts"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"echarts/lib/chart/bar"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">"v-chart"</span>: ECharts</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      bar: &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: <span class="string">"ECharts 入门示例"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [<span class="string">"销量"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          data: [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>, <span class="string">"袜子"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">"销量"</span>,</span><br><span class="line">            type: <span class="string">"bar"</span>,</span><br><span class="line">            data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.my-chart &#123;</span></span><br><span class="line"><span class="regexp">  width: 800px;</span></span><br><span class="line"><span class="regexp">  height: 500px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></p><p>个人理解第一种方式 利于 后期 多元化，个性化开发。第二种适合快速开发，不需要过多自定义。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 搭建 服务端</title>
      <link href="/2019/07/05/CentOS/"/>
      <url>/2019/07/05/CentOS/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br><span class="line"></span><br><span class="line">##### 将U盘卸载</span><br><span class="line"></span><br><span class="line">diskutil unmountDisk /dev/disk2  <span class="comment">//disk2 需要为 u盘 盘符</span></span><br><span class="line"></span><br><span class="line">#####  yum intsall wget</span><br><span class="line"></span><br><span class="line">#####  wget download wget</span><br><span class="line">wget http:<span class="comment">//mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</span></span><br><span class="line"></span><br><span class="line">##### 用dd命令制作安装盘</span><br><span class="line">sudo dd <span class="keyword">if</span>=~<span class="regexp">/Downloads/</span>CentOS<span class="number">-7</span>-x86_64-DVD<span class="number">-2009.</span>iso <span class="keyword">of</span>=<span class="regexp">/dev/</span>rdisk2 bs=<span class="number">4</span>m <span class="comment">// 静待10分钟</span></span><br></pre></td></tr></table></figure><h5 id="最小化安装的有线网络配置"><a href="#最小化安装的有线网络配置" class="headerlink" title="最小化安装的有线网络配置"></a>最小化安装的有线网络配置</h5><p>/etc/sysconfig/network-scripts/ifcfg-enp3s0   ONBOOT=yes</p><h5 id="写一个简单的例子"><a href="#写一个简单的例子" class="headerlink" title="写一个简单的例子"></a>写一个简单的例子</h5><p>让我们写一个Hello World程序。 在src目录下修改main.ts文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sayHello &#125; <span class="keyword">from</span> <span class="string">"./greet"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sayHello(<span class="string">"TypeScript"</span>));</span><br></pre></td></tr></table></figure></p><p>修改src/greet.ts文件如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello from <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改gulpfile.js文件如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> ts = <span class="built_in">require</span>(<span class="string">"gulp-typescript"</span>);</span><br><span class="line"><span class="keyword">var</span> tsProject = ts.createProject(<span class="string">"tsconfig.json"</span>);</span><br><span class="line"></span><br><span class="line">##### 最小化安装的无线网络配置</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>首先下载iw工具。</span><br><span class="line"></span><br><span class="line">  yum -y install iw</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>获取无线网卡的名称</span><br><span class="line"></span><br><span class="line">  执行iw dev，假设获得名称为 wlp3s0（示例）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>激活无线网络接口</span><br><span class="line"></span><br><span class="line">  执行ip link <span class="keyword">set</span> wlp3s0 up/down 或 ifconfig wlp3s0 up/down</span><br><span class="line"></span><br><span class="line">4.扫描当前环境中的无线网络</span><br><span class="line"></span><br><span class="line">  执行iw wlp3s0 scan|grep SSID，假设你能够连接的网络名称是TP-LINK-1（示例）</span><br><span class="line"></span><br><span class="line">5.登录指定网络</span><br><span class="line"></span><br><span class="line">  执行wpa_supplicant -B -i wlp3s0 -c &lt;(wpa_passphrase "TP-LINK-1" "此网络的密码")</span><br><span class="line"></span><br><span class="line">6.主动请求动态地址</span><br><span class="line"></span><br><span class="line">  dhclient wlp3s0</span><br><span class="line"></span><br><span class="line">7.查看获取的网络地址</span><br><span class="line"></span><br><span class="line">  执行ip addr show wlp3s0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 暴露 22 端口</span><br><span class="line"></span><br><span class="line">##### CentOS yum 安装Nginx</span><br><span class="line"></span><br><span class="line">1.添加Nginx到YUM源</span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">2.安装Nginx</span><br><span class="line">sudo yum install -y nginx</span><br><span class="line">3.启动Nginx</span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line">4.过防火墙</span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line">5.开机启动</span><br><span class="line">sudo systemctl enable nginx</span><br><span class="line">以下是Nginx的默认路径：</span><br><span class="line"></span><br><span class="line">(1) Nginx配置路径：/etc/nginx/</span><br><span class="line">(2) PID目录：/var/run/nginx.pid</span><br><span class="line">(3) 错误日志：/var/log/nginx/error.log</span><br><span class="line">(4) 访问日志：/var/log/nginx/access.log</span><br><span class="line">(5) 默认站点目录：/usr/share/nginx/html</span><br></pre></td></tr></table></figure></p><h5 id="暴露其他端口"><a href="#暴露其他端口" class="headerlink" title="暴露其他端口"></a>暴露其他端口</h5><p>1、开启端口<br>firewall-cmd –zone=public –add-port=80/tcp –permanent<br>2、查询端口号80 是否开启：<br>firewall-cmd –query-port=80/tcp<br>3、查询有哪些端口是开启的:<br>firewall-cmd –list-port</p><p>命令含义：<br>–zone #作用域<br>–add-port=80/tcp #添加端口，格式为：端口/通讯协议<br>–permanent #永久生效，没有此参数重启后失效</p><p>关闭firewall：<br>systemctl stop firewalld.service #停止firewall<br>systemctl disable firewalld.service #禁止firewall开机启动</p><h3 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nginx -t <span class="comment">// 检查配置文件nginx.conf的正确性</span></span><br><span class="line"></span><br><span class="line">nginx -s reload            # 重新载入配置文件</span><br><span class="line"></span><br><span class="line">nginx -s reopen           # 重启 Nginx</span><br><span class="line"></span><br><span class="line">nginx -s stop              # 停止 Nginx</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Find / -name <span class="string">'my*'</span>.            <span class="comment">// 在 / 目录下查找 my 开头的文件</span></span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep <span class="number">3000</span>   <span class="comment">// 查看端口</span></span><br><span class="line"></span><br><span class="line">tail -fn <span class="number">50</span> nohup.out          <span class="comment">// 查看日志</span></span><br><span class="line"></span><br><span class="line"> nohup command &amp;    <span class="comment">// 后台运行进程</span></span><br><span class="line"></span><br><span class="line">sensors                             <span class="comment">// 查看温度</span></span><br><span class="line"></span><br><span class="line">top                                    <span class="comment">// 查看运行状态</span></span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>设置是否允许密码登陆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AuthorizedKeysFile   .ssh/authorized_keys   <span class="comment">// 公钥认证文件</span></span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys  <span class="comment">// 注入公钥认证</span></span><br><span class="line"></span><br><span class="line">vim /etc/ssh/sshd_config   <span class="comment">// 编辑配置文件</span></span><br><span class="line"></span><br><span class="line">PubkeyAuthentication yes/no  <span class="comment">// 修改使用公钥登录</span></span><br><span class="line"></span><br><span class="line">PasswordAuthentication yes/no  <span class="comment">// 修改使用密码登录</span></span><br><span class="line"></span><br><span class="line">service sshd restart   <span class="comment">// 重启服务</span></span><br></pre></td></tr></table></figure><h3 id="端口管理"><a href="#端口管理" class="headerlink" title="端口管理"></a>端口管理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">netstat -ano  <span class="comment">// 查看所有端口</span></span><br><span class="line"></span><br><span class="line">netstat -anp|grep <span class="number">80</span> <span class="comment">// 查看指定端口</span></span><br><span class="line"></span><br><span class="line">lsof -i:<span class="number">8080</span> <span class="comment">// 查看指定端口 需要 root 用户的权限来执行</span></span><br><span class="line"></span><br><span class="line">kill <span class="number">-9</span> PID  <span class="comment">// 强制关闭 进程</span></span><br></pre></td></tr></table></figure><h3 id="Linux关机和重启命令总结"><a href="#Linux关机和重启命令总结" class="headerlink" title="Linux关机和重启命令总结"></a>Linux关机和重启命令总结</h3><h4 id="关机命令："><a href="#关机命令：" class="headerlink" title="关机命令："></a>关机命令：</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">shutdown -h now（立刻进行关机）</span><br><span class="line"></span><br><span class="line">halt（立刻进行关机）</span><br><span class="line"></span><br><span class="line">poweroff（立刻进行关机）</span><br></pre></td></tr></table></figure><h4 id="重启命令："><a href="#重启命令：" class="headerlink" title="重启命令："></a>重启命令：</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">shutdown -r now（现在重新启动计算机）</span><br><span class="line"></span><br><span class="line">reboot（现在重新启动计算机）</span><br><span class="line"></span><br><span class="line"> 区别：shutdown -h now和shutdown -r now必须是root用户或者具有root权限的用户才能使用，而halt和reboot是Linux系统中的任何用户都可使用，不需要root权限。</span><br><span class="line"></span><br><span class="line"> 联系：halt 与 poweroff 具有相同的功能。</span><br></pre></td></tr></table></figure><p>#### </p>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之 Vue-router 篇</title>
      <link href="/2019/06/10/Vue-router/"/>
      <url>/2019/06/10/Vue-router/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-router-是什么？"><a href="#Vue-router-是什么？" class="headerlink" title="Vue-router 是什么？"></a>Vue-router 是什么？</h2><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。它支持 hash、history、abstract 3 种路由方式，提供了 <router-link> 和 <router-view> 2 种组件，还提供了简单的路由配置和一系列好用的 API。</router-view></router-link></p><h2 id="Vue-router-初始化"><a href="#Vue-router-初始化" class="headerlink" title="Vue-router 初始化"></a>Vue-router 初始化</h2><p>Vue.use(VueRouter) 实质上是启动了 VueRouter 的install方法 安装到vue.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUse</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.use = <span class="function"><span class="keyword">function</span> (<span class="params">plugin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> installedPlugins = (<span class="keyword">this</span>._installedPlugins || (<span class="keyword">this</span>._installedPlugins = []));</span><br><span class="line">    <span class="keyword">if</span> (installedPlugins.indexOf(plugin) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional parameters</span></span><br><span class="line">    <span class="keyword">var</span> args = toArray(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    args.unshift(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.install === <span class="string">'function'</span>) &#123;</span><br><span class="line">      plugin.install.apply(plugin, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">'function'</span>) &#123;</span><br><span class="line">      plugin.apply(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    installedPlugins.push(plugin);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以很清晰的看到，这段代码逻辑，首先会判断 Vue installedPlugins 是否存在，然后执行插件的安装方法，接着将插件存储到 _installedPlugins 中。这个方法的好处是合理利用了this让插件快速找到主体。</p><h2 id="Vue-router-安装"><a href="#Vue-router-安装" class="headerlink" title="Vue-router 安装"></a>Vue-router 安装</h2><p>在项目中 import VueRouter from ‘vue-router’ 的时候，实际上引用的是一个对象，它的定义在/node_modules/vue-router，在文件夹下很容易就能找到安装方法，这里我采用debugger的模式去循循渐进刨析源码：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function install (Vue) &#123;</span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  install.installed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  _Vue = Vue;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isDef = function (v) &#123; <span class="keyword">return</span> v !== undefined; &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> registerInstance = function (vm, callVal) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = vm.$options._parentVnode;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.<span class="keyword">data</span>) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate: function beforeCreate () &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router;</span><br><span class="line">        <span class="keyword">this</span>._router.<span class="keyword">init</span>(<span class="keyword">this</span>);</span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed: function destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Object.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Object.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">'RouterView'</span>, View);</span><br><span class="line">  Vue.component(<span class="string">'RouterLink'</span>, Link);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> strats = Vue.config.optionMergeStrategies;</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里为确保路由只注册一次，用了installed变量作为记号。这里最重要的一点就是使用Vue.mixin混淆 beforeCreate 和 destroyed 钩子函数注入到每一个组件中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMixin$1</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.mixin = <span class="function"><span class="keyword">function</span> (<span class="params">mixin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = mergeOptions(<span class="keyword">this</span>.options, mixin);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 debugger 我们可以发现，这一步 主要是通过mergeOptions函数将 mixin 中的beforeCreate 和 destroyed 钩子函数合并到vue.options。debugger跳回Vue-Router 的 install 方法，可以看到混入的<br>beforeCreate 钩子函数 主要是定义了this._routerRoot 表示当前vue实例，this._router 表示 VueRouter 的实例 router，它是在new Vue 时传入的。还执行了 this._router.init() 方法初始化 router。defineReactive 方法 是把this._route 变成响应式对象，刚刚有提到this._routerRoot 表示当前vue实例，所以在执行该钩子函数时this._routerRoot 始终指向的最后一个传入了 router 对象的父实例。</p><p>接着给 Vue 原型上定义了 $router 和 $route 2 个属性的 get 方法，这就是为什么我们可以在组件实例上可以访问 this.$router 以及 this.$route。</p><p>接着又通过 Vue.component 方法定义了全局的 <router-link> 和 <router-view> 2 个组件，这也是为什么我们在写模板的时候可以使用这两个标签。最后是定义了路由中的钩子函数的合并策略。</router-view></router-link></p><h2 id="路径切换"><a href="#路径切换" class="headerlink" title="路径切换"></a>路径切换</h2><p>接下来我们看看 vue-router是如何使用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span> (<span class="params">location, onComplete, onAbort</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">this</span>$<span class="number">1</span> = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!onComplete &amp;&amp; !onAbort &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>$<span class="number">1.</span>history.push(location, resolve, reject);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(location, onComplete, onAbort);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HTML5History.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span> (<span class="params">location, onComplete, onAbort</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">this</span>$<span class="number">1</span> = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ref = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> fromRoute = ref.current;</span><br><span class="line">  <span class="keyword">this</span>.transitionTo(location, <span class="function"><span class="keyword">function</span> (<span class="params">route</span>) </span>&#123;</span><br><span class="line">    pushState(cleanPath(<span class="keyword">this</span>$<span class="number">1.</span>base + route.fullPath));</span><br><span class="line">    handleScroll(<span class="keyword">this</span>$<span class="number">1.</span>router, route, fromRoute, <span class="literal">false</span>);</span><br><span class="line">    onComplete &amp;&amp; onComplete(route);</span><br><span class="line">  &#125;, onAbort);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>通过 debugger 我们可以发现，实则 他是调用了 transitionTo 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">History.prototype.transitionTo = <span class="function"><span class="keyword">function</span> <span class="title">transitionTo</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  location,</span></span></span><br><span class="line"><span class="function"><span class="params">  onComplete,</span></span></span><br><span class="line"><span class="function"><span class="params">  onAbort</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">this</span>$<span class="number">1</span> = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> route = <span class="keyword">this</span>.router.match(location, <span class="keyword">this</span>.current);</span><br><span class="line">  <span class="keyword">this</span>.confirmTransition(</span><br><span class="line">    route,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>$<span class="number">1.</span>updateRoute(route);</span><br><span class="line">      onComplete &amp;&amp; onComplete(route);</span><br><span class="line">      <span class="keyword">this</span>$<span class="number">1.</span>ensureURL();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// fire ready cbs once</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>$<span class="number">1.</span>ready) &#123;</span><br><span class="line">        <span class="keyword">this</span>$<span class="number">1.</span>ready = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>$<span class="number">1.</span>readyCbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">          cb(route);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">        onAbort(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>$<span class="number">1.</span>ready) &#123;</span><br><span class="line">        <span class="keyword">this</span>$<span class="number">1.</span>ready = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>$<span class="number">1.</span>readyErrorCbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">          cb(err);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>先看第一行代码，它调用了 this.router.match 函数：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VueRouter.prototype.<span class="built_in">match</span> = <span class="function"><span class="keyword">function</span> <span class="title">match</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  raw,</span></span></span><br><span class="line"><span class="function"><span class="params">  current,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> this.matcher.<span class="built_in">match</span>(raw, current, redirectedFrom)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>实际上是调用了 this.matcher.match 方法去做匹配，matcher 匹配规则稍后在看。先把 transitionTo 方法看完。<br>拿到新的路径后，那么接下来就会执行 confirmTransition 方法去做真正的切换，由于这个过程可能有一些异步的操作（如异步组件），所以整个 confirmTransition API 设计成带有成功回调函数和失败回调函数，先来看一下它的定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">History.prototype.confirmTransition = <span class="function"><span class="keyword">function</span> <span class="title">confirmTransition</span> (<span class="params">route, onComplete, onAbort</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">this</span>$<span class="number">1</span> = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> current = <span class="keyword">this</span>.current;</span><br><span class="line">    <span class="keyword">var</span> abort = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// after merging https://github.com/vuejs/vue-router/pull/2771 we</span></span><br><span class="line">      <span class="comment">// When the user navigates through history through back/forward buttons</span></span><br><span class="line">      <span class="comment">// we do not want to throw the error. We only throw it if directly calling</span></span><br><span class="line">      <span class="comment">// push/replace. That's why it's not included in isError</span></span><br><span class="line">      <span class="keyword">if</span> (!isExtendedError(NavigationDuplicated, err) &amp;&amp; isError(err)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>$<span class="number">1.</span>errorCbs.length) &#123;</span><br><span class="line">          <span class="keyword">this</span>$<span class="number">1.</span>errorCbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">            cb(err);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          warn(<span class="literal">false</span>, <span class="string">'uncaught error during route navigation:'</span>);</span><br><span class="line">          <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      onAbort &amp;&amp; onAbort(err);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      isSameRoute(route, current) &amp;&amp;</span><br><span class="line">      <span class="comment">// in the case the route map has been dynamically appended to</span></span><br><span class="line">      route.matched.length === current.matched.length</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ensureURL();</span><br><span class="line">      <span class="keyword">return</span> abort(<span class="keyword">new</span> NavigationDuplicated(route))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ref = resolveQueue(</span><br><span class="line">      <span class="keyword">this</span>.current.matched,</span><br><span class="line">      route.matched</span><br><span class="line">    );</span><br><span class="line">      <span class="keyword">var</span> updated = ref.updated;</span><br><span class="line">      <span class="keyword">var</span> deactivated = ref.deactivated;</span><br><span class="line">      <span class="keyword">var</span> activated = ref.activated;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> queue = [].concat(</span><br><span class="line">      <span class="comment">// in-component leave guards</span></span><br><span class="line">      extractLeaveGuards(deactivated),</span><br><span class="line">      <span class="comment">// global before hooks</span></span><br><span class="line">      <span class="keyword">this</span>.router.beforeHooks,</span><br><span class="line">      <span class="comment">// in-component update hooks</span></span><br><span class="line">      extractUpdateHooks(updated),</span><br><span class="line">      <span class="comment">// in-config enter guards</span></span><br><span class="line">      activated.map(<span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123; <span class="keyword">return</span> m.beforeEnter; &#125;),</span><br><span class="line">      <span class="comment">// async components</span></span><br><span class="line">      resolveAsyncComponents(activated)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.pending = route;</span><br><span class="line">    <span class="keyword">var</span> iterator = <span class="function"><span class="keyword">function</span> (<span class="params">hook, next</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>$<span class="number">1.</span>pending !== route) &#123;</span><br><span class="line">        <span class="keyword">return</span> abort()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        hook(route, current, <span class="function"><span class="keyword">function</span> (<span class="params">to</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (to === <span class="literal">false</span> || isError(to)) &#123;</span><br><span class="line">            <span class="comment">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class="line">            <span class="keyword">this</span>$<span class="number">1.</span>ensureURL(<span class="literal">true</span>);</span><br><span class="line">            abort(to);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">            <span class="keyword">typeof</span> to === <span class="string">'string'</span> ||</span><br><span class="line">            (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">              (<span class="keyword">typeof</span> to.path === <span class="string">'string'</span> || <span class="keyword">typeof</span> to.name === <span class="string">'string'</span>))</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="comment">// next('/') or next(&#123; path: '/' &#125;) -&gt; redirect</span></span><br><span class="line">            abort();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; to.replace) &#123;</span><br><span class="line">              <span class="keyword">this</span>$<span class="number">1.</span>replace(to);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">this</span>$<span class="number">1.</span>push(to);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// confirm transition and pass on the value</span></span><br><span class="line">            next(to);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        abort(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    runQueue(queue, iterator, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> postEnterCbs = [];</span><br><span class="line">      <span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>$<span class="number">1.</span>current === route; &#125;;</span><br><span class="line">      <span class="comment">// wait until async components are resolved before</span></span><br><span class="line">      <span class="comment">// extracting in-component enter guards</span></span><br><span class="line">      <span class="keyword">var</span> enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);</span><br><span class="line">      <span class="keyword">var</span> queue = enterGuards.concat(<span class="keyword">this</span>$<span class="number">1.</span>router.resolveHooks);</span><br><span class="line">      runQueue(queue, iterator, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>$<span class="number">1.</span>pending !== route) &#123;</span><br><span class="line">          <span class="keyword">return</span> abort()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>$<span class="number">1.</span>pending = <span class="literal">null</span>;</span><br><span class="line">        onComplete(route);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>$<span class="number">1.</span>router.app) &#123;</span><br><span class="line">          <span class="keyword">this</span>$<span class="number">1.</span>router.app.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            postEnterCbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">              cb();</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>这里定义了 abort 函数，然后判断 route 和 current 是相同路径的话，则直接调用 this.ensureUrl 和 abort 函数抛出错误 和 调用 函数终止回调。<br>谈后又根据 current.matched 和 route.matched 执行了 resolveQueue 方法解析出 3 个数组队列，分别保存即将前往以及当前的页面的参数：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveQueue</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  current,</span></span></span><br><span class="line"><span class="function"><span class="params">  next</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> &#123;</span></span><br><span class="line">  var <span class="built_in">i</span>;</span><br><span class="line">  var <span class="built_in">max</span> = Math.<span class="built_in">max</span>(current.<span class="built_in">length</span>, next.<span class="built_in">length</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; <span class="built_in">max</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current[<span class="built_in">i</span>] !== next[<span class="built_in">i</span>]) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    updated: next.slice(<span class="number">0</span>, <span class="built_in">i</span>),</span><br><span class="line">    activated: next.slice(<span class="built_in">i</span>),</span><br><span class="line">    deactivated: current.slice(<span class="built_in">i</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就来到了导航守卫，守卫是我在狼人杀里面喜欢的一个角色（哈哈）。这里的主要逻辑是在 runQueue 函数:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> runQueue (queue, fn, cb) &#123;</span><br><span class="line">  var step = <span class="function"><span class="keyword">function</span></span> (<span class="built_in">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">index</span> &gt;= queue.length) &#123;</span><br><span class="line">      cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue[<span class="built_in">index</span>]) &#123;</span><br><span class="line">        fn(queue[<span class="built_in">index</span>], <span class="function"><span class="keyword">function</span></span> () &#123;</span><br><span class="line">          step(<span class="built_in">index</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step(<span class="built_in">index</span> + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  step(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 是一个典型的异步函数队列执行函数，queue 是一个导航卫士类型的数组，每次根据queue的循环递增取到一个守卫，通过fn 去执行 ，这里的fn 就是刚才的 iterator 函数，定义如下：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var iterator = <span class="keyword">function</span> (hook, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (this<span class="variable">$1</span>.pending !== route) &#123;</span><br><span class="line">    <span class="keyword">return</span> abort()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    hook(route, current, <span class="keyword">function</span> (<span class="keyword">to</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">to</span> ===<span class="built_in"> false</span> || isError(<span class="keyword">to</span>)) &#123;</span><br><span class="line">        // <span class="keyword">next</span><span class="built_in">(false</span>) -&gt; abort navigation, ensure current URL</span><br><span class="line">        this<span class="variable">$1</span>.ensureURL<span class="built_in">(true</span>);</span><br><span class="line">        abort(<span class="keyword">to</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        typeof <span class="keyword">to</span> === <span class="string">'string'</span> ||</span><br><span class="line">        (typeof <span class="keyword">to</span> === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">          (typeof <span class="keyword">to</span><span class="built_in">.path</span> === <span class="string">'string'</span> || typeof <span class="keyword">to</span><span class="built_in">.name</span> === <span class="string">'string'</span>))</span><br><span class="line">      ) &#123;</span><br><span class="line">        // <span class="keyword">next</span>(<span class="string">'/'</span>) <span class="keyword">or</span> <span class="keyword">next</span>(&#123;<span class="built_in"> path</span>: <span class="string">'/'</span> &#125;) -&gt; redirect</span><br><span class="line">        abort();</span><br><span class="line">        <span class="keyword">if</span> (typeof <span class="keyword">to</span> === <span class="string">'object'</span> &amp;&amp; <span class="keyword">to</span><span class="built_in">.replace</span>) &#123;</span><br><span class="line">          this<span class="variable">$1</span><span class="built_in">.replace</span>(<span class="keyword">to</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          this<span class="variable">$1</span>.push(<span class="keyword">to</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // confirm transition <span class="keyword">and</span> pass on the <span class="keyword">value</span></span><br><span class="line">        <span class="keyword">next</span>(<span class="keyword">to</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    abort(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里会首先做一个验证，当前待跳转的是否为当前route，然后执行每一个守卫的hook，并传入 route、current 和匿名函数，对应守卫入参时的to, from, next，这里大致就是当执行了匿名函数，会根据一些条件执行 abort 或 next，只有执行 next 的时候，才会前进到下一个导航守卫钩子函数中，这也就是为什么官方文档会说只有执行 next 方法来 resolve 这个钩子函数。</p><p>以下还是要多研究<br>那么最后我们来看 queue 是怎么构造的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> queue = [].concat(</span><br><span class="line">  <span class="comment">// in-component leave guards</span></span><br><span class="line">  extractLeaveGuards(deactivated),</span><br><span class="line">  <span class="comment">// global before hooks</span></span><br><span class="line">  <span class="keyword">this</span>.router.beforeHooks,</span><br><span class="line">  <span class="comment">// in-component update hooks</span></span><br><span class="line">  extractUpdateHooks(updated),</span><br><span class="line">  <span class="comment">// in-config enter guards</span></span><br><span class="line">  activated.map(<span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123; <span class="keyword">return</span> m.beforeEnter; &#125;),</span><br><span class="line">  <span class="comment">// async components</span></span><br><span class="line">  resolveAsyncComponents(activated)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>按照顺序如下：<br>  1、在失活的组件里调用离开守卫。<br>  2、调用全局的 beforeEach 守卫。<br>  3、在重用的组件里调用 beforeRouteUpdate 守卫<br>  4、在激活的路由配置里调用 beforeEnter。<br>  5、解析异步路由组件。<br>  6、在被激活的组件里调用 beforeRouteEnter。<br>  7、调用全局的 beforeResolve 守卫。<br>  8、调用全局的 afterEach 钩子。</p><p>  其中6、7步会在runQueue方法的回调中执行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">runQueue(queue, iterator, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> postEnterCbs = [];</span><br><span class="line">  <span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>$<span class="number">1.</span>current === route; &#125;;</span><br><span class="line">  <span class="comment">// wait until async components are resolved before</span></span><br><span class="line">  <span class="comment">// extracting in-component enter guards</span></span><br><span class="line">  <span class="keyword">var</span> enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);</span><br><span class="line">  <span class="keyword">var</span> queue = enterGuards.concat(<span class="keyword">this</span>$<span class="number">1.</span>router.resolveHooks);</span><br><span class="line">  runQueue(queue, iterator, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>$<span class="number">1.</span>pending !== route) &#123;</span><br><span class="line">      <span class="keyword">return</span> abort()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>$<span class="number">1.</span>pending = <span class="literal">null</span>;</span><br><span class="line">    onComplete(route);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>$<span class="number">1.</span>router.app) &#123;</span><br><span class="line">      <span class="keyword">this</span>$<span class="number">1.</span>router.app.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        postEnterCbs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">          cb();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>第八步是在最后执行了 onComplete(route) 后，会执行 this.updateRoute(route) 方法：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">updateRoute (route: Route) &#123;</span><br><span class="line">  <span class="keyword">const</span> prev = <span class="keyword">this</span>.current</span><br><span class="line">  <span class="keyword">this</span>.current = route</span><br><span class="line">  <span class="keyword">this</span>.cb &amp;&amp; <span class="keyword">this</span>.cb(route)</span><br><span class="line">  <span class="keyword">this</span>.router.afterHooks.forEach(hook =&gt; &#123;</span><br><span class="line">    hook &amp;&amp; hook(route, prev)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当用户使用 router.afterEach 注册了一个全局守卫，就会往 router.afterHooks 添加一个钩子函数，这样 this.router.afterHooks 获取的就是用户注册的全局 afterHooks 守卫。</p><p>那么至此我们把所有导航守卫的执行分析完毕了，我们知道路由切换除了执行这些钩子函数，从表象上有 2 个地方会发生变化，一个是 url 发生变化，一个是组件发生变化。接下来我们分别介绍这两块的实现原理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>编写 Vue 插件通常需要提供静态的 install 方法，谈后通过 Vue.use(plugin) 时候，就会执行插件的 install 方法。如上Vue-Router 的 install 方法是给每一个组件注入 beforeCreate 和 destoryed 钩子函数，在 beforeCreate 做一些关于Vue-Router 的操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之Vuex 篇</title>
      <link href="/2019/06/02/Vuex-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/06/02/Vuex-%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex-是什么？"><a href="#Vuex-是什么？" class="headerlink" title="Vuex 是什么？"></a>Vuex 是什么？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。它的核心概念有State，Getter，Mutation，Action，Module。</p><img src="https://vuex.vuejs.org/vuex.png" title="title Vuex" alt="alt Vuex"><h2 id="Vuex-初始化"><a href="#Vuex-初始化" class="headerlink" title="Vuex 初始化"></a>Vuex 初始化</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在项目中 import Vuex from ‘vuex’ 的时候，实际上引用的是一个对象，它的定义在/node_modules/vuex 中：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">index</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">Store:</span> <span class="string">Store,</span></span><br><span class="line">    <span class="attr">install:</span> <span class="string">install,</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">'3.1.2'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">mapState:</span> <span class="string">mapState,</span></span><br><span class="line">    <span class="attr">mapMutations:</span> <span class="string">mapMutations,</span></span><br><span class="line">    <span class="attr">mapGetters:</span> <span class="string">mapGetters,</span></span><br><span class="line">    <span class="attr">mapActions:</span> <span class="string">mapActions,</span></span><br><span class="line">    <span class="attr">createNamespacedHelpers:</span> <span class="string">createNamespacedHelpers</span></span><br><span class="line">  <span class="string">&#125;;</span></span><br><span class="line"><span class="string">return</span> <span class="string">index;</span></span><br></pre></td></tr></table></figure></p><p>Vue.use(Vuex) 实质上是启动了 vuex 的install方法 安装到vue<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUse</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.use = <span class="function"><span class="keyword">function</span> (<span class="params">plugin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> installedPlugins = (<span class="keyword">this</span>._installedPlugins || (<span class="keyword">this</span>._installedPlugins = []));</span><br><span class="line">    <span class="keyword">if</span> (installedPlugins.indexOf(plugin) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional parameters</span></span><br><span class="line">    <span class="keyword">var</span> args = toArray(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    args.unshift(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.install === <span class="string">'function'</span>) &#123;</span><br><span class="line">      plugin.install.apply(plugin, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">'function'</span>) &#123;</span><br><span class="line">      plugin.apply(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    installedPlugins.push(plugin);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        <span class="string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  Vue = _Vue;</span><br><span class="line">  applyMixin(Vue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出install 的逻辑很简单，就是把传入的 _Vue 赋值给 Vue 并执行了 applyMixin(Vue) 方法。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function applyMixin (Vue) &#123;</span><br><span class="line">    var version = Number(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      Vue.mixin(&#123; beforeCreate: vuexInit &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// override init and inject vuex init procedure</span></span><br><span class="line">      <span class="comment">// for 1.x backwards compatibility.</span></span><br><span class="line">      var _init = Vue.prototype._init;</span><br><span class="line">      Vue.prototype._init = function (<span class="keyword">options</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">options</span> === <span class="keyword">void</span> <span class="number">0</span> ) <span class="keyword">options</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">options</span>.init = <span class="keyword">options</span>.init</span><br><span class="line">          ? [vuexInit].concat(<span class="keyword">options</span>.init)</span><br><span class="line">          : vuexInit;</span><br><span class="line">        _init.<span class="keyword">call</span>(<span class="keyword">this</span>, <span class="keyword">options</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    function vuexInit () &#123;</span><br><span class="line">      var <span class="keyword">options</span> = <span class="keyword">this</span>.$<span class="keyword">options</span>;</span><br><span class="line">      <span class="comment">// store injection</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">options</span>.store) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store = typeof <span class="keyword">options</span>.store === <span class="string">'function'</span></span><br><span class="line">          ? <span class="keyword">options</span>.store()</span><br><span class="line">          : <span class="keyword">options</span>.store;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">options</span>.parent &amp;&amp; <span class="keyword">options</span>.parent.$store) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store = <span class="keyword">options</span>.parent.$store;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>从applyMixin方法中可以看出它会先判断Vue版本号，对于 Vue 2.0 以上版本，它其实就全局混入了一个 beforeCreate 钩子函数，在创建前把 options.store 保存在所有组件的 this.$store 中，这个 options.store 就是我们在实例化 Store 对象的实例。</p><h3 id="Store-实例化"><a href="#Store-实例化" class="headerlink" title="Store 实例化"></a>Store 实例化</h3><p>其实 这里 大致 可以分为三步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Store = <span class="function"><span class="keyword">function</span> <span class="title">Store</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">this</span>$<span class="number">1</span> = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> ( options === <span class="keyword">void</span> <span class="number">0</span> ) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Auto install if it is not done yet and `window` has `Vue`.</span></span><br><span class="line">  <span class="comment">// To allow users to avoid auto-installation in some cases,</span></span><br><span class="line">  <span class="comment">// this code should be placed here. See #731</span></span><br><span class="line">  <span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">    install(<span class="built_in">window</span>.Vue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assert(Vue, <span class="string">"must call Vue.use(Vuex) before creating a store instance."</span>);</span><br><span class="line">    assert(<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>, <span class="string">"vuex requires a Promise polyfill in this browser."</span>);</span><br><span class="line">    assert(<span class="keyword">this</span> <span class="keyword">instanceof</span> Store, <span class="string">"store must be called with the new operator."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> plugins = options.plugins; <span class="keyword">if</span> ( plugins === <span class="keyword">void</span> <span class="number">0</span> ) plugins = [];</span><br><span class="line">  <span class="keyword">var</span> strict = options.strict; <span class="keyword">if</span> ( strict === <span class="keyword">void</span> <span class="number">0</span> ) strict = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// store internal state</span></span><br><span class="line">  <span class="keyword">this</span>._committing = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">this</span>._actionSubscribers = [];</span><br><span class="line">  <span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(options); 第一步：实例化模块，创建模块树</span><br><span class="line">  <span class="keyword">this</span>._modulesNamespaceMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">this</span>._subscribers = [];</span><br><span class="line">  <span class="keyword">this</span>._watcherVM = <span class="keyword">new</span> Vue();</span><br><span class="line">  <span class="keyword">this</span>._makeLocalGettersCache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind commit and dispatch to self</span></span><br><span class="line">  <span class="keyword">var</span> store = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> ref = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> dispatch = ref.dispatch;</span><br><span class="line">  <span class="keyword">var</span> commit = ref.commit;</span><br><span class="line">  <span class="keyword">this</span>.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">boundDispatch</span> (<span class="params">type, payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch.call(store, type, payload)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.commit = <span class="function"><span class="keyword">function</span> <span class="title">boundCommit</span> (<span class="params">type, payload, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commit.call(store, type, payload, options)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// strict mode</span></span><br><span class="line">  <span class="keyword">this</span>.strict = strict;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> state = <span class="keyword">this</span>._modules.root.state; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// init root module.</span></span><br><span class="line">  <span class="comment">// this also recursively registers all sub-modules</span></span><br><span class="line">  <span class="comment">// and collects all module getters inside this._wrappedGetters</span></span><br><span class="line">  installModule(<span class="keyword">this</span>, state, [], <span class="keyword">this</span>._modules.root); 第二步：安装模块</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class="line">  <span class="comment">// (also registers _wrappedGetters as computed properties)</span></span><br><span class="line">  resetStoreVM(<span class="keyword">this</span>, state); 第三部 注册 Store 实例</span><br><span class="line"></span><br><span class="line">  <span class="comment">// apply plugins</span></span><br><span class="line">  plugins.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">plugin</span>) </span>&#123; <span class="keyword">return</span> plugin(<span class="keyword">this</span>$<span class="number">1</span>); &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> useDevtools = options.devtools !== <span class="literal">undefined</span> ? options.devtools : Vue.config.devtools;</span><br><span class="line">  <span class="keyword">if</span> (useDevtools) &#123;</span><br><span class="line">    devtoolPlugin(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="第一步：实例化模块，创建模块树"><a href="#第一步：实例化模块，创建模块树" class="headerlink" title="第一步：实例化模块，创建模块树"></a>第一步：实例化模块，创建模块树</h4><p>模块对于 Vuex 的意义：如果应用变得复杂时，使用单一状态树，应用的所有状态会集中到一个比较大的对象，store 对象就有可能变得相当臃肿。Vuex 为了解决这个问题允许我们将 store 分割成模块（module）。并且每个模块拥有自己的 state、mutation、action、getter。<br>但从数据结构来看，模块的设计是树形结构，自己是一个 root module 模块，下面有子模块Vuex 需要完成这颗树的构建，构建过程的入口就是：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(<span class="keyword">options</span>)</span><br></pre></td></tr></table></figure></p><p>通过 debugger 可以发现 ModuleCollection 的实例化过程实则是执行了 register 方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ModuleCollection = <span class="function"><span class="keyword">function</span> <span class="title">ModuleCollection</span> (<span class="params">rawRootModule</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// register root module (Vuex.Store options)</span></span><br><span class="line">  <span class="keyword">this</span>.register([], rawRootModule, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ModuleCollection.prototype.register = <span class="function"><span class="keyword">function</span> <span class="title">register</span> </span>(path, rawModule, runtime) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">this</span>$<span class="number">1</span> = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> ( runtime === void <span class="number">0</span> ) runtime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assertRawModule(path, rawModule);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Module</span> = <span class="keyword">new</span> <span class="type">Module</span>(rawModule, runtime);</span><br><span class="line">  <span class="keyword">if</span> (path.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="keyword">new</span><span class="type">Module</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> parent = <span class="built_in">this</span>.<span class="keyword">get</span>(path.slice(<span class="number">0</span>, <span class="number">-1</span>));</span><br><span class="line">    parent.addChild(path[path.length - <span class="number">1</span>], <span class="keyword">new</span><span class="type">Module</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register nested modules</span></span><br><span class="line">  <span class="keyword">if</span> (rawModule.modules) &#123;</span><br><span class="line">    forEachValue(rawModule.modules, <span class="function"><span class="keyword">function</span> </span>(rawChildModule, key) &#123;</span><br><span class="line">      <span class="built_in">this</span>$<span class="number">1.</span>register(path.concat(key), rawChildModule, runtime);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>register 方法 首先是 通过 var newModule = new Module(rawModule, runtime) 得到modules实例;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = <span class="function"><span class="keyword">function</span> <span class="title">Module</span> (<span class="params">rawModule, runtime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.runtime = runtime;</span><br><span class="line">  <span class="comment">// Store some children item</span></span><br><span class="line">  <span class="keyword">this</span>._children = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">// Store the origin module object which passed by programmer</span></span><br><span class="line">  <span class="keyword">this</span>._rawModule = rawModule;</span><br><span class="line">  <span class="keyword">var</span> rawState = rawModule.state;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Store the origin module's state</span></span><br><span class="line">  <span class="keyword">this</span>.state = (<span class="keyword">typeof</span> rawState === <span class="string">'function'</span> ? rawState() : rawState) || &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>通过Module 的构造函数 主要有 3个 属性，this._rawModule 表示模块的配置，this._children 表示它的所有子模块，this.state 表示这个模块定义的 state。</p><p>在 register 函数中 实例化一个 Module 后，会判断 当前 path 的长度，如果为0，它就是一个根模块，会将 newModule 实例赋值给this.root,否则就<br>会运行如下代码建立父子关系。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const parent = <span class="built_in">this</span>.<span class="keyword">get</span>(path.slice(<span class="number">0</span>, <span class="number">-1</span>));</span><br><span class="line">parent.addChild(path[path.length - <span class="number">1</span>], <span class="keyword">new</span><span class="type">Module</span>)</span><br></pre></td></tr></table></figure></p><p>这一步的代码 很清晰，先找到 父，然后通过父模块的addChild 建立父子模块。<br>再回到register 方法 它的最后一步判断如果有子模块存在 就根据 key 作为 path，递归调用register方法，这样在上一步判断 path 长度时就不会为0了。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ModuleCollection.prototype.get = <span class="keyword">function</span> get <span class="built_in">(path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span><span class="built_in"> path</span>.reduce(<span class="keyword">function</span> (<span class="keyword">module</span>,<span class="built_in"> key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">module</span>.getChild<span class="built_in">(key</span>)</span><br><span class="line">  &#125;, this<span class="built_in">.root</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>传入的 path 是它的父模块的 path，然后从根模块开始，通过 reduce 方法一层层去找到对应的模块，查找的过程中，执行的是 module.getChild(key) 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module.prototype.getChild = <span class="function"><span class="keyword">function</span> <span class="title">getChild</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._children[key]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>看代码一目了然，就是返回当前模块的 _children 中对应 key 的模块，每个模块的 _children 是通过执行 parent.addChild(path[path.length - 1], newModule) 方法添加：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module.prototype.addChild = <span class="function"><span class="keyword">function</span> <span class="title">addChild</span> (<span class="params">key, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._children[key] = <span class="built_in">module</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其实 对于 子模块而言，它们的 parent 就是上一层 module，这样它们就会通过 父模块的 addChild 方法被添加到 父模块 的 _children 中。递归执行这样的过程，实例出一颗完整的模块树。</p><h4 id="第二步：安装模块"><a href="#第二步：安装模块" class="headerlink" title="第二步：安装模块"></a>第二步：安装模块</h4><p>实例化完模块后, debugger回到 Store 函数中。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">state</span> = this._modules.root.<span class="keyword">state</span>;</span><br><span class="line">installModule(this, <span class="keyword">state</span>, [], this._modules.root);</span><br></pre></td></tr></table></figure><p>installModule 函数如下：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span> (<span class="params">store, rootState, path, <span class="built_in">module</span>, hot</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isRoot = !path.length;</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">namespace</span> = store._modules.getNamespace(path);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register in namespace map</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.namespaced) &#123;</span><br><span class="line">    <span class="keyword">if</span> (store._modulesNamespaceMap[<span class="keyword">namespace</span>] &amp;&amp; process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error((<span class="string">"[vuex] duplicate namespace "</span> + <span class="keyword">namespace</span> + <span class="string">" for the namespaced module "</span> + (path.join(<span class="string">'/'</span>))));</span><br><span class="line">    &#125;</span><br><span class="line">    store._modulesNamespaceMap[<span class="keyword">namespace</span>] = <span class="keyword">module</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // set state</span><br><span class="line">  if (!isRoot &amp;&amp; !hot) &#123;</span><br><span class="line">    <span class="keyword">var</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">var</span> moduleName = path[path.length - <span class="number">1</span>];</span><br><span class="line">    store._withCommit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (moduleName <span class="keyword">in</span> parentState) &#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(</span><br><span class="line">            (<span class="string">"[vuex] state field \""</span> + moduleName + <span class="string">"\" was overridden by a module with the same name at \""</span> + (path.join(<span class="string">'.'</span>)) + <span class="string">"\""</span>)</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      Vue.set(parentState, moduleName, <span class="built_in">module</span>.state);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> local = <span class="built_in">module</span>.context = makeLocalContext(store, <span class="keyword">namespace</span>, path);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachMutation(<span class="function"><span class="keyword">function</span> (<span class="params">mutation, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> namespacedType = <span class="keyword">namespace</span> + key;</span><br><span class="line">    registerMutation(store, namespacedType, mutation, local);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachAction(<span class="function"><span class="keyword">function</span> (<span class="params">action, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">type</span> = action.root ? key : <span class="keyword">namespace</span> + key;</span><br><span class="line">    <span class="keyword">var</span> handler = action.handler || action;</span><br><span class="line">    registerAction(store, <span class="keyword">type</span>, handler, local);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachGetter(<span class="function"><span class="keyword">function</span> (<span class="params">getter, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> namespacedType = <span class="keyword">namespace</span> + key;</span><br><span class="line">    registerGetter(store, namespacedType, getter, local);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachChild(<span class="function"><span class="keyword">function</span> (<span class="params">child, key</span>) </span>&#123;</span><br><span class="line">    installModule(store, rootState, path.concat(key), child, hot);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>installModule 函数方法有 5 个入参，store 表示 root store；state 表示 root state；path 表示模块的访问路径；module 表示当前的模块，hot 表示是否是热更新。 </p><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit。换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀。更改 namespaced 属性后不需要修改模块内的代码。<br>获取命名空间的方法如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">namespace</span> = store._modules.getNamespace(path)</span><br></pre></td></tr></table></figure></p><p>方法的具体实现：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ModuleCollection.prototype.getNamespace = <span class="keyword">function</span> getNamespace <span class="built_in">(path</span>) &#123;</span><br><span class="line">  var <span class="keyword">module</span> = this<span class="built_in">.root</span>;</span><br><span class="line">  <span class="keyword">return</span><span class="built_in"> path</span>.reduce(<span class="keyword">function</span> (<span class="type">namespace</span>,<span class="built_in"> key</span>) &#123;</span><br><span class="line">    <span class="keyword">module</span> = <span class="keyword">module</span>.getChild<span class="built_in">(key</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="type">namespace</span> + (<span class="keyword">module</span>.namespaced ?<span class="built_in"> key</span> + <span class="string">'/'</span> : <span class="string">''</span>)</span><br><span class="line">  &#125;, <span class="string">''</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>namespaced 为 true 且 没有冲突的情况下会将 namespace 对应的模块保存下来 :<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">store._modulesNamespaceMap[namespace]</span> = module<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>接下来 会 判断 是否 是root 然后执行 以下方法 拿到 state，然后通过Vue.set 一层层 初始化 state。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getNestedState (<span class="keyword">state</span>, path) &#123;</span><br><span class="line">  return path.length</span><br><span class="line">    ? path.reduce(function (<span class="keyword">state</span>, key) &#123; return <span class="keyword">state</span>[key]; &#125;, <span class="keyword">state</span>)</span><br><span class="line">    : <span class="keyword">state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来会执行 makeLocalContext 方法：<br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLocalContext</span> (<span class="params">store, <span class="keyword">namespace</span>, path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> noNamespace = <span class="keyword">namespace</span> === <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> local = &#123;</span><br><span class="line">    dispatch: noNamespace ? store.dispatch : <span class="function"><span class="keyword">function</span> (<span class="params">_type, _payload, _options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> args = unifyObjectStyle(_type, _payload, _options);</span><br><span class="line">      <span class="keyword">var</span> payload = args.payload;</span><br><span class="line">      <span class="keyword">var</span> options = args.options;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">type</span> = args.type;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!options || !options.root) &#123;</span><br><span class="line">        <span class="keyword">type</span> = <span class="keyword">namespace</span> + <span class="keyword">type</span>;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !store._actions[<span class="keyword">type</span>]) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error((<span class="string">"[vuex] unknown local action type: "</span> + (args.type) + <span class="string">", global type: "</span> + <span class="keyword">type</span>));</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> store.dispatch(<span class="keyword">type</span>, payload)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    commit: noNamespace ? store.commit : <span class="function"><span class="keyword">function</span> (<span class="params">_type, _payload, _options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> args = unifyObjectStyle(_type, _payload, _options);</span><br><span class="line">      <span class="keyword">var</span> payload = args.payload;</span><br><span class="line">      <span class="keyword">var</span> options = args.options;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">type</span> = args.type;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!options || !options.root) &#123;</span><br><span class="line">        <span class="keyword">type</span> = <span class="keyword">namespace</span> + <span class="keyword">type</span>;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !store._mutations[<span class="keyword">type</span>]) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error((<span class="string">"[vuex] unknown local mutation type: "</span> + (args.type) + <span class="string">", global type: "</span> + <span class="keyword">type</span>));</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      store.commit(<span class="keyword">type</span>, payload, options);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getters and state object must be gotten lazily</span></span><br><span class="line">  <span class="comment">// because they will be changed by vm update</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(local, &#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">      <span class="keyword">get</span>: noNamespace</span><br><span class="line">        ? <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> store.getters; &#125;</span><br><span class="line">        : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> makeLocalGetters(store, <span class="keyword">namespace</span>); &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">      <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> getNestedState(store.state, path); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> local</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>makeLocalContext 有 3 个入参，store 表示 root store；namespace 表示模块的命名空间，path 表示模块的 path。该方法定义了 local 对象，对于 dispatch 和 commit 方法，如果没有 namespace，它们就直接指向了 root store 的 dispatch 和 commit 方法，否则会创建方法，把 type 自动拼接上 namespace，然后执行 store 上对应的方法。</p><p>debugger 回到 installModule ，这里接下来就是 分别完成  Mutation，Action，Getter 的注册。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMutation</span> <span class="params">(store, type, handler, local)</span></span> &#123;</span><br><span class="line">  var entry = store._mutations[<span class="built_in">type</span>] || (store._mutations[<span class="built_in">type</span>] = []);</span><br><span class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedMutationHandler</span> <span class="params">(payload)</span></span> &#123;</span><br><span class="line">    handler.call(store, <span class="keyword">local</span>.state, payload);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerAction</span> <span class="params">(store, type, handler, local)</span></span> &#123;</span><br><span class="line">  var entry = store._actions[<span class="built_in">type</span>] || (store._actions[<span class="built_in">type</span>] = []);</span><br><span class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedActionHandler</span> <span class="params">(payload)</span></span> &#123;</span><br><span class="line">    var res = handler.call(store, &#123;</span><br><span class="line">      dispatch: <span class="keyword">local</span>.dispatch,</span><br><span class="line">      commit: <span class="keyword">local</span>.commit,</span><br><span class="line">      getters: <span class="keyword">local</span>.getters,</span><br><span class="line">      state: <span class="keyword">local</span>.state,</span><br><span class="line">      rootGetters: store.getters,</span><br><span class="line">      rootState: store.state</span><br><span class="line">    &#125;, payload);</span><br><span class="line">    <span class="keyword">if</span> (!isPromise(res)) &#123;</span><br><span class="line">      res = Promise.resolve(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (store._devtoolHook) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.catch(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</span><br><span class="line">        store._devtoolHook.emit(<span class="string">'vuex:error'</span>, err);</span><br><span class="line">        throw err</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerGetter</span> <span class="params">(store, type, rawGetter, local)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (store._wrappedGetters[<span class="built_in">type</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      console.<span class="built_in">error</span>((<span class="string">"[vuex] duplicate getter key: "</span> + <span class="built_in">type</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  store._wrappedGetters[<span class="built_in">type</span>] = <span class="function"><span class="keyword">function</span> <span class="title">wrappedGetter</span> <span class="params">(store)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rawGetter(</span><br><span class="line">      <span class="keyword">local</span>.state, // <span class="keyword">local</span> state</span><br><span class="line">      <span class="keyword">local</span>.getters, // <span class="keyword">local</span> getters</span><br><span class="line">      store.state, // root state</span><br><span class="line">      store.getters // root getters</span><br><span class="line">    )</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>installModule 方法会完成模块下的 state、mutations、actions、getters、 的初始化工作，并且通过递归遍历的方式，就完成了所有子模块的安装工作。</p><h4 id="第三步-注册-Store-实例"><a href="#第三步-注册-Store-实例" class="headerlink" title="第三步 注册 Store 实例"></a>第三步 注册 Store 实例</h4><p>安装完模块后, debugger回到 Store 函数中。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resetStoreVM(this, <span class="keyword">state</span>);</span><br></pre></td></tr></table></figure></p><p>下面是方法定义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStoreVM</span> <span class="params">(store, state, hot)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldVm = store._vm;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind store public getters</span></span><br><span class="line">  store.getters = &#123;&#125;;</span><br><span class="line">  <span class="comment">// reset local getters cache</span></span><br><span class="line">  store._makeLocalGettersCache = Object.create(<span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">var</span> wrappedGetters = store._wrappedGetters;</span><br><span class="line">  <span class="keyword">var</span> computed = &#123;&#125;;</span><br><span class="line">  forEachValue(wrappedGetters, <span class="function"><span class="keyword">function</span> <span class="params">(fn, key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// use computed to leverage its lazy-caching mechanism</span></span><br><span class="line">    <span class="comment">// direct inline function use will lead to closure preserving oldVm.</span></span><br><span class="line">    <span class="comment">// using partial to return function with only arguments preserved in closure environment.</span></span><br><span class="line">    computed[key] = partial(fn, store);</span><br><span class="line">    Object.defineProperty(store.getters, key, &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="keyword">return</span> store._vm[key]; &#125;,</span><br><span class="line">      enumerable: <span class="keyword">true</span> <span class="comment">// for local getters</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use a Vue instance to store the state tree</span></span><br><span class="line">  <span class="comment">// suppress warnings just in case the user has added</span></span><br><span class="line">  <span class="comment">// some funky global mixins</span></span><br><span class="line">  <span class="keyword">var</span> silent = Vue.config.silent;</span><br><span class="line">  Vue.config.silent = <span class="keyword">true</span>;</span><br><span class="line">  store._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      $$state: state</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: computed</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.config.silent = silent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enable strict mode for new vm</span></span><br><span class="line">  <span class="keyword">if</span> (store.strict) &#123;</span><br><span class="line">    enableStrictMode(store);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldVm) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hot) &#123;</span><br><span class="line">      <span class="comment">// dispatch changes in all subscribed watchers</span></span><br><span class="line">      <span class="comment">// to force getter re-evaluation for hot reloading.</span></span><br><span class="line">      store._withCommit(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        oldVm._data.$$state = <span class="keyword">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    Vue.nextTick(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="keyword">return</span> oldVm.$destroy(); &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>resetStoreVM 首先遍历了 _wrappedGetters 获得每个 getter 的函数 fn 和 key，然后定义了 computed[key] = () =&gt; fn(store)。这里的_wrappedGetters 方法就定义在 安装模块 registerGetter 方法中。fn(store) 等于如下方法：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">store._wrappedGetters[type] = function wrappedGetter (store) &#123;</span><br><span class="line">  return rawGetter(</span><br><span class="line">    local.<span class="keyword">state</span>, // local <span class="keyword">state</span></span><br><span class="line">    local.getters, // local getters</span><br><span class="line">    store.<span class="keyword">state</span>, // root <span class="keyword">state</span></span><br><span class="line">    store.getters // root getters</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实则 我们 访问 store.getters 是访问了store 实例 上的 get方法。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed[<span class="built_in">key</span>] = partial(fn, store);</span><br><span class="line"><span class="keyword">Object</span>.defineProperty(store.getters, <span class="built_in">key</span>, &#123;</span><br><span class="line">  <span class="built_in">get</span>: function () &#123; <span class="keyword">return</span> store._vm[<span class="built_in">key</span>]; &#125;,</span><br><span class="line">  enumerable: <span class="keyword">true</span> <span class="comment">// for local getters</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>根据 key 访问 store.getters 的某一个 getter 的时候，实际上就是访问了 store._vm[key]，也就是 computed[key]，在执行 computed[key] 对应的函数的时候，会执行 rawGetter 方法，那么就会访问到 store.state，进而访问到 store._vm._data.$$state，这样就建立了一个依赖关系。当 store.state 发生变化的时候，下一次再访问 store.getters 的时候会重新计算，这里的 store._vm 创建过程在代码中也清晰可见。</p><p>当严格模式下，store._vm 会添加一个 wathcer 来观测 this._data.$$state 的变化，也就是当 store.state 被修改的时候, store._committing 必须为 true，否则在开发阶段会报警告。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableStrictMode</span> <span class="params">(store)</span> </span>&#123;</span><br><span class="line">  store._vm.$watch(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="keyword">return</span> this._data.$$state &#125;, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      assert(store._committing, <span class="string">"do not mutate vuex store state outside mutation handlers."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123; deep: <span class="keyword">true</span>, sync: <span class="keyword">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 debugger 可以看到，在 Commit 过程中会执行 _withCommit 函数， 其实也就是 在 fn 之前 将_committing 变量 改为true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Store.prototype._withCommit = <span class="function"><span class="keyword">function</span> <span class="title">_withCommit</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> committing = <span class="keyword">this</span>._committing;</span><br><span class="line">  <span class="keyword">this</span>._committing = <span class="literal">true</span>;</span><br><span class="line">  fn();</span><br><span class="line">  <span class="keyword">this</span>._committing = committing;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之this.message 为什么能访问到 data.message</title>
      <link href="/2019/05/30/Vue-init/"/>
      <url>/2019/05/30/Vue-init/</url>
      
        <content type="html"><![CDATA[<h3 id="首先我们需要知道-new-Vue-背后发生了哪些事情。"><a href="#首先我们需要知道-new-Vue-背后发生了哪些事情。" class="headerlink" title="首先我们需要知道 new Vue 背后发生了哪些事情。"></a>首先我们需要知道 new Vue 背后发生了哪些事情。</h3><p>我们都知道，new 关键字在 Javascript 语言中代表实例化是一个对象，而 Vue 实际上是一个类，类在 Javascript 中是用 Function 来实现的，来看一下 vue 方法，在src/core/instance/index.js 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line">initMixin(Vue)</span><br></pre></td></tr></table></figure><p>阅读 vue 方法可以知道 Vue 只能通过 new 关键字初始化，然后会调用 this._init 方法， 该方法在同级目录 init.js 中通过 initMixin 方法定义到 vue 原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// a uid</span></span><br><span class="line">    vm._uid = uid++</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> startTag, endTag</span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">      endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">      mark(startTag)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">    vm._isVue = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// merge options</span></span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">      <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">      <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">      initInternalComponent(vm, options)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      initProxy(vm)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm._renderProxy = vm</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// expose real self</span></span><br><span class="line">    vm._self = vm</span><br><span class="line">    initLifecycle(vm)</span><br><span class="line">    initEvents(vm)</span><br><span class="line">    initRender(vm)</span><br><span class="line">    callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">    initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">    initState(vm)</span><br><span class="line">    initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">    callHook(vm, <span class="string">'created'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      vm._name = formatComponentName(vm, <span class="literal">false</span>)</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;vm._name&#125;</span> init`</span>, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 _init 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 data、props、computed、watcher 等等。这里我们来看下 initState 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>阅读代码可以知道 此处判断 new Vue 中是否有定义 props，methods，data，若有 分别执行 初始化函数。这里我们看一下 initData 是如何初始化 data。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'data functions should return an object:\n'</span> +</span><br><span class="line">      <span class="string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods</span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`The data property "<span class="subst">$&#123;key&#125;</span>" is already declared as a prop. `</span> +</span><br><span class="line">        <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道 vue 里面 data 是以一个 function 的形式存在的，通过阅读这里的代码，可以看见如果 data 是 function，通过 getData 方法 call 了一下,然后 判断 是否有重复， 没有就执行proxy方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span> (<span class="params">target: Object, sourceKey: string, key: string</span>) </span>&#123;</span><br><span class="line">  sharedPropertyDefinition.get = <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[sourceKey][key]</span><br><span class="line">  &#125;</span><br><span class="line">  sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[sourceKey][key] = val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>阅读代码我们可以知道，在访问 this.message 时，实质上是通过此方法代理后访问到 this._data.message。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之构建</title>
      <link href="/2019/05/25/Vue-build/"/>
      <url>/2019/05/25/Vue-build/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-js-源码是基于-Rollup-构建的，它的构建相关配置都在-scripts-目录下。"><a href="#Vue-js-源码是基于-Rollup-构建的，它的构建相关配置都在-scripts-目录下。" class="headerlink" title="Vue.js 源码是基于 Rollup 构建的，它的构建相关配置都在 scripts 目录下。"></a>Vue.js 源码是基于 <a href="https://www.rollupjs.com/guide/zh" target="_blank" rel="noopener">Rollup</a> 构建的，它的构建相关配置都在 scripts 目录下。</h3><p>通常一个基于 NPM 的项目都会有一个 package.json 文件，它是对项目的描述文件，它的内容实际上是一个标准的 JSON 对象。此类项目通常会配置 script 字段作为 NPM 的执行脚本。</p><p>Vue.js 构建的脚本如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-full-dev"</span>,</span><br><span class="line">  <span class="string">"dev:cjs"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-runtime-cjs-dev"</span>,</span><br><span class="line">  <span class="string">"dev:esm"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-runtime-esm"</span>,</span><br><span class="line">  <span class="string">"dev:test"</span>: <span class="string">"karma start test/unit/karma.dev.config.js"</span>,</span><br><span class="line">  <span class="string">"dev:ssr"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-server-renderer"</span>,</span><br><span class="line">  <span class="string">"dev:compiler"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-compiler "</span>,</span><br><span class="line">  <span class="string">"dev:weex"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:weex-framework"</span>,</span><br><span class="line">  <span class="string">"dev:weex:factory"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:weex-factory"</span>,</span><br><span class="line">  <span class="string">"dev:weex:compiler"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:weex-compiler "</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"node scripts/build.js"</span>,</span><br><span class="line">  <span class="string">"build:ssr"</span>: <span class="string">"npm run build -- web-runtime-cjs,web-server-renderer"</span>,</span><br><span class="line">  <span class="string">"build:weex"</span>: <span class="string">"npm run build -- weex"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"npm run lint &amp;&amp; flow check &amp;&amp; npm run test:types &amp;&amp; npm run test:cover &amp;&amp; npm run test:e2e -- --env phantomjs &amp;&amp; npm run test:ssr &amp;&amp; npm run test:weex"</span>,</span><br><span class="line">  <span class="string">"test:unit"</span>: <span class="string">"karma start test/unit/karma.unit.config.js"</span>,</span><br><span class="line">  <span class="string">"test:cover"</span>: <span class="string">"karma start test/unit/karma.cover.config.js"</span>,</span><br><span class="line">  <span class="string">"test:e2e"</span>: <span class="string">"npm run build -- web-full-prod,web-server-basic-renderer &amp;&amp; node test/e2e/runner.js"</span>,</span><br><span class="line">  <span class="string">"test:weex"</span>: <span class="string">"npm run build:weex &amp;&amp; jasmine JASMINE_CONFIG_PATH=test/weex/jasmine.js"</span>,</span><br><span class="line">  <span class="string">"test:ssr"</span>: <span class="string">"npm run build:ssr &amp;&amp; jasmine JASMINE_CONFIG_PATH=test/ssr/jasmine.js"</span>,</span><br><span class="line">  <span class="string">"test:sauce"</span>: <span class="string">"npm run sauce -- 0 &amp;&amp; npm run sauce -- 1 &amp;&amp; npm run sauce -- 2"</span>,</span><br><span class="line">  <span class="string">"test:types"</span>: <span class="string">"tsc -p ./types/test/tsconfig.json"</span>,</span><br><span class="line">  <span class="string">"lint"</span>: <span class="string">"eslint src scripts test"</span>,</span><br><span class="line">  <span class="string">"flow"</span>: <span class="string">"flow check"</span>,</span><br><span class="line">  <span class="string">"sauce"</span>: <span class="string">"karma start test/unit/karma.sauce.config.js"</span>,</span><br><span class="line">  <span class="string">"bench:ssr"</span>: <span class="string">"npm run build:ssr &amp;&amp; node benchmarks/ssr/renderToString.js &amp;&amp; node benchmarks/ssr/renderToStream.js"</span>,</span><br><span class="line">  <span class="string">"release"</span>: <span class="string">"bash scripts/release.sh"</span>,</span><br><span class="line">  <span class="string">"release:weex"</span>: <span class="string">"bash scripts/release-weex.sh"</span>,</span><br><span class="line">  <span class="string">"release:note"</span>: <span class="string">"node scripts/gen-release-note.js"</span>,</span><br><span class="line">  <span class="string">"commit"</span>: <span class="string">"git-cz"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这里我们可以看到许多可执行命令，其中 “build”: “node scripts/build.js” 作用是构建 Vue.js。<br>当在命令行运行 npm run build 的时候，实际上就会执行 node scripts/build.js，接下来我们来看看它实际是怎么构建的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> builds = <span class="built_in">require</span>(<span class="string">'./config'</span>).getAllBuilds()</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter builds via command line arg</span></span><br><span class="line"><span class="keyword">if</span> (process.argv[<span class="number">2</span>]) &#123;</span><br><span class="line">  <span class="keyword">const</span> filters = process.argv[<span class="number">2</span>].split(<span class="string">','</span>)</span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filters.some(<span class="function"><span class="params">f</span> =&gt;</span> b.output.file.indexOf(f) &gt; <span class="number">-1</span> || b._name.indexOf(f) &gt; <span class="number">-1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// filter out weex builds by default</span></span><br><span class="line">  builds = builds.filter(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.output.file.indexOf(<span class="string">'weex'</span>) === <span class="number">-1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">build(builds)</span><br></pre></td></tr></table></figure></p><p>我们来看看这段代码的逻辑，可以得知是先从配置文件读取配置，再通过命令行输入的参数对构建配置做过滤，这样就可以通过管理 scripts 执行不同的配置。接下来我们看一下配置文件，在 scripts/config.js 中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> builds = &#123;</span><br><span class="line">  <span class="comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class="line">  <span class="string">'web-runtime-cjs-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.common.dev.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'web-runtime-cjs-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.common.prod.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler CommonJS build (CommonJS)</span></span><br><span class="line">  <span class="string">'web-full-cjs-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.common.dev.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'web-full-cjs-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.common.prod.js'</span>),</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime only ES modules build (for bundlers)</span></span><br><span class="line">  <span class="string">'web-runtime-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler ES modules build (for bundlers)</span></span><br><span class="line">  <span class="string">'web-full-esm'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler ES modules build (for direct import in browser)</span></span><br><span class="line">  <span class="string">'web-full-esm-browser-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.browser.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    transpile: <span class="literal">false</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler ES modules build (for direct import in browser)</span></span><br><span class="line">  <span class="string">'web-full-esm-browser-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.esm.browser.min.js'</span>),</span><br><span class="line">    format: <span class="string">'es'</span>,</span><br><span class="line">    transpile: <span class="literal">false</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// runtime-only production build (Browser)</span></span><br><span class="line">  <span class="string">'web-runtime-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.runtime.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler development build (Browser)</span></span><br><span class="line">  <span class="string">'web-full-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Runtime+compiler production build  (Browser)</span></span><br><span class="line">  <span class="string">'web-full-prod'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.min.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'production'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里列举了一些 Vue.js 构建的配置，对于单个配置，它是遵循 Rollup 的构建规则的。其中 entry 属性表示构建的入口 JS 文件地址，dest 属性表示构建后的 JS 文件地址。format 属性表示构建的格式，cjs 表示构建出来的文件遵循 <a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener">CommonJS 规范</a>，es 表示构建出来的文件遵循 <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">ES Module</a>规范。 <a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">umd</a> 表示构建出来的文件遵循 UMD 规范，这里 我们看一下 web-full-dev 配置，它的 entry 是 resolve(‘web/entry-runtime-with-compiler.js’)，先看一下resolve 函数的定义。目录：scripts/config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aliases = <span class="built_in">require</span>(<span class="string">'./alias'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> base = p.split(<span class="string">'/'</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (aliases[base]) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(aliases[base], p.slice(base.length + <span class="number">1</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的 resolve 函数逻辑非常简单，它先把 resolve 函数入参 p 通过 / 做了分割成数组，然后取数组第一个元素设置为 base。在我们这个例子中，参数 p 是 web/entry-runtime-with-compiler.js，那么 base 则为 web。base 并不是实际的路径，它的真实路径借助了别名的配置，我们来看一下别名配置的代码，在 scripts/alias 中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">p</span> =&gt;</span> path.resolve(__dirname, <span class="string">'../'</span>, p)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  vue: resolve(<span class="string">'src/platforms/web/entry-runtime-with-compiler'</span>),</span><br><span class="line">  compiler: resolve(<span class="string">'src/compiler'</span>),</span><br><span class="line">  core: resolve(<span class="string">'src/core'</span>),</span><br><span class="line">  shared: resolve(<span class="string">'src/shared'</span>),</span><br><span class="line">  web: resolve(<span class="string">'src/platforms/web'</span>),</span><br><span class="line">  weex: resolve(<span class="string">'src/platforms/weex'</span>),</span><br><span class="line">  server: resolve(<span class="string">'src/server'</span>),</span><br><span class="line">  sfc: resolve(<span class="string">'src/sfc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就很清晰了，这里 web 定义的路径为 path.resolve(__dirname, ‘../src/platforms/web’)，这个路径指向了 Vue.js 源码的 web 目录。然后 resolve 函数通过 path.resolve(aliases[base], p.slice(base.length + 1)) 找到了entry-runtime-with-compiler.js。因此 web-full-dev 配置的入口文件就找到了。它经过构建打包后，会按照 dest: resolve(‘dist/vue.min.js’) 在 dist 目录下生成 vue.js。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之 Virtual DOM</title>
      <link href="/2019/05/20/Vue-VirtualDOM/"/>
      <url>/2019/05/20/Vue-VirtualDOM/</url>
      
        <content type="html"><![CDATA[<h3 id="首先我们需要知道-Virtual-DOM-这个概念。"><a href="#首先我们需要知道-Virtual-DOM-这个概念。" class="headerlink" title="首先我们需要知道 Virtual DOM 这个概念。"></a>首先我们需要知道 Virtual DOM 这个概念。</h3><p>Virtual DOM 这个概念，它产生的前提是浏览器中的 DOM 是很“昂贵”的，为了更直观的感受，我们可以简单的把一个简单的 div 元素的属性都打印出来，如图所示：</p><img src="/img/dom.png" class="[class names]" title="[width] [height] [title text [alt text]]"><p>可以看到，真正的 DOM 元素是非常庞大的，因为浏览器的标准就把 DOM 设计的非常复杂。当我们频繁的去做 DOM 更新，会产生一定的性能问题。</p><p>而 Virtual DOM 就是用一个原生的 JS 对象去描述一个 DOM 节点，所以它比创建一个 DOM 的代价要小很多。在 Vue.js 中，Virtual DOM 是用 VNode 这么一个 Class 去描述，它是定义在 src/core/vdom/vnode.js 中的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  tag: string | <span class="keyword">void</span>;</span><br><span class="line">  data: VNodeData | <span class="keyword">void</span>;</span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;;</span><br><span class="line">  text: string | <span class="keyword">void</span>;</span><br><span class="line">  elm: Node | <span class="keyword">void</span>;</span><br><span class="line">  ns: string | <span class="keyword">void</span>;</span><br><span class="line">  context: Component | <span class="keyword">void</span>; <span class="comment">// rendered in this component's scope</span></span><br><span class="line">  key: string | number | <span class="keyword">void</span>;</span><br><span class="line">  componentOptions: VNodeComponentOptions | <span class="keyword">void</span>;</span><br><span class="line">  componentInstance: Component | <span class="keyword">void</span>; <span class="comment">// component instance</span></span><br><span class="line">  parent: VNode | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// strictly internal</span></span><br><span class="line">  raw: boolean; <span class="comment">// contains raw HTML? (server only)</span></span><br><span class="line">  isStatic: boolean; <span class="comment">// hoisted static node</span></span><br><span class="line">  isRootInsert: boolean; <span class="comment">// necessary for enter transition check</span></span><br><span class="line">  isComment: boolean; <span class="comment">// empty comment placeholder?</span></span><br><span class="line">  isCloned: boolean; <span class="comment">// is a cloned node?</span></span><br><span class="line">  isOnce: boolean; <span class="comment">// is a v-once node?</span></span><br><span class="line">  asyncFactory: <span class="built_in">Function</span> | <span class="keyword">void</span>; <span class="comment">// async component factory function</span></span><br><span class="line">  asyncMeta: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  isAsyncPlaceholder: boolean;</span><br><span class="line">  ssrContext: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  fnContext: Component | <span class="keyword">void</span>; <span class="comment">// real context vm for functional nodes</span></span><br><span class="line">  fnOptions: ?ComponentOptions; <span class="comment">// for SSR caching</span></span><br><span class="line">  devtoolsMeta: ?<span class="built_in">Object</span>; <span class="comment">// used to store functional render context for devtools</span></span><br><span class="line">  fnScopeId: ?string; <span class="comment">// functional scope id support</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    tag?: string,</span><br><span class="line">    data?: VNodeData,</span><br><span class="line">    children?: ?Array&lt;VNode&gt;,</span><br><span class="line">    text?: string,</span><br><span class="line">    elm?: Node,</span><br><span class="line">    context?: Component,</span><br><span class="line">    componentOptions?: VNodeComponentOptions,</span><br><span class="line">    asyncFactory?: Function</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tag = tag</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.children = children</span><br><span class="line">    <span class="keyword">this</span>.text = text</span><br><span class="line">    <span class="keyword">this</span>.elm = elm</span><br><span class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.fnContext = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnOptions = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnScopeId = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key</span><br><span class="line">    <span class="keyword">this</span>.componentOptions = componentOptions</span><br><span class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.asyncFactory = asyncFactory</span><br><span class="line">    <span class="keyword">this</span>.asyncMeta = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.isAsyncPlaceholder = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class="line">  <span class="comment">// istanbul ignore next</span></span><br><span class="line">  <span class="keyword">get</span> child (): Component | void &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.componentInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 Vue.js 中的 Virtual DOM 的定义还是略微复杂一些的，因为它这里包含了很多 Vue.js 的特性。这里千万不要被这些茫茫多的属性吓到，实际上 Vue.js 中 Virtual DOM 是借鉴了一个开源库 <a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a> 的实现，然后加入了一些 Vue.js 特色的东西。其实 VNode 是对真实 DOM 的一种抽象描述，它的核心定义无非就几个关键属性，标签名、数据、子节点、键值等，由于 VNode 只是用来映射到真实 DOM 的渲染，不需要包含操作 DOM 的方法，因此它是非常轻量和简单的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之Flow篇</title>
      <link href="/2019/05/15/Vue-flow/"/>
      <url>/2019/05/15/Vue-flow/</url>
      
        <content type="html"><![CDATA[<h3 id="认识-Flow"><a href="#认识-Flow" class="headerlink" title="认识 Flow"></a>认识 Flow</h3><p>Flow 是 facebook 出品的 JavaScript 静态类型检查工具。Vue.js 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。</p><h3 id="为什么用-Flow"><a href="#为什么用-Flow" class="headerlink" title="为什么用 Flow"></a>为什么用 Flow</h3><p>JavaScript 是动态类型语言，它的灵活性有目共睹，但是过于灵活的副作用是很容易就写出非常隐蔽的隐患代码，在编译期甚至看上去都不会报错，但在运行阶段就可能出现各种奇怪的 bug。<br>类型检查是当前动态类型语言的发展趋势，所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，又不影响代码运行（不需要运行时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语言相近的体验。<br>项目越复杂就越需要通过工具的手段来保证项目的维护性和增强代码的可读性。 Vue.js 在做 2.0 重构的时候，在 ES2015 的基础上，除了 ESLint 保证代码风格之外，也引入了 Flow 做静态类型检查。之所以选择 Flow，主要是因为 Babel 和 ESLint 都有对应的 Flow 插件以支持语法，可以完全沿用现有的构建配置，非常小成本的改动就可以拥有静态类型检查的能力。</p><h3 id="Flow-的工作方式"><a href="#Flow-的工作方式" class="headerlink" title="Flow 的工作方式"></a>Flow 的工作方式</h3><p>通常类型检查分成 2 种方式：<br>类型推断：通过变量的使用上下文来推断出变量类型，然后根据这些推断来检查类型。<br>类型注释：事先注释好我们期待的类型，Flow 会基于这些注释来判断。<br>类型判断<br>它不需要任何代码修改即可进行类型检查，最小化开发者的工作量。它不会强制你改变开发习惯，因为它会自动推断出变量的类型。这就是所谓的类型推断，Flow 最重要的特性之一。<br>通过一个简单例子说明一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span><span class="string">``</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">split(<span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>Flow 检查上述代码后会报错，因为函数 split 期待的参数是字符串，而我们输入了数字。<br>类型注释<br>如上所述，类型推断是 Flow 最有用的特性之一，不需要编写类型注释就能获取有用的反馈。但在某些特定的场景下，添加类型注释可以提供更好更明确的检查依据。<br>考虑如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>Flow 检查上述代码时检查不出任何错误，因为从语法层面考虑， + 即可以用在字符串上，也可以用在数字上，我们并没有明确指出 add() 的参数必须为数字。<br>在这种情况下，我们可以借助类型注释来指明期望的类型。类型注释是以冒号 : 开头，可以在函数参数，返回值，变量声明中使用。<br>如果我们在上段代码中添加类型注释，就会变成如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure></p><p>现在 Flow 就能检查出错误，因为函数参数的期待类型为数字，而我们提供了字符串。<br>上面的例子是针对函数的类型注释。接下来我们来看看 Flow 能支持的一些常见的类型注释。<br>数组:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">arr.push(<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure></p><p>数组类型注释的格式是 Array<t>，T 表示数组中每项的数据类型。在上述代码中，arr 是每项均为数字的数组。如果我们给这个数组添加了一个字符串，Flow 能检查出错误。<br>类和对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  x: string;           <span class="comment">// x 是字符串</span></span><br><span class="line">  y: string | number;  <span class="comment">// y 可以是字符串或者数字</span></span><br><span class="line">  z: boolean;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(x: string, y: string | number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">    <span class="keyword">this</span>.z = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar: Bar = <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> obj: &#123; <span class="attr">a</span>: string, <span class="attr">b</span>: number, <span class="attr">c</span>: <span class="built_in">Array</span>&lt;string&gt;, <span class="attr">d</span>: Bar &#125; = &#123;</span><br><span class="line">  a: <span class="string">'hello'</span>,</span><br><span class="line">  b: <span class="number">11</span>,</span><br><span class="line">  c: [<span class="string">'hello'</span>, <span class="string">'world'</span>],</span><br><span class="line">  d: <span class="keyword">new</span> Bar(<span class="string">'hello'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><p>类的类型注释格式如上，可以对类自身的属性做类型检查，也可以对构造函数的参数做类型检查。这里需要注意的是，属性 y 的类型中间用 | 做间隔，表示 y 的类型即可以是字符串也可以是数字。<br>对象的注释类型类似于类，需要指定对象属性的类型。<br>Null<br>若想任意类型 T 可以为 null 或者 undefined，只需类似如下写成 ?T 的格式即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo: ?string = <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><p>此时，foo 可以为字符串，也可以为 null。<br>目前我们只列举了 Flow 的一些常见的类型注释。如果想了解所有类型注释，请移步 Flow 的官方文档。</p><h3 id="Flow-在-Vue-js-源码中的应用"><a href="#Flow-在-Vue-js-源码中的应用" class="headerlink" title="Flow 在 Vue.js 源码中的应用"></a>Flow 在 Vue.js 源码中的应用</h3><p>有时候我们想引用第三方库，或者自定义一些类型，但 Flow 并不认识，因此检查的时候会报错。为了解决这类问题，Flow 提出了一个 libdef 的概念，可以用来识别这些第三方库或者是自定义类型，而 Vue.js 也利用了这一特性。<br>在 Vue.js 的主目录下有 .flowconfig 文件， 它是 Flow 的配置文件，感兴趣的同学可以看官方文档。这其中的 [libs] 部分用来描述包含指定库定义的目录，默认是名为 flow-typed 的目录。<br>这里 [libs] 配置的是 flow，表示指定的库定义都在 flow 文件夹内。我们打开这个目录，会发现文件如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">├── compiler.js        # 编译相关</span><br><span class="line">├── component.js       # 组件数据结构</span><br><span class="line">├── global-api.js      # Global API 结构</span><br><span class="line">├── modules.js         # 第三方库定义</span><br><span class="line">├── options.js         # 选项相关</span><br><span class="line">├── ssr.js             # 服务端渲染相关</span><br><span class="line">├── vnode.js           # 虚拟 node 相关</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过对 Flow 的认识，有助于我们阅读 Vue 的源码，并且这种静态类型检查的方式非常有利于大型项目源码的开发和维护。类似 Flow 的工具还有如 TypeScript。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript非构造函数的继承</title>
      <link href="/2019/05/10/Js%E9%9D%9E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/05/10/Js%E9%9D%9E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>这个系列的第一部分介绍了”封装”，第二部分介绍了使用构造函数实现”继承”。</p><p>今天是最后一个部分，介绍不使用构造函数实现”继承”。</p><h2 id="一、什么是”非构造函数”的继承？"><a href="#一、什么是”非构造函数”的继承？" class="headerlink" title="一、什么是”非构造函数”的继承？"></a>一、什么是”非构造函数”的继承？</h2><p>比如，现在有一个对象，叫做”中国人”。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> Chinese = &#123;</span><br><span class="line">　　　　nation:<span class="string">'中国'</span></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure></p><p>还有一个对象，叫做”医生”。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> Doctor =&#123;</span><br><span class="line">　　　　career:<span class="string">'医生'</span></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>请问怎样才能让”医生”去继承”中国人”，也就是说，我怎样才能生成一个”中国医生”的对象？</p><p>这里要注意，这两个对象都是普通对象，不是构造函数，无法使用构造函数方法实现”继承”。</p><h2 id="二、object-方法"><a href="#二、object-方法" class="headerlink" title="二、object()方法"></a>二、object()方法</h2><p>json格式的发明人Douglas Crockford，提出了一个object()函数，可以做到这一点。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">　　　　F.prototype = o;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>这个object()函数，其实只做一件事，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。</p><p>使用的时候，第一步先在父对象的基础上，生成子对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> Doctor = object(Chinese);</span><br></pre></td></tr></table></figure></p><p>然后，再加上子对象本身的属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Doctor.career = <span class="string">'医生'</span>;</span><br></pre></td></tr></table></figure></p><p>这时，子对象已经继承了父对象的属性了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Doctor.nation); <span class="comment">//中国</span></span><br></pre></td></tr></table></figure></p><h2 id="三、浅拷贝"><a href="#三、浅拷贝" class="headerlink" title="三、浅拷贝"></a>三、浅拷贝</h2><p>除了使用”prototype链”以外，还有另一种思路：把父对象的属性，全部拷贝给子对象，也能实现继承。</p><p>下面这个函数，就是在做拷贝：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extendCopy</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">　　　　　　c[i] = p[i];</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　c.uber = p;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> c;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>使用的时候，这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> Doctor = extendCopy(Chinese);</span><br><span class="line"></span><br><span class="line">　　Doctor.career = <span class="string">'医生'</span>;</span><br><span class="line"></span><br><span class="line">　　alert(Doctor.nation); <span class="comment">// 中国</span></span><br></pre></td></tr></table></figure></p><p>但是，这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。</p><p>请看，现在给Chinese添加一个”出生地”属性，它的值是一个数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Chinese.birthPlaces = [<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'香港'</span>];</span><br></pre></td></tr></table></figure></p><p>通过extendCopy()函数，Doctor继承了Chinese。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> Doctor = extendCopy(Chinese);</span><br></pre></td></tr></table></figure></p><p>然后，我们为Doctor的”出生地”添加一个城市：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Doctor.birthPlaces.push(<span class="string">'厦门'</span>);</span><br></pre></td></tr></table></figure></p><p>发生了什么事？Chinese的”出生地”也被改掉了！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Doctor.birthPlaces); <span class="comment">//北京, 上海, 香港, 厦门</span></span><br><span class="line"></span><br><span class="line">　　alert(Chinese.birthPlaces); <span class="comment">//北京, 上海, 香港, 厦门</span></span><br></pre></td></tr></table></figure></p><p>所以，extendCopy()只是拷贝基本类型的数据，我们把这种拷贝叫做”浅拷贝”。这是早期jQuery实现继承的方式。</p><h2 id="四、深拷贝"><a href="#四、深拷贝" class="headerlink" title="四、深拷贝"></a>四、深拷贝</h2><p>所谓”深拷贝”，就是能够实现真正意义上的数组和对象的拷贝。它的实现并不难，只要递归调用”浅拷贝”就行了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">p, c</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="keyword">if</span> (<span class="keyword">typeof</span> p[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　　　c[i] = (p[i].constructor === <span class="built_in">Array</span>) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　　　　　　　deepCopy(p[i], c[i]);</span><br><span class="line"></span><br><span class="line">　　　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　　　　c[i] = p[i];</span><br><span class="line"></span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> c;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>使用的时候这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> Doctor = deepCopy(Chinese);</span><br></pre></td></tr></table></figure></p><p>现在，给父对象加一个属性，值为数组。然后，在子对象上修改这个属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Chinese.birthPlaces = [<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'香港'</span>];</span><br><span class="line"></span><br><span class="line">　　Doctor.birthPlaces.push(<span class="string">'厦门'</span>);</span><br></pre></td></tr></table></figure></p><p>这时，父对象就不会受到影响了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Doctor.birthPlaces); <span class="comment">//北京, 上海, 香港, 厦门</span></span><br><span class="line"></span><br><span class="line">　　alert(Chinese.birthPlaces); <span class="comment">//北京, 上海, 香港</span></span><br></pre></td></tr></table></figure></p><p>目前，jQuery库使用的就是这种继承方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript构造函数继承</title>
      <link href="/2019/05/05/Js%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/05/05/Js%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>这个系列的第一部分，主要介绍了如何”封装”数据和方法，以及如何从原型对象生成实例。</p><p>今天要介绍的是，对象之间的”继承”的五种方法。</p><p>比如，现在有一个”动物”对象的构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.species = <span class="string">"动物"</span>;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>还有一个”猫”对象的构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>怎样才能使”猫”继承”动物”呢？</p><h3 id="一、-构造函数绑定"><a href="#一、-构造函数绑定" class="headerlink" title="一、 构造函数绑定"></a>一、 构造函数绑定</h3><p>第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p><h3 id="二、-prototype模式"><a href="#二、-prototype模式" class="headerlink" title="二、 prototype模式"></a>二、 prototype模式</h3><p>第二种方法更常见，使用prototype属性。</p><p>如果”猫”的prototype对象，指向一个Animal的实例，那么所有”猫”的实例，就能继承Animal了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line">　　Cat.prototype.constructor = Cat;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p><p>代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Cat.prototype = <span class="keyword">new</span> Animal();</span><br></pre></td></tr></table></figure></p><p>它相当于完全删除了prototype 对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Cat.prototype.constructor = Cat;</span><br></pre></td></tr></table></figure></p><p>原来，任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有”Cat.prototype = new Animal();”这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Cat.prototype.constructor == Animal); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1.constructor == Cat.prototype.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>因此，在运行”Cat.prototype = new Animal();”这一行之后，cat1.constructor也指向Animal！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1.constructor == Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。这就是第二行的意思。</p><p>这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　o.prototype = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　o.prototype.constructor = o;</span><br></pre></td></tr></table></figure></p><h3 id="三、-直接继承prototype"><a href="#三、-直接继承prototype" class="headerlink" title="三、 直接继承prototype"></a>三、 直接继承prototype</h3><p>第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。</p><p>现在，我们先将Animal对象改写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">　　Animal.prototype.species = <span class="string">"动物"</span>;</span><br></pre></td></tr></table></figure></p><p>然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Cat.prototype = Animal.prototype;</span><br><span class="line"></span><br><span class="line">　　Cat.prototype.constructor = Cat;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p><p>与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。</p><p>所以，上面这一段代码其实是有问题的。请看第二行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Cat.prototype.constructor = Cat;</span><br></pre></td></tr></table></figure></p><p>这一句实际上把Animal.prototype对象的constructor属性也改掉了！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Animal.prototype.constructor); <span class="comment">// Cat</span></span><br></pre></td></tr></table></figure></p><h3 id="四、-利用空对象作为中介"><a href="#四、-利用空对象作为中介" class="headerlink" title="四、 利用空对象作为中介"></a>四、 利用空对象作为中介</h3><p>由于”直接继承prototype”存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　F.prototype = Animal.prototype;</span><br><span class="line"></span><br><span class="line">　　Cat.prototype = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">　　Cat.prototype.constructor = Cat;</span><br></pre></td></tr></table></figure></p><p>F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Animal.prototype.constructor); <span class="comment">// Animal</span></span><br></pre></td></tr></table></figure></p><p>我们将上面的方法，封装成一个函数，便于使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　　　F.prototype = Parent.prototype;</span><br><span class="line"></span><br><span class="line">　　　　Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">　　　　Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line">　　　　Child.uber = Parent.prototype;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>使用的时候，方法如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　extend(Cat,Animal);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p><p>这个extend函数，就是YUI库如何实现继承的方法。</p><p>另外，说明一点，函数体最后一行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　Child.uber = Parent.prototype;</span><br></pre></td></tr></table></figure></p><p>意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p><h3 id="五、-拷贝继承"><a href="#五、-拷贝继承" class="headerlink" title="五、 拷贝继承"></a>五、 拷贝继承</h3><p>上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用”拷贝”方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第五种方法。</p><p>首先，还是把Animal的所有不变属性，都放到它的prototype对象上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">　　Animal.prototype.species = <span class="string">"动物"</span>;</span><br></pre></td></tr></table></figure></p><p>然后，再写一个函数，实现属性拷贝的目的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extend2</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> p = Parent.prototype;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> c = Child.prototype;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　c[i] = p[i];</span><br><span class="line"></span><br><span class="line">　　　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　c.uber = p;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数的作用，就是将父对象的prototype对象中的属性，一一拷贝给Child对象的prototype对象。</p><p>使用的时候，这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　extend2(Cat, Animal);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript封装</title>
      <link href="/2019/05/01/Js%E5%B0%81%E8%A3%85/"/>
      <url>/2019/05/01/Js%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Javascript是一种基于对象的语言，所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。</p><p>那么，如果我们要把”属性”（property）和”方法”（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？</p><h3 id="一、-生成实例对象的原始模式"><a href="#一、-生成实例对象的原始模式" class="headerlink" title="一、 生成实例对象的原始模式"></a>一、 生成实例对象的原始模式</h3><p>假定我们把猫看成一个对象，它有”名字”和”颜色”两个属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="keyword">var</span> Cat = &#123;</span><br><span class="line">　　　　name : <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">　　　　color : <span class="string">''</span></span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>现在，我们需要根据这个原型对象的规格（schema），生成两个实例对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line"></span><br><span class="line">　　　　cat1.name = <span class="string">"大毛"</span>; <span class="comment">// 按照原型对象的属性赋值</span></span><br><span class="line"></span><br><span class="line">　　　　cat1.color = <span class="string">"黄色"</span>;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　　　cat2.name = <span class="string">"二毛"</span>;</span><br><span class="line"></span><br><span class="line">　　　　cat2.color = <span class="string">"黑色"</span>;</span><br></pre></td></tr></table></figure></p><p>好了，这就是最简单的封装了，把两个属性封装在一个对象里面。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。</p><h3 id="二、-原始模式的改进"><a href="#二、-原始模式的改进" class="headerlink" title="二、 原始模式的改进"></a>二、 原始模式的改进</h3><p>我们可以写一个函数，解决代码重复的问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　name:name,</span><br><span class="line"></span><br><span class="line">　　　　　　color:color</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>然后生成实例对象，就等于是在调用函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat2 = Cat(<span class="string">"二毛"</span>,<span class="string">"黑色"</span>);</span><br></pre></td></tr></table></figure></p><p>这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。</p><h3 id="三、-构造函数模式"><a href="#三、-构造函数模式" class="headerlink" title="三、 构造函数模式"></a>三、 构造函数模式</h3><p>为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。</p><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。</p><p>比如，猫的原型对象现在可以这样写，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.color=color;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>我们现在就可以生成实例对象了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">"二毛"</span>,<span class="string">"黑色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.name); <span class="comment">// 大毛</span></span><br><span class="line"></span><br><span class="line">　　alert(cat1.color); <span class="comment">// 黄色</span></span><br></pre></td></tr></table></figure></p><p>这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1.constructor == Cat); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">　　alert(cat2.constructor == Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1 <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">　　alert(cat2 <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h3 id="四、构造函数模式的问题"><a href="#四、构造函数模式的问题" class="headerlink" title="四、构造函数模式的问题"></a>四、构造函数模式的问题</h3><p>构造函数方法很好用，但是存在一个浪费内存的问题。</p><p>请看，我们现在为Cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象Cat就变成了下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.type = <span class="string">"猫科动物"</span>;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"吃老鼠"</span>);&#125;;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>还是采用同样的方法，生成实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat (<span class="string">"二毛"</span>,<span class="string">"黑色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.type); <span class="comment">// 猫科动物</span></span><br><span class="line"></span><br><span class="line">　　cat1.eat(); <span class="comment">// 吃老鼠</span></span><br></pre></td></tr></table></figure></p><p>表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1.eat == cat2.eat); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。</p><h3 id="五、-Prototype模式"><a href="#五、-Prototype模式" class="headerlink" title="五、 Prototype模式"></a>五、 Prototype模式</h3><p>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。</p><p>这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　Cat.prototype.type = <span class="string">"猫科动物"</span>;</span><br><span class="line"></span><br><span class="line">　　Cat.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"吃老鼠"</span>)&#125;;</span><br></pre></td></tr></table></figure></p><p>然后，生成实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">"二毛"</span>,<span class="string">"黑色"</span>);</span><br><span class="line"></span><br><span class="line">　　alert(cat1.type); <span class="comment">// 猫科动物</span></span><br><span class="line"></span><br><span class="line">　　cat1.eat(); <span class="comment">// 吃老鼠</span></span><br></pre></td></tr></table></figure></p><p>这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1.eat == cat2.eat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h3 id="六、-Prototype模式的验证方法"><a href="#六、-Prototype模式的验证方法" class="headerlink" title="六、 Prototype模式的验证方法"></a>六、 Prototype模式的验证方法</h3><p>为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。，</p><p>6.1 isPrototypeOf()</p><p>这个方法用来判断，某个proptotype对象和某个实例之间的关系。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(Cat.prototype.isPrototypeOf(cat1)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">　　alert(Cat.prototype.isPrototypeOf(cat2)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>6.2 hasOwnProperty()</p><p>每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(cat1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">　　alert(cat1.hasOwnProperty(<span class="string">"type"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>6.3 in运算符</p><p>in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　alert(<span class="string">"name"</span> <span class="keyword">in</span> cat1); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">　　alert(<span class="string">"type"</span> <span class="keyword">in</span> cat1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>in运算符还可以用来遍历某个对象的所有属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　<span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> cat1) &#123; alert(<span class="string">"cat1["</span>+prop+<span class="string">"]="</span>+cat1[prop]); &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript-this</title>
      <link href="/2019/04/27/Js-this/"/>
      <url>/2019/04/27/Js-this/</url>
      
        <content type="html"><![CDATA[<p>this是 JavaScript 语言的一个关键字,是函数生成时,在函数内部自动生成的指向函数作用域的指针。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数test生成时，内部会自动有一个this指针可以使用,有四种用法。</p><h2 id="一：纯粹的函数调用"><a href="#一：纯粹的函数调用" class="headerlink" title="一：纯粹的函数调用"></a>一：纯粹的函数调用</h2><p>这是函数的最通常用法，属于全局性调用，因此this就代表全局对象。请看下面这段代码，它的运行结果是1。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line">test();  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><h2 id="二：作为对象方法的调用"><a href="#二：作为对象方法的调用" class="headerlink" title="二：作为对象方法的调用"></a>二：作为对象方法的调用</h2><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.x = <span class="number">1</span>;</span><br><span class="line">obj.m = test;</span><br><span class="line"></span><br><span class="line">obj.m(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><h2 id="三-作为构造函数调用"><a href="#三-作为构造函数调用" class="headerlink" title="三 作为构造函数调用"></a>三 作为构造函数调用</h2><p>所谓构造函数，就是通过这个函数，可以生成一个新对象。这时，this就指这个新对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> test();</span><br><span class="line">obj.x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>运行结果为1。为了表明这时this不是全局对象，我们对代码做一些改变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> test();</span><br><span class="line">x  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>运行结果为2，表明全局变量x的值根本没变。</p><h2 id="四-apply-call-调用"><a href="#四-apply-call-调用" class="headerlink" title="四 apply,call 调用"></a>四 apply,call 调用</h2><p>Function.prototype.call 和 Function.prototype.apply。它们的作用一模一样,区别仅在于传入参数的形式的不同。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.x = <span class="number">1</span>;</span><br><span class="line">obj.m = test;</span><br><span class="line">obj.m.apply() <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></p><p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。</p><p>如果把最后一行代码修改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.m.apply(obj); <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>运行结果就变成了1，证明了第一参数为修改this指向，这时this指向obj。<br>call 可以如同上面apply 一样调用结果一样。下面是它们的不同之处。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"> a, b, c </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;;</span><br><span class="line">func.call( <span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>  ); <span class="comment">// 123</span></span><br><span class="line">func.apply( <span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] ); <span class="comment">// 123</span></span><br><span class="line">func.call( <span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  ); <span class="comment">// [1, 2, 3] undefined undefined</span></span><br><span class="line">func.apply( <span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript闭包</title>
      <link href="/2019/04/22/Js%E9%97%AD%E5%8C%85/"/>
      <url>/2019/04/22/Js%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><p>要理解闭包，首先必须理解Javascript特殊的变量作用域，变量的作用域有两种：全局变量和局部变量。</p><p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> a=<span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　alert(a);</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">a1(); <span class="comment">// 111</span></span><br></pre></td></tr></table></figure></p><p>另一方面，在函数外部无法读取函数内的局部变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> a=<span class="number">999</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　alert(a); <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure></p><p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用let命令。如果不用的话，实际上声明了一个全局变量！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　a=<span class="number">111</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　a1();</span><br><span class="line"></span><br><span class="line">　　alert(a); <span class="comment">// 111</span></span><br></pre></td></tr></table></figure></p><h2 id="二、从外部读取局部变量"><a href="#二、从外部读取局部变量" class="headerlink" title="二、从外部读取局部变量"></a>二、从外部读取局部变量</h2><p>出于某原因，我们在特定的开发环境下需要得到函数内的局部变量。但是，我们知道，正常情况下，这是办不到的，只有通过写另外的代码来达到目的。</p><p>可以在函数的内部，再定义一个函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> a=<span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">a2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(a); <span class="comment">// 111</span></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>函数a2在函数a1的作用域内，所以现在a1内部的局部变量，对a2都是可见的。但f2作用域内的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构，作用域内的子对象可以看见当前作用域内和当前作用域所有父级内部的局部变量，但是父级对子对象的局部变量是不可见的。</p><p>如下a2可以访问a1中的局部变量，那么只要把f2作为暴露出来，我们就可以在f1外部访问它的内部变量了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> a=<span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">a2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(a);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> a2;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> test=a1();</span><br><span class="line"></span><br><span class="line">test(); <span class="comment">// 111</span></span><br></pre></td></tr></table></figure></p><h2 id="三、什么是闭包"><a href="#三、什么是闭包" class="headerlink" title="三、什么是闭包"></a>三、什么是闭包</h2><p>上一节代码中的a2函数，就是闭包。各种专业文献上的”闭包”定义非常抽象，很难看懂。我的理解是：变量私有化，并且在需要时也能够通过变通方法读取。</p><p>由于在Javascript语言中，作用域中的变量 只能在作用域内才能访问，可以把闭包简单理解成实现私有成员；保护命名空间；避免污染全局变量。可以使变量长期驻留在内存中。</p><h2 id="四、闭包的应用场景"><a href="#四、闭包的应用场景" class="headerlink" title="四、闭包的应用场景"></a>四、闭包的应用场景</h2><p>闭包可以用在许多地方。它的最大用处有两个，一是可以在外部访问作用域内的变量，另一个就是让这些变量的值始终保持在内存中。</p><p>怎么来理解这句话呢？请看下面的代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> a=<span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">　　　　aAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;a+=<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">a2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(a);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> a2;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> test=a1();</span><br><span class="line"></span><br><span class="line"> test(); <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">　　aAdd();</span><br><span class="line"></span><br><span class="line"> test(); <span class="comment">// 112</span></span><br></pre></td></tr></table></figure></p><p>test 实际上 的等于a2函数，a2函数是a1对外暴露a变量的接口。test执行了两次，第一次的值是111，第二次的值是112。这证明了，函数a1中的局部变量a一直保存在内存中，并没有在a1调用后被自动清除。</p><p>导致这样的根本原因就在于a1是a2的父函数，而a2被赋给了一个全局变量，这导致a2始终在内存中，而a2的存在依赖于a1，因此a1也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p><p>这段代码中aAdd可以直接在函数外部执行 是由于他没有使用var或let关键字，因此他是全局变量。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2019/04/17/Js/"/>
      <url>/2019/04/17/Js/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript规定了几种语言类型"><a href="#JavaScript规定了几种语言类型" class="headerlink" title="JavaScript规定了几种语言类型"></a>JavaScript规定了几种语言类型</h3><p>Number,String,Boolean,Null,Undefined,Object,Symbol</p><h3 id="JavaScript对象的底层数据结构是什么"><a href="#JavaScript对象的底层数据结构是什么" class="headerlink" title="JavaScript对象的底层数据结构是什么"></a>JavaScript对象的底层数据结构是什么</h3><p>四个数据属性<br>writable<br>对象属性是否可以被任意改写</p><p>enumerabel<br>对象属性是否可枚举，可枚举就支持for in、Object.keys、JSON.stringify方法，反之亦然。</p><p>value<br>对象属性的默认值</p><p>configurable<br>能否使用delete、能否需改属性特性、或能否修改访问器属性、，false为不可重新定义，默认值为true</p><p>两个访问器属性<br>get<br>获取对象属性值时候触发的方法</p><p>set<br>给对象属性赋值时候触发的方法</p><h3 id="Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol"><a href="#Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol" class="headerlink" title="Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol"></a>Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol</h3><p>ES6中引入了一种新的基础数据类型：Symbol，不过很多开发者可能都不怎么了解它，或者觉得在实际的开发工作中并没有什么场景应用到它，那么今天我们来讲讲这个数据类型，并看看我们怎么来利用它来改进一下我们的代码。由于Symbol是一种基础数据类型，所以当我们使用typeof去检查它的类型的时候，它会返回一个属于自己的类型symbol，而不是什么string、object之类的：<br>  应用场景1：使用Symbol来作为对象属性名(key)<br>    Symbol类型的key是不能通过Object.keys()或者for…in来枚举的，它未被包含在对象自身的属性名集合(property names)之中。所以，利用该特性，我们可以把一些不需要对外操作和访问的属性使用Symbol来定义。也正因为这样一个特性，当使用JSON.stringify()将对象转换成JSON字符串的时候，Symbol属性也会被排除在输出内容之外,</p><p>  应用场景2：使用Symbol来替代常量<br>    const TYPE_AUDIO = Symbol()<br>    const TYPE_VIDEO = Symbol()<br>    const TYPE_IMAGE = Symbol()</p><p>  应用场景3：使用Symbol定义类的私有属性/方法<br>    Symbol只能被限制在声明的js内部使用，所以使用它来定义的类属性是没有办法被模块外访问到的，达到了一个私有化的效果。</p><h3 id="JavaScript中的变量在内存中的具体存储形式"><a href="#JavaScript中的变量在内存中的具体存储形式" class="headerlink" title="JavaScript中的变量在内存中的具体存储形式"></a>JavaScript中的变量在内存中的具体存储形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">var</span> n = m;</span><br><span class="line"><span class="keyword">var</span> l = m;</span><br><span class="line">n     = <span class="number">15</span>;</span><br><span class="line">l.a   = <span class="number">15</span></span><br></pre></td></tr></table></figure><p>  变量m存在于栈中，{ a: 10, b: 20 } 作为对象存在于堆内存中,n = m, l = m。 n = 15后切断了 与m地址值的联系故而不影响m，l.a = 15 会改变m.a 的值。</p><h3 id="基本类型对应的内置对象，以及他们之间的装箱拆箱操作"><a href="#基本类型对应的内置对象，以及他们之间的装箱拆箱操作" class="headerlink" title="基本类型对应的内置对象，以及他们之间的装箱拆箱操作"></a>基本类型对应的内置对象，以及他们之间的装箱拆箱操作</h3><p>还是拿最开始的例子 var s1 = “abc”;var s2 = s1.indexOf(“a”)；<br>变量s1是一个基本类型值，它不是对象，它不应该有方法。但是js内部为我们完成了一系列处理（即装箱），使得它能够调用方法。<br>拆箱：将引用类型对象转换为对应的值类型对象,它是通过引用类型的valueOf()或者toString()方法来实现的。<br>console.log( typeof s1 ); //object console.log( typeof objStr.valueOf() ); //string console.log( typeof objNum.toString() ); // string</p><h3 id="理解值类型和引用类型"><a href="#理解值类型和引用类型" class="headerlink" title="理解值类型和引用类型"></a>理解值类型和引用类型</h3><p>JS基本类型与引用类型知多少<br>1、JavaScript值类型和引用类型有哪些<br>  （1）值类型(基本类型)：数值(number)、布尔值(boolean)、null、undefined、string(在赋值传递中会以引用类型的方式来处理)。</p><p>  （2）引用类型：对象、数组、函数。</p><p>2、如何理解值类型和引用类型<br>  之前看到一个比喻，觉得非常贴切，想要和大家分享一下：用“连锁店”和“连锁店钥匙”来理解。<br>  （1）值类型：变量的交换等于在一个新的地方按照连锁店的规范标准（统一店面理解为相同的变量内容）新开一个分店，这样新开的店与其它旧店互不相关、各自运营。<br>  （2）引用类型：变量的交换等同于把现有一间店的钥匙（变量引用地址）复制一把给了另外一个老板，此时两个老板同时管理一间店，两个老板的行为都有可能对一间店的运营造成影响。</p><h3 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h3><p>  最初设计<br>    JavaScript的最初版本是这样区分的：null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。<br>  目前的用法<br>    但是，上面这样的区分，在实践中很快就被证明不可行。目前，null和undefined基本是同义的，只有一些细微的差别。</p><pre><code>null表示&quot;没有对象&quot;，即该处不应该有值。典型用法是：（1） 作为函数的参数，表示该函数的参数不是对象。（2） 作为对象原型链的终点。Object.getPrototypeOf(Object.prototype)// nullundefined表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。典型用法是：（1）变量被声明了，但没有赋值时，就等于undefined。（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。（3）对象没有赋值的属性，该属性的值为undefined。（4）函数没有返回值时，默认返回undefined。</code></pre><h3 id="至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型"><a href="#至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型" class="headerlink" title="至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型"></a>至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</h3><p>  1、typeof:（可以对基本类型做出准确的判断，但对于引用类型，用它就有点力不从心了）<br>  2、instanceof 判断对象和构造函数在原型链上是否有关系，如果有关系，返回真，否则返回假<br>  3、constructor：查看对象对应的构造函数，constructor 在其对应对象的原型下面，是自动生成的。当我们写一个构造函数的时候，程序会自动添加：构造函数名.prototype.constructor = 构造函数名<br>  4、Object.prototype.toString(可以说不管是什么类型，它都可以立即判断出)</p><h3 id="可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用"><a href="#可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用" class="headerlink" title="可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用"></a>可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</h3><p>  1， “+”“-”运算符<br>  2，语句中存在的隐式类型转换，会在判断时转换为Boolean类型;<br>  3， alert时存在的隐式类型转换<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'hello'</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> a.fn()); <span class="comment">//--&gt;object</span></span><br><span class="line">alert(a.fn()); <span class="comment">//--&gt;hello</span></span><br></pre></td></tr></table></figure></p><h3 id="出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法"><a href="#出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法" class="headerlink" title="出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法"></a>出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法</h3><p>  最大安全数字:即2的53次方，为9007199254740992。如果超过这个值，那么js会出现不精确的问题。解决精度丢失的问题,NPM上有许多支持JavaScript和Node.js的数学库，比如math.js，decimal.js,D.js等等</p><h2 id="未完待续～"><a href="#未完待续～" class="headerlink" title="未完待续～"></a>未完待续～</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js + MySQL 实现曾删改查，上传图片， sms服务～</title>
      <link href="/2019/04/12/Node.js+MySQL/"/>
      <url>/2019/04/12/Node.js+MySQL/</url>
      
        <content type="html"><![CDATA[<h3 id="源码戳这里"><a href="#源码戳这里" class="headerlink" title="源码戳这里"></a><a href="https://github.com/DavidYuanX/nodeJS" target="_blank" rel="noopener">源码</a>戳这里</h3><p>假设您已经安装了 Node.js，创建目录以保存应用程序，并将其设置为工作目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mysql</span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">let</span> sqluser = &#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'root'</span>,</span><br><span class="line">  password : <span class="string">'123456'</span>,</span><br><span class="line">  database : <span class="string">'test'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(sqluser);</span><br></pre></td></tr></table></figure><h3 id="执行以下代码即可查询出数据。"><a href="#执行以下代码即可查询出数据。" class="headerlink" title="执行以下代码即可查询出数据。"></a>执行以下代码即可查询出数据。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  sql = <span class="string">'SELECT * FROM sqlName'</span>;</span><br><span class="line">connection.query(sql, (err, results, fields) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;<span class="built_in">console</span>.log(<span class="string">'[SELECT ERROR] - '</span>,err.message);<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">connection.end()</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">`INSERT INTO users(name,tel,password)</span></span><br><span class="line"><span class="string">           VALUES(?,?,?,)`</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">"name"</span>,<span class="string">"tel"</span>,<span class="string">"password"</span>];</span><br><span class="line">connection.query(sql,data, (err, results, fields) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;<span class="built_in">console</span>.log(<span class="string">'[INSERT ERROR] - '</span>,err.message);<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">connection.end()</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">`UPDATE sqlName</span></span><br><span class="line"><span class="string">           SET name = ?,tel = ?,password = ?</span></span><br><span class="line"><span class="string">           WHERE id = ?`</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">"name"</span>,<span class="string">"tel"</span>,<span class="string">"password"</span>];</span><br><span class="line">connection.query(sql,data, (err, results, fields) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;<span class="built_in">console</span>.log(<span class="string">'[UPDATE ERROR] - '</span>,err.message);<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">connection.end()</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">`DELETE FROM sqlName WHERE id = ?`</span>;</span><br><span class="line"><span class="keyword">let</span> data = id;</span><br><span class="line">connection.query(sql,data, (err, results, fields) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;<span class="built_in">console</span>.log(<span class="string">'[DELETE ERROR] - '</span>,err.message);<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">connection.end()</span><br></pre></td></tr></table></figure><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装Node.js模块，用于解析表单数据，尤其是文件上载。</span></span><br><span class="line">npm i formidable</span><br><span class="line"><span class="comment">// 引入formidable模块，和node fs文件系统。</span></span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 创建一个新的传入表单。</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm()</span><br><span class="line"><span class="comment">// 为输入的表单字段设置编码。</span></span><br><span class="line">form.encoding = <span class="string">'utf-8'</span>;</span><br><span class="line"><span class="comment">// 设置用于放置文件上传的目录。您可以稍后使用fs.rename（）移动它们。</span></span><br><span class="line">form.uploadDir = <span class="string">'public/images/'</span>;</span><br><span class="line"><span class="comment">// 如果您希望写入form.uploaddir的文件包含原始文件的扩展名，请设置</span></span><br><span class="line">form.keepExtensions = <span class="literal">true</span>;<span class="comment">//保留后缀</span></span><br><span class="line"><span class="comment">// 限制所有字段（文件除外）可以以字节为单位分配的内存量。如果超过此值，'error'则发出事件。默认大小为20MB。</span></span><br><span class="line">form.maxFieldsSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="comment">//处理图片</span></span><br><span class="line">form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 存入硬盘</span></span><br><span class="line">  <span class="keyword">let</span> filename = files.file.name</span><br><span class="line">  fs.renameSync(item.path, <span class="string">'public/images/'</span>+filename);</span><br><span class="line">  <span class="comment">// 存入数据库</span></span><br><span class="line">  sql = <span class="string">`INSERT INTO img(title,name,img_src)</span></span><br><span class="line"><span class="string">         VALUES(?,?,?,?,?)`</span>;</span><br><span class="line">  data = [fields.title,fields.name,<span class="string">'public/images/'</span>+filename]</span><br><span class="line">  connection.query(sql,data, (err, results, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;<span class="built_in">console</span>.log(<span class="string">'[DELETE ERROR] - '</span>,err.message);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">    res.status(<span class="number">200</span>).json(&#123;<span class="attr">msg</span>:<span class="string">'上传成功'</span>,<span class="attr">data</span>:results&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Sms-短信验证码服务"><a href="#Sms-短信验证码服务" class="headerlink" title="Sms 短信验证码服务"></a>Sms 短信验证码服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Core = <span class="built_in">require</span>(<span class="string">'@alicloud/pop-core'</span>);</span><br><span class="line"><span class="keyword">var</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>);</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> Core(&#123;</span><br><span class="line">    accessKeyId: <span class="string">''</span>,</span><br><span class="line">    accessKeySecret: <span class="string">''</span>,</span><br><span class="line">    endpoint: <span class="string">''</span>,</span><br><span class="line">    apiVersion: <span class="string">'2017-05-25'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> sendSms = <span class="function"><span class="keyword">function</span> (<span class="params">PhoneNumbers,callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> code = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()) <span class="comment">// 这里可以乘想获得的验证码长度～</span></span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">        <span class="string">"RegionId"</span>: <span class="string">"cn-hangzhou"</span>,</span><br><span class="line">        <span class="string">"PhoneNumbers"</span>: PhoneNumbers.toString(),</span><br><span class="line">        <span class="string">"SignName"</span>: <span class="string">"小小小小的商城"</span>,</span><br><span class="line">        <span class="string">"TemplateCode"</span>: <span class="string">"SMS_160571696"</span>,</span><br><span class="line">        <span class="string">"TemplateParam"</span>: <span class="string">"&#123;code:"</span>+code+<span class="string">"&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> requestOption = &#123;</span><br><span class="line">        method: <span class="string">'POST'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// console.log(code)</span></span><br><span class="line">    <span class="comment">// callback &amp;&amp; callback(md5(code))</span></span><br><span class="line">    client.request(<span class="string">'SendSms'</span>, params, requestOption).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        callback &amp;&amp; callback(&#123;<span class="attr">smsRes</span>:result,<span class="attr">code</span>:md5(code)&#125;)</span><br><span class="line">    &#125;, (ex) =&gt; &#123;</span><br><span class="line">        callback &amp;&amp; callback(&#123;<span class="attr">smsRes</span>:ex,<span class="attr">code</span>:ex.Message&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sendSms;</span><br></pre></td></tr></table></figure><h3 id="验证码接口实现～"><a href="#验证码接口实现～" class="headerlink" title="验证码接口实现～"></a>验证码接口实现～</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> sendSms = <span class="built_in">require</span>(<span class="string">'../library/sms'</span>)</span><br><span class="line">router.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">    sendSms(req.body.tel,(smsMsg)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(smsMsg)</span><br><span class="line">        res.status(<span class="number">200</span>).json(smsMsg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express 搭建 服务端 实现简单 api 交互</title>
      <link href="/2019/04/05/Express/"/>
      <url>/2019/04/05/Express/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>假设您已经安装了 Node.js，创建目录以保存应用程序，并将其设置为工作目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myapp</span><br><span class="line">$ cd myapp</span><br></pre></td></tr></table></figure><p>使用 npm init 命令为应用程序创建 package.json 文件。 有关 package.json 工作方式的更多信息，请参阅<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure></p><p>此命令提示您输入若干项，例如应用程序的名称和版本。 现在，只需按回车键以接受其中大多数项的缺省值，但以下情况例外：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry point: (index.js)</span><br></pre></td></tr></table></figure></p><p>输入 app.js，或者您希望使用的任何主文件名称。如果希望文件名为 index.js，请按回车键以接受建议的缺省文件名。<br>在 app 目录中安装 Express，然后将其保存在依赖项列表中。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express --save</span><br></pre></td></tr></table></figure></p><p>要暂时安装 Express 而不将其添加到依赖项列表中，请省略 –save 选项：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express</span><br></pre></td></tr></table></figure></p><p>采用 –save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由表示应用程序端点 (URI) 的定义以及端点响应客户机请求的方式。<br>以下代码是非常基本的路由示例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// respond with "hello world" when a GET request is made to the homepage</span></span><br><span class="line">  app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure></p><h3 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'../index'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">app.set(<span class="string">'port'</span>, <span class="string">'3000'</span>);</span><br><span class="line">server.listen(port,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start-up success!'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>port 给定端口 3000，listen 监听 3000 端口， index 引入上面的路由，然后在 package.json scripts 对象增加启动方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node www"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>控制台输入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure></p><p>控制台打印 Start-up success! 浏览器 输入 localhost:3000 成功获得回包 “hello world”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Express </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glup + ts</title>
      <link href="/2019/03/28/Gulp-ts/"/>
      <url>/2019/03/28/Gulp-ts/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>假设您已经安装了 Node.js，创建目录以保存应用程序，并将其设置为工作目录。</p><p>创建简单工程<br>我们首先创建一个新目录。 命名为tsDemo，也可以使用任何你喜欢的名字。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init <span class="comment">//初始化 项目</span></span><br><span class="line">npm install --save-dev typescript gulp gulp-typescript <span class="comment">//安装必要依赖</span></span><br></pre></td></tr></table></figure><h3 id="然后，考虑拥有如下的目录结构…"><a href="#然后，考虑拥有如下的目录结构…" class="headerlink" title="然后，考虑拥有如下的目录结构…"></a>然后，考虑拥有如下的目录结构…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ts.json</span><br><span class="line">gulpfile.js</span><br><span class="line">src/</span><br><span class="line">    greet.ts</span><br><span class="line">    main.ts</span><br><span class="line">    index.html</span><br></pre></td></tr></table></figure><h3 id="写一个简单的例子"><a href="#写一个简单的例子" class="headerlink" title="写一个简单的例子"></a>写一个简单的例子</h3><p>让我们写一个Hello World程序。 在src目录下修改main.ts文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sayHello &#125; <span class="keyword">from</span> <span class="string">"./greet"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sayHello(<span class="string">"TypeScript"</span>));</span><br></pre></td></tr></table></figure></p><p>修改src/greet.ts文件如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello from <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改gulpfile.js文件如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> ts = <span class="built_in">require</span>(<span class="string">"gulp-typescript"</span>);</span><br><span class="line"><span class="keyword">var</span> tsProject = ts.createProject(<span class="string">"tsconfig.json"</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tsProject.src()</span><br><span class="line">        .pipe(tsProject())</span><br><span class="line">        .js.pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>最后，将 src/greet.ts 添加到 tsconfig.json 如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"files"</span>: [</span><br><span class="line">        <span class="string">"src/main.ts"</span>,</span><br><span class="line">        <span class="string">"src/greet.ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Node.js下进行测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line">node dist/main.js</span><br></pre></td></tr></table></figure></p><p>现在应该可以打印出 “Hello from TypeScript”。</p><p>现在，让我们把这个工程由Node.js环境移到浏览器环境里，修改目录下package.json。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ts"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="string">"babelify"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">    <span class="string">"browserify"</span>: <span class="string">"^16.2.3"</span>,</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"gulp-sourcemaps"</span>: <span class="string">"^2.6.5"</span>,</span><br><span class="line">    <span class="string">"gulp-typescript"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^3.0.2"</span>,</span><br><span class="line">    <span class="string">"gulp-util"</span>: <span class="string">"^3.0.8"</span>,</span><br><span class="line">    <span class="string">"tsify"</span>: <span class="string">"^4.0.1"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^3.4.5"</span>,</span><br><span class="line">    <span class="string">"vinyl-buffer"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="string">"vinyl-source-stream"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"watchify"</span>: <span class="string">"^3.11.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i   <span class="comment">// 安装依赖</span></span><br></pre></td></tr></table></figure><p>新建一个页面<br>在src目录下新建一个index.html文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">        &lt;title&gt;Hello World!&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p id=<span class="string">"greeting"</span>&gt;Loading ...&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script src="bundle.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>修改main.ts文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sayHello &#125; <span class="keyword">from</span> <span class="string">"./greet"</span>;</span><br><span class="line"><span class="comment">// console.log(sayHello("TypeScript"));</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showHello</span>(<span class="params">divName: string, name: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> elt = <span class="built_in">document</span>.getElementById(divName);</span><br><span class="line">    elt.innerText = sayHello(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showHello(<span class="string">"greeting"</span>, <span class="string">"TypeScript"</span>);</span><br></pre></td></tr></table></figure></p><p>修改gulpfile.js文件如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>);</span><br><span class="line"><span class="keyword">var</span> source = <span class="built_in">require</span>(<span class="string">'vinyl-source-stream'</span>);</span><br><span class="line"><span class="keyword">var</span> tsify = <span class="built_in">require</span>(<span class="string">'tsify'</span>);</span><br><span class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"><span class="keyword">var</span> buffer = <span class="built_in">require</span>(<span class="string">'vinyl-buffer'</span>);</span><br><span class="line"><span class="keyword">var</span> watchify = <span class="built_in">require</span>(<span class="string">"watchify"</span>);</span><br><span class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">"gulp-util"</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> paths = &#123;</span><br><span class="line">    pages: [<span class="string">'src/*.html'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> watchedBrowserify = watchify(browserify(&#123;</span><br><span class="line">    basedir: <span class="string">'.'</span>,</span><br><span class="line">    debug: <span class="literal">true</span>,</span><br><span class="line">    entries: [<span class="string">'src/main.ts'</span>],</span><br><span class="line">    cache: &#123;&#125;,</span><br><span class="line">    packageCache: &#123;&#125;</span><br><span class="line">&#125;).plugin(tsify));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bundle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> watchedBrowserify</span><br><span class="line">      .transform(<span class="string">'babelify'</span>, &#123;</span><br><span class="line">          presets: [<span class="string">'es2015'</span>],</span><br><span class="line">          extensions: [<span class="string">'.ts'</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">      .bundle()</span><br><span class="line">      .pipe(source(<span class="string">'bundle.js'</span>))</span><br><span class="line">      .pipe(buffer())</span><br><span class="line">      .pipe(sourcemaps.init(&#123;<span class="attr">loadMaps</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(sourcemaps.write(<span class="string">'./'</span>))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;</span><br><span class="line">gulp.task(<span class="string">'copyHtml'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(paths.pages)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">"default"</span>, [<span class="string">"copyHtml"</span>], bundle);</span><br><span class="line">watchedBrowserify.on(<span class="string">"update"</span>, bundle);</span><br><span class="line">watchedBrowserify.on(<span class="string">"log"</span>, gutil.log);</span><br></pre></td></tr></table></figure></p><p>这里运用了CommonJs export定义模块，ES2015引入模块语法。Browserify把所有模块捆绑成一个JavaScript文件。Babel编译ES2015。使用 vinyl-source-stream 把输出文件命名为bundle.js。Uglify压缩代码。Watchify监听编译。</p>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp + vueJs</title>
      <link href="/2019/03/20/Gulp-vueJs/"/>
      <url>/2019/03/20/Gulp-vueJs/</url>
      
        <content type="html"><![CDATA[<h3 id="本篇只会讲解-vue-部分，对gulp-不熟悉的朋友，敬请移步篇。"><a href="#本篇只会讲解-vue-部分，对gulp-不熟悉的朋友，敬请移步篇。" class="headerlink" title="本篇只会讲解 vue 部分，对gulp 不熟悉的朋友，敬请移步篇。"></a>本篇只会讲解 vue 部分，对gulp 不熟悉的朋友，敬请移步篇。</h3><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h3 id="尝试-Vue-js-先创建一个-html-文件，然后通过如下方式引入-Vue："><a href="#尝试-Vue-js-先创建一个-html-文件，然后通过如下方式引入-Vue：" class="headerlink" title="尝试 Vue.js 先创建一个 .html 文件，然后通过如下方式引入 Vue："></a>尝试 Vue.js 先创建一个 .html 文件，然后通过如下方式引入 Vue：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="这里不得不提及的-戳这里，数据驱动视图-是vueJs最大的特点，让我们先创建本地数据模型，-或者-通过AJAX-解析-后端-数据。"><a href="#这里不得不提及的-戳这里，数据驱动视图-是vueJs最大的特点，让我们先创建本地数据模型，-或者-通过AJAX-解析-后端-数据。" class="headerlink" title="这里不得不提及的  戳这里，数据驱动视图 是vueJs最大的特点，让我们先创建本地数据模型， 或者 通过AJAX 解析 后端 数据。"></a>这里不得不提及的 <a href="/2019/03/15/MVC-VS-MVVM/" title="MVVM">MVVM</a> 戳这里，数据驱动视图 是vueJs最大的特点，让我们先创建本地数据模型， 或者 通过AJAX 解析 后端 数据。</h3><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><h3 id="Vue-js-的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进-DOM-的系统："><a href="#Vue-js-的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进-DOM-的系统：" class="headerlink" title="Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统："></a>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"cv"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#cv'</span>,store,</span><br><span class="line">    data: &#123;</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        message: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。</p><h3 id="实例已经创建成功，让我们来了解一下-vue-的生命周期吧，"><a href="#实例已经创建成功，让我们来了解一下-vue-的生命周期吧，" class="headerlink" title="实例已经创建成功，让我们来了解一下 vue 的生命周期吧，"></a>实例已经创建成功，让我们来了解一下 vue 的生命周期吧，<a href="https://cn.vuejs.org/v2/api/#beforeCreate" title="[external] [title]" target="_blank" rel="noopener">戳这里～</a></h3><p>了解生命周期后，继续来完成本篇demo， 创建一个 created</p><p>类型：Function</p><p>详细：在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    $.getJSON(<span class="string">"data.json"</span>, <span class="string">''</span>,</span><br><span class="line">        (data, textStatus, jqXHR)=&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.commit(<span class="string">'initData'</span>,data)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store)</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>由于本次 数据模型（Model）在本地，所以我们采用$.getJSON 的方式来获得～<br>相信 细心的你 已经发现 代码中出现了 store 词汇，what？这是个神马～<br>让我们来看看 vue 另一大 利器，vuex，状态管理<a href="https://vuex.vuejs.org/zh/guide/" title="[external] [title]" target="_blank" rel="noopener">戳这里～</a><br>讲人话就是，我有一个仓库 Store，然后我还有把钥匙串儿 state 记录着仓库里所有房间，以及当前房间又形成钥匙圈子房间钥匙，需要按层级 记录。。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        todos: &#123;</span><br><span class="line">            todos1 :&#123;</span><br><span class="line">                todos2 :&#123;</span><br><span class="line">                    todos3:&#123;</span><br><span class="line">                        text: <span class="string">"找到我了～"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.state.todos.todos1.todos2.todos3.text)</span><br></pre></td></tr></table></figure></p><p>然后 升级里系统 现在有了张密码卡，不用按层级记录，直接记录里 每个房间的密码～<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        todos: &#123;</span><br><span class="line">            todos1 :&#123;</span><br><span class="line">                todos2 :&#123;</span><br><span class="line">                    todos3:&#123;</span><br><span class="line">                        text: <span class="string">"找到我了～"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">      getData: <span class="function"><span class="params">state</span> =&gt;</span> state.todos.todos1.todos2.todos3.text</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.getters.getData)</span><br></pre></td></tr></table></figure></p><p>这里要向大家浓重介绍 我们仓库的大管家 mutations ,大管家手下可以有很多兵～<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations: &#123;</span><br><span class="line">    initData (state,data) &#123;</span><br><span class="line">        state.todos.todos1.todos2.todos3.text = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里 知道了 boos 给大管家 招聘了一名 initData 的手下， 专注于 初始化text领域～<br>这时候 来了一车货，需要放入 text 房间，大管家 得知此需求，遂即派出了text领域专家 initData～<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'initData'</span>,data)</span><br></pre></td></tr></table></figure></p><p>前方预警！！！！来了5车货，需要按顺序放入a,b,c,d,e仓库，这时出现了混乱，大管家派出了5名专家，由于没有告知必须按顺序放入指定仓库，导致 顺序出现错误，任务失败～<br>这时候 仓库 又进行 升级 引入 专家组组长 Action～职责开任务单依次通知专家按照顺序完成任务～<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    Task_A (&#123; commit, rootState &#125;, cb) &#123;</span><br><span class="line">        commit(<span class="string">'a'</span>,data)</span><br><span class="line">    &#125;),</span><br><span class="line">    Task_B (&#123; commit, rootState &#125;, cb) &#123;</span><br><span class="line">        commit(<span class="string">'b'</span>,data)</span><br><span class="line">    &#125;),</span><br><span class="line">    Task_C (&#123; commit, rootState &#125;, cb) &#123;</span><br><span class="line">        commit(<span class="string">'c'</span>,data)</span><br><span class="line">    &#125;),</span><br><span class="line">    Task_D (&#123; commit, rootState &#125;, cb) &#123;</span><br><span class="line">        commit(<span class="string">'d'</span>,data)</span><br><span class="line">    &#125;),</span><br><span class="line">    ,Task_E (&#123; commit, rootState &#125;, cb) &#123;</span><br><span class="line">        commit(<span class="string">'e'</span>,data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'Task_A'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'Task_B'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'Task_C'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.dispatch(<span class="string">'Task_D'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.$store.dispatch(<span class="string">'Task_E'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>若仓库 发展至连锁，亦可开启 分店管理模式(Module)，这里 rootState 是总店所有数据，cb 回调，<br>至此 数据已存入仓库～</p><h2 id="接下来-敲黑板～-完成数据装入页面。"><a href="#接下来-敲黑板～-完成数据装入页面。" class="headerlink" title="接下来 敲黑板～ 完成数据装入页面。"></a>接下来 敲黑板～ 完成数据装入页面。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    getData () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.getData</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里需要介绍 <a href="https://cn.vuejs.org/v2/api/#computed" title="[external] [title]" target="_blank" rel="noopener">计算属性computed</a>，当页面有复杂运算时可以交给他，特点是计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性) 在该实例范畴之外，则计算属性是不会被更新的。</p><p>有人说 既然是 return this.$store.getters.getData，何不 如下写在data里面～<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">     data: store.getters.getData</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><p>这里就强调了更新，由于$.getJSON 的异步机制，实力挂载时 仓库里 data 还未装入。</p><p>数据 何时装入？这里vue 提供观察者 watch，一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">     getData (val, oldVal) &#123;</span><br><span class="line">         <span class="keyword">this</span>.data = val</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>观察到计算属性函数 getData 更新后，执行装入 页面～</p><a href="https://voyage2030.club/cv/" title="[external] [title]" target="_blank" rel="noopener">查看演示</a><a href="https://github.com/DavidYuanX/cv" title="[external] [title]" target="_blank" rel="noopener">源码戳这里～</a>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令</title>
      <link href="/2019/03/18/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/18/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git branch -a.    <span class="comment">// 查看远程分支</span></span><br><span class="line"></span><br><span class="line">git branch        <span class="comment">// 查看本地分支</span></span><br><span class="line"></span><br><span class="line">git branch -d name  <span class="comment">// 删除本地分支</span></span><br><span class="line"></span><br><span class="line">git tag         <span class="comment">// 查看标签</span></span><br><span class="line"></span><br><span class="line">git tag -a v1<span class="number">.4</span> -m <span class="string">'my version 1.4'</span> <span class="comment">// 签署标签</span></span><br><span class="line"></span><br><span class="line">git checkout -b  name   <span class="comment">// 从当前分支签出新分支</span></span><br><span class="line"></span><br><span class="line">git merge master         <span class="comment">//  合并master 到当前分支</span></span><br><span class="line"></span><br><span class="line">git branch -a | grep -v -w -E <span class="string">'master|document'</span> | sed <span class="string">'s/remotes\/origin\///g'</span> | xargs  <span class="comment">// 查看排除master|document 后的线上分支</span></span><br><span class="line"></span><br><span class="line">git push origin --<span class="keyword">delete</span> master <span class="built_in">document</span> <span class="comment">// 删除 线上分支</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue、MVVM、MVC、双向绑定</title>
      <link href="/2019/03/15/MVC-VS-MVVM/"/>
      <url>/2019/03/15/MVC-VS-MVVM/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MVVM双向数据绑定"><a href="#一、MVVM双向数据绑定" class="headerlink" title="一、MVVM双向数据绑定"></a>一、MVVM双向数据绑定</h2><h3 id="Mvvm定义MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。"><a href="#Mvvm定义MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。" class="headerlink" title="Mvvm定义MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。"></a>Mvvm定义MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。</h3><p>【模型】指的是后端传递的数据。<br>【视图】指的是所看到的⻚面。<br>【视图模型】mvvm模式的核⼼，它是连接view和model的桥梁梁。</p><h3 id="它有两个⽅方向："><a href="#它有两个⽅方向：" class="headerlink" title="它有两个⽅方向："></a>它有两个⽅方向：</h3><p> 1、是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的⻚面。实现的方式是：数据绑定。<br> 2、是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个⽅向都实现的，我们称之为数据的双向绑定。</p><p> 总结： 在MVVM的框架下视图和模型是不能直接通信的。 它们通过ViewModel来通信，ViewModel通常要实现一个observer观察者，当数据发⽣变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了了数据的双向绑定。并且MVVM中的View 和 ViewModel可以互相通信<br><img src="/img/MVVM.png" class="[class names]" title="[width] [height] [title text [alt text]]"></p><h2 id="二、MVC"><a href="#二、MVC" class="headerlink" title="二、MVC"></a>二、MVC</h2><p>MVC是Model-View- Controller的简写。即模型-视图-控制器。M和V指的意思和MVVM中的M和V意思⼀样。C即Controller指的是页⾯业务逻辑。使⽤用MVC的目的就是将M和V的代码分离。‘MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</p><p>MVC和MVVM的区别并不是VM完全取代了C</p><p>ViewModel存在目的在于抽离Controller中展示的业务逻辑,而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重⽤。由于mvc出现的时间比较早，前端并不那么成熟，很多业务逻辑也是在后端实现，所以前端并没有真正意义上的MVC模式。而我们今天再次提起MVC，是因为大前端的来到，出现了了MVVM模式的框架，我们需要了解一下MVVM这种设计模式是如何一步步演变过来的。</p><h2 id="三、为什么出现MVVM框架？"><a href="#三、为什么出现MVVM框架？" class="headerlink" title="三、为什么出现MVVM框架？"></a>三、为什么出现MVVM框架？</h2><p>（我们用库，但是框架用我们，必须按它的规则做）总结下来，一种两点，维护和使用方便、实现对业务的分成在过去的10年年中，我们已经把很多传统的服务端代码放到了浏览器器中，这样就产⽣生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS⽂件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。浏览器的兼容性问题已经不再是前端的阻碍。前端的项⽬越来越大，项⽬的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器器兼容性问题，出现了很多类库，其中最典型的就是jquery。但是这类库没有实现对业务逻辑的分成，所以维护性和扩展性极差。综上两方⾯面原因，才有了了MVVM模式一类框架的出现。比如vue,通过数据的双向绑定，极⼤提高了开发效率。</p><h2 id="四、Vue"><a href="#四、Vue" class="headerlink" title="四、Vue"></a>四、Vue</h2><p> Vue就是基于MVVM模式实现的一套框架， 在vue中： Model：指的是js中的数据，如对象，数组等等。 View：指的是页面视图 viewModel：指的是vue实例例化对象</p><h3 id="为什么说vue是渐进式框架，什么是渐进式？"><a href="#为什么说vue是渐进式框架，什么是渐进式？" class="headerlink" title="为什么说vue是渐进式框架，什么是渐进式？"></a>为什么说vue是渐进式框架，什么是渐进式？</h3><p> (1) 如果你已经有⼀个现成的服务端应⽤用，你可以将vue 作为该应⽤的⼀部分嵌入其中，带来更加丰富的交互体验;</p><p> (2) 如果你希望将更多业务逻辑放到前端来实现，那么VUE的核⼼库及其⽣态系统也可以满⾜你的各式需求（core+vuex+vue-route）。和其它前端框架一样，VUE允许你将一个⽹⻚分割成可复⽤的组件，每个组件都包含属于自⼰的HTML、CSS、JAVASCRIPT以⽤来渲染网页中相应的地⽅。</p><p> (3) 如果我们构建⼀个大型的应⽤，在这一点上，我们可能需要将东⻄分割成为各自的组件和文件，vue有⼀个命令⾏工具，使快速初始化一个真实的工程变得非常简单（vue init webpack my-project）。我们可以使用VUE的单文件组件，它包含了各自的HTML、JAVASCRIPT以及带作⽤用域的CSS或SCSS。以上这三个例子，是一步步递进的，也就是说对VUE的使用可大可小，它都会有相应的⽅方式来整合到你的项目中。所以说它是一个渐进式的框架。</p><h3 id="VUE最独特的特性"><a href="#VUE最独特的特性" class="headerlink" title="VUE最独特的特性"></a>VUE最独特的特性</h3><p>响应式的（reactive），也就是说当我们的数据变更时，VUE会帮你更新所有网页中⽤到它的地⽅</p><h2 id="五、主流框架实现双向绑定（响应式）的做法："><a href="#五、主流框架实现双向绑定（响应式）的做法：" class="headerlink" title="五、主流框架实现双向绑定（响应式）的做法："></a>五、主流框架实现双向绑定（响应式）的做法：</h2><p>1、 脏值检查：angular.js 是通过脏值检测的方式⽐对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然Google不会这么low.angular只有在指定的事件触发时进⼊入脏值检测，大致如下：DOM事件，譬如⽤用户输⼊文本，点击按钮等。( ng-click ) XHR响应事件 ( $http ) 浏览器器Location变更更事件 ($location ) Timer事件($timeout , $interval ) 执行 $digest() 或 $apply()在 Angular 中组件是以树的形式组织起来的。相应地，检测器也是⼀棵树的形状。当⼀个异步事件发⽣时，脏检查会从根组件开始，自上而下对树上的所有⼦组件进行检查，这种检查⽅式的性能存在很大问题。</p><p>2、观察者-订阅者（数据劫持）：vueObserver 数据监听器器，把一个普通的 JavaScript 对象传给Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用Object.defineProperty()方法把这些属性全部转成setter、getter⽅方法。当data中的某个属性被访问时，则会调用getter方法，当data中的属性被改变时，则会调用setter⽅方法。Compile指令解析器器，它的作⽤对每个元素节点的指令进⾏解析，替换模板数据，并绑定对应的更新函数，初始化相应的订阅。Watcher 订阅者，作为连接Observer 和Compile 的桥梁，能够订阅并收到每个属性变动的通知，执⾏指令绑定的相应回调函数。Dep 消息订阅器器，内部维护了一个数组，用来收集订阅者（Watcher），数据变动触发notify函数，再调用订阅者的 update ⽅方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Mvc </tag>
            
            <tag> MvvM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 面试题</title>
      <link href="/2019/03/10/Js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/10/Js%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-javascript获取字符串中出现最多的字符"><a href="#1-javascript获取字符串中出现最多的字符" class="headerlink" title="1,javascript获取字符串中出现最多的字符"></a>1,javascript获取字符串中出现最多的字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'afaafdff'</span>;</span><br><span class="line"><span class="keyword">var</span> obj =&#123;&#125;;<span class="comment">//定义一个obj对象</span></span><br><span class="line"><span class="comment">//利用str.charAt(i)进行字符串截取  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!obj[str.charAt(i)])&#123;        <span class="comment">//判断对象中是否有这个字符</span></span><br><span class="line">obj[str.charAt(i)] = <span class="number">1</span>;<span class="comment">//没有就保存一个</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">obj[str.charAt(i)]++;<span class="comment">//有的话就加一</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> time = <span class="number">0</span>,index = <span class="string">''</span>;</span><br><span class="line"><span class="comment">//用打擂算法循环输出obj中保存的数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123; <span class="comment">//i都代表着obj对象的键值(也就是字符)</span></span><br><span class="line"><span class="keyword">if</span>(obj[i]&gt;time)&#123;</span><br><span class="line">time = obj[i];</span><br><span class="line">index = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">'次数'</span>+time +<span class="string">',字符：'</span>+index)</span><br></pre></td></tr></table></figure><h2 id="2-javascript去重"><a href="#2-javascript去重" class="headerlink" title="2,javascript去重"></a>2,javascript去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="comment">// 一、利用ES6 Set去重（ES6中最常用）   不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“&#123;&#125;”空对象。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy1</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 二、利用for嵌套for，然后splice去重（ES5中最常用）   //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">              arr.splice(j,<span class="number">1</span>);</span><br><span class="line">              j--;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   三、利用indexOf去重</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'type error!'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            array .push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    四、利用sort()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy4</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'type error!'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.sort()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            arrry.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//     五、利用includes</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy5</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'type error!'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( !array.includes( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">            array.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 六、利用hasOwnProperty 所有的都去重了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy6</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 七、利用filter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy7</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item, <span class="number">0</span>) === index;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 八、利用递归去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy8</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array= arr,len = array.length;</span><br><span class="line"></span><br><span class="line">    array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index<span class="number">-1</span>])&#123;</span><br><span class="line">                array.splice(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            loop(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    loop(len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 九、利用Map数据结构去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy9</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map .has(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">            map .set(arr[i], <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map .set(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">            array .push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十、利用reduce+includes</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy10</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.includes(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 十一、[...new Set(arr)]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHeavy11</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"y"</span>,arr1,<span class="number">1</span>,toHeavy1(arr),<span class="number">2</span>,toHeavy2(arr),<span class="number">3</span>,toHeavy3(arr),<span class="number">4</span>,toHeavy4(arr),<span class="number">5</span>,toHeavy5(arr),<span class="number">6</span>,toHeavy6(arr),<span class="number">7</span>,toHeavy7(arr)</span><br><span class="line">,<span class="number">8</span>,toHeavy8(arr),<span class="number">9</span>,toHeavy9(arr),<span class="number">10</span>,toHeavy10(arr),<span class="number">11</span>,toHeavy11(arr))</span><br></pre></td></tr></table></figure><h3 id="未完待续～"><a href="#未完待续～" class="headerlink" title="未完待续～"></a>未完待续～</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glup 实现 实时重载刷新</title>
      <link href="/2019/03/05/GulpDemo/"/>
      <url>/2019/03/05/GulpDemo/</url>
      
        <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init <span class="comment">//初始化 项目</span></span><br><span class="line">npm install --save-dev browser-sync gulp <span class="comment">//安装必要依赖</span></span><br></pre></td></tr></table></figure><h3 id="然后，考虑拥有如下的目录结构…"><a href="#然后，考虑拥有如下的目录结构…" class="headerlink" title="然后，考虑拥有如下的目录结构…"></a>然后，考虑拥有如下的目录结构…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulpfile.js</span><br><span class="line">app/</span><br><span class="line">    styles/</span><br><span class="line">        main.css</span><br><span class="line">    scripts/</span><br><span class="line">        main.js</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure><p>通过如下的 gulpfile.js，你可以轻松地将 app 目录中的文件加到服务器中，并且所有的浏览器都会在文件发生改变之后自动刷新：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</span><br><span class="line"><span class="keyword">var</span> reload = browserSync.reload;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监视文件改动并重新载入</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">browserSync(&#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">    baseDir: <span class="string">'app'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.watch([<span class="string">'*.html'</span>, <span class="string">'styles/**/*.css'</span>, <span class="string">'scripts/**/*.js'</span>],</span><br><span class="line">&#123;<span class="attr">cwd</span>: <span class="string">'app'</span>&#125;, reload);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="在-index-html-中引入-CSS："><a href="#在-index-html-中引入-CSS：" class="headerlink" title="在 index.html 中引入 CSS："></a>在 index.html 中引入 CSS：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"styles/main.css"</span>&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li><p>通过如下命令启动服务，并且打开一个浏览器，访问默认的 URL (<a href="http://localhost:3000)：" target="_blank" rel="noopener">http://localhost:3000)：</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp serve</span><br></pre></td></tr></table></figure></li><li><p>CSS 预处理器<br>一个常见的使用案例是当 CSS 文件文件预处理之后重载它们。以 sass 为例，这便是你如何指示浏览器无需刷新整个页面而只是重载 CSS，考虑有如下的文件目录结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulpfile.js</span><br><span class="line">app/</span><br><span class="line">    scss/</span><br><span class="line">        main.scss</span><br><span class="line">    scripts/</span><br><span class="line">        main.js</span><br><span class="line">    index.html</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-sass <span class="comment">//安装必要依赖</span></span><br></pre></td></tr></table></figure><p>通过如下的 gulpfile.js，你可以轻松地监视 scss 目录中的文件，并且所有的浏览器都会在文件发生改变之后自动刷新：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</span><br><span class="line"><span class="keyword">var</span> reload = browserSync.reload;</span><br><span class="line"><span class="comment">// scss 编译</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'app/scss/**/*.scss'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'app/css'</span>))</span><br><span class="line">    .pipe(reload(&#123; <span class="attr">stream</span>:<span class="literal">true</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监视文件改动并重新载入</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>,[<span class="string">'sass'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync(&#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">        baseDir: <span class="string">'app'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 监听改动后 务必 执行事件</span></span><br><span class="line">    gulp.watch([<span class="string">'*.html'</span>, <span class="string">'css/**/*.css'</span>, <span class="string">'scripts/**/*.js'</span>],</span><br><span class="line">    &#123;<span class="attr">cwd</span>: <span class="string">'app'</span>&#125;, reload);</span><br><span class="line">    gulp.watch([<span class="string">'scss/**/*.scss'</span>], &#123;<span class="attr">cwd</span>: <span class="string">'app'</span>&#125;, [<span class="string">'sass'</span>], reload);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 默认事件</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'browser-sync'</span>]);</span><br></pre></td></tr></table></figure></p><p>通过如下命令启动服务，并且打开一个浏览器，访问默认的 URL (<a href="http://localhost:3000)：" target="_blank" rel="noopener">http://localhost:3000)：</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure></p><h3 id="亦或者-你想加入-Es6-》-Es5-？"><a href="#亦或者-你想加入-Es6-》-Es5-？" class="headerlink" title="亦或者 你想加入 Es6 =》 Es5 ？"></a>亦或者 你想加入 Es6 =》 Es5 ？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-babel babel-preset-es2015 <span class="comment">//安装必要依赖</span></span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'babel'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.src(<span class="string">'app/scripts/*.js'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'app/js'</span>))</span><br><span class="line">    .pipe(reload(&#123; <span class="attr">stream</span>:<span class="literal">true</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.watch([<span class="string">'scripts/**/*.js'</span>], &#123;<span class="attr">cwd</span>: <span class="string">'app'</span>&#125;, [<span class="string">'babel'</span>], reload);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular expression</title>
      <link href="/2019/02/28/Regular-expression/"/>
      <url>/2019/02/28/Regular-expression/</url>
      
        <content type="html"><![CDATA[<h3 id="以分割URL为例，记录一点正则表达式的用法～"><a href="#以分割URL为例，记录一点正则表达式的用法～" class="headerlink" title="以分割URL为例，记录一点正则表达式的用法～"></a>以分割URL为例，记录一点正则表达式的用法～</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse_url = <span class="regexp">/^(?:([A-Za-z]+):)?(\/&#123;0,3&#125;)([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/</span>;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://www.ora.com:80/goodparts?q#fragment"</span>;</span><br><span class="line"><span class="keyword">var</span> result = parse_url.exec(url);</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">'url'</span>,<span class="string">'scheme'</span>,<span class="string">'slash'</span>,<span class="string">'host'</span>,<span class="string">'port'</span>,<span class="string">'path'</span>,<span class="string">'query'</span>,<span class="string">'hash'</span>];</span><br><span class="line"><span class="keyword">var</span> blanks = <span class="string">'        '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = names.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(names[i] + <span class="string">':'</span> + blanks.substring(names[i].length), result[i])</span><br><span class="line">&#125;</span><br><span class="line">这段代码产生如下结果：</span><br><span class="line">hash:     fragment</span><br><span class="line">query:    q</span><br><span class="line">path:     goodparts</span><br><span class="line">port:     <span class="number">80</span></span><br><span class="line">host:     www.ora.com</span><br><span class="line">slash:    <span class="comment">//</span></span><br><span class="line">scheme:   http</span><br><span class="line">url:      http:<span class="comment">//www.ora.com/goodparts?q#fragment</span></span><br></pre></td></tr></table></figure><p>  ^字符表示字符串的开始：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?:([A-Za-z]+):)?</span><br></pre></td></tr></table></figure></p><p>  匹配协议名，A-Za-z这个字符类包含26个大小写字母。连字符（-）表示范围A到Z。后缀 + 表示这个字符类会被匹配一次或者多次。<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（\/&#123;<span class="number">0</span>,<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>  匹配//，\/表示应该匹配/（斜杠）。它用\（反斜杠）来进行转义，以免被错误解释为结束符。后缀{0,3}表示/会被匹配0次，或者1～3次。<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([<span class="number">0</span><span class="number">-9.</span>\-A-Za-z]+)</span><br></pre></td></tr></table></figure></p><p>  匹配主机名，由一个或多个数字，字母以及 . 或 - 字符组成。 - 会被转义为 - 以防与表示范围的连字符混淆。<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?::(\d+))？</span><br></pre></td></tr></table></figure></p><p>  匹配端口号，它由一个前置 : 加上一个或多个数字而组成的序列。 \d 表示一个数字字符。<br>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?:\/([^?#]*))?</span><br></pre></td></tr></table></figure></p><p>  以 / 开始。之后的字符类[^?#]以一个^开始，它表示这个类包含除 ？ 和 # 之外的所有字符。 * 表示这个字符类会被匹配0次或多次。<br>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?:\?([^#]*))?</span><br></pre></td></tr></table></figure></p><p>  以 ？ 开始匹配url带参。包含0个或多个非 # 字符。<br>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?:#(.*))?</span><br></pre></td></tr></table></figure></p><p>  以 # 开始匹配除行结束符以外的所有字符。<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure></p><p>  $ 表示这个字符串的结束。它保证在这个url的尾部没有其他更多的内容了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVG实现可控圆环进度条 扫描效果</title>
      <link href="/2019/02/26/SVG%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8E%A7%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2019/02/26/SVG%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8E%A7%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="移动端做一个-loadiing-加载的图标，跟以往沿用的都不太一样，是一个圆环进度条，圆环进度条也就罢了，还得能用百分比控制。"><a href="#移动端做一个-loadiing-加载的图标，跟以往沿用的都不太一样，是一个圆环进度条，圆环进度条也就罢了，还得能用百分比控制。" class="headerlink" title="移动端做一个 loadiing 加载的图标，跟以往沿用的都不太一样，是一个圆环进度条，圆环进度条也就罢了，还得能用百分比控制。"></a>移动端做一个 loadiing 加载的图标，跟以往沿用的都不太一样，是一个圆环进度条，圆环进度条也就罢了，还得能用百分比控制。</h3><h3 id="具体思路是-使用svg-css3-动画实现进度条的效果，代码如下："><a href="#具体思路是-使用svg-css3-动画实现进度条的效果，代码如下：" class="headerlink" title="具体思路是 使用svg + css3 动画实现进度条的效果，代码如下："></a>具体思路是 使用svg + css3 动画实现进度条的效果，代码如下：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg <span class="class"><span class="keyword">class</span></span>=<span class="string">"svg"</span> xmlns=<span class="string">"http://www.w3.org/200/svg"</span> height=<span class="string">"150"</span> width=<span class="string">"110"</span>&gt;</span><br><span class="line">    &lt;circle cx=<span class="string">"55"</span> cy=<span class="string">"55"</span> r=<span class="string">"50"</span> fill=<span class="string">"none"</span> stroke=<span class="string">"grey"</span> stroke-width=<span class="string">"5"</span> stroke-linecap=<span class="string">"round"</span>/&gt;</span><br><span class="line">    &lt;circle <span class="class"><span class="keyword">class</span></span>=<span class="string">"progress_circle"</span> id=<span class="string">"J_progress_bar"</span> cx=<span class="string">"55"</span> cy=<span class="string">"55"</span> r=<span class="string">"50"</span> fill=<span class="string">"none"</span> stroke-dasharray=<span class="string">""</span> stroke=<span class="string">"#4cc4fc"</span> stroke-width=<span class="string">"15"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br></pre></td></tr></table></figure><p>css 代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.progress_circle&#123;</span><br><span class="line">    stroke-dasharray:<span class="number">1691</span>,<span class="number">1691</span>; <span class="comment">// 进度 vs 周长</span></span><br><span class="line">    -webkit-animation:strokeDasharray <span class="number">3.5</span>s linear;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="纯css3扫描效果～"><a href="#纯css3扫描效果～" class="headerlink" title="纯css3扫描效果～"></a>纯css3扫描效果～</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border-top: 0.208rem solid #ececec;</span><br><span class="line">-webkit-animation:scan <span class="number">1.5</span>s infinite linear;</span><br><span class="line">background-image: linear-gradient(rgba(<span class="number">76</span>,<span class="number">196</span>,<span class="number">252</span>,<span class="number">.8</span>),rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>结束语：也可以用js 通过 stroke-dasharray 属性 控制 进度条，效果大致如下。</p><img src="/img/scan.jpeg" class="[class names]" title="[width] [height] [title text [alt text]]">]]></content>
      
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>License</title>
      <link href="/2019/02/25/SoftwareLicense/"/>
      <url>/2019/02/25/SoftwareLicense/</url>
      
        <content type="html"><![CDATA[<h3 id="2019-3-15-storm-另一种激活方法，选中间的activetion-code-："><a href="#2019-3-15-storm-另一种激活方法，选中间的activetion-code-：" class="headerlink" title="2019-3-15 storm(另一种激活方法，选中间的activetion code)："></a>2019-3-15 storm(另一种激活方法，选中间的activetion code)：</h3><p>前提：修改本地的hosts配置文件（/etc/hosts）<br>最后一行新增这句话：0.0.0.0 account.jetbrains.com<br>然后去 <a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a> 这个网站生成一个激活码放在打开的activetion code里面即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
